{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/mg/event-horizon/app/api/posts/random/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\ninterface Post {\n  uri: string;\n  cid: string;\n  author: {\n    did: string;\n    handle: string;\n  };\n  record: {\n    text: string;\n    createdAt: string;\n  };\n}\n\nexport async function GET() {\n  try {\n    // Set date range (last 7 days)\n    const endDate = new Date();\n    const startDate = new Date(endDate.getTime() - 7 * 24 * 60 * 60 * 1000);\n\n    // Fetch posts from Bluesky\n    const params = new URLSearchParams({\n      q: 'the', // Common word to get diverse results\n      limit: '100'\n    });\n\n    const response = await fetch(`https://bsky.social/xrpc/app.bsky.feed.searchPosts?${params}`);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    const posts: Post[] = data.posts || [];\n\n    // Randomly select 5 posts\n    const randomPosts = posts\n      .sort(() => Math.random() - 0.5)\n      .slice(0, 5)\n      .map(post => ({\n        uri: post.uri,\n        cid: post.cid,\n        author: {\n          did: post.author.did,\n          handle: post.author.handle\n        },\n        text: post.record.text,\n        createdAt: post.record.createdAt\n      }));\n\n    return NextResponse.json({ posts: randomPosts });\n  } catch (error) {\n    console.error('Error fetching random posts:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch random posts' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;;AAeO,eAAe;IACpB,IAAI;QACF,+BAA+B;QAC/B,MAAM,UAAU,IAAI;QACpB,MAAM,YAAY,IAAI,KAAK,QAAQ,OAAO,KAAK,IAAI,KAAK,KAAK,KAAK;QAElE,2BAA2B;QAC3B,MAAM,SAAS,IAAI,gBAAgB;YACjC,GAAG;YACH,OAAO;QACT;QAEA,MAAM,WAAW,MAAM,MAAM,CAAC,mDAAmD,EAAE,QAAQ;QAE3F,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;QAC1D;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,MAAM,QAAgB,KAAK,KAAK,IAAI,EAAE;QAEtC,0BAA0B;QAC1B,MAAM,cAAc,MACjB,IAAI,CAAC,IAAM,KAAK,MAAM,KAAK,KAC3B,KAAK,CAAC,GAAG,GACT,GAAG,CAAC,CAAA,OAAQ,CAAC;gBACZ,KAAK,KAAK,GAAG;gBACb,KAAK,KAAK,GAAG;gBACb,QAAQ;oBACN,KAAK,KAAK,MAAM,CAAC,GAAG;oBACpB,QAAQ,KAAK,MAAM,CAAC,MAAM;gBAC5B;gBACA,MAAM,KAAK,MAAM,CAAC,IAAI;gBACtB,WAAW,KAAK,MAAM,CAAC,SAAS;YAClC,CAAC;QAEH,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAY;IAChD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA+B,GACxC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}