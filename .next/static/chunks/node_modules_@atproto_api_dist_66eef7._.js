(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_@atproto_api_dist_66eef7._.js", {

"[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ids = exports.lexicons = exports.schemas = exports.schemaDict = void 0;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const lexicon_1 = __turbopack_require__("[project]/node_modules/@atproto/lexicon/dist/index.js [app-client] (ecmascript)");
exports.schemaDict = {
    ComAtprotoAdminDefs: {
        lexicon: 1,
        id: 'com.atproto.admin.defs',
        defs: {
            statusAttr: {
                type: 'object',
                required: [
                    'applied'
                ],
                properties: {
                    applied: {
                        type: 'boolean'
                    },
                    ref: {
                        type: 'string'
                    }
                }
            },
            accountView: {
                type: 'object',
                required: [
                    'did',
                    'handle',
                    'indexedAt'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle'
                    },
                    email: {
                        type: 'string'
                    },
                    relatedRecords: {
                        type: 'array',
                        items: {
                            type: 'unknown'
                        }
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    invitedBy: {
                        type: 'ref',
                        ref: 'lex:com.atproto.server.defs#inviteCode'
                    },
                    invites: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.server.defs#inviteCode'
                        }
                    },
                    invitesDisabled: {
                        type: 'boolean'
                    },
                    emailConfirmedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    inviteNote: {
                        type: 'string'
                    },
                    deactivatedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    threatSignatures: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.admin.defs#threatSignature'
                        }
                    }
                }
            },
            repoRef: {
                type: 'object',
                required: [
                    'did'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    }
                }
            },
            repoBlobRef: {
                type: 'object',
                required: [
                    'did',
                    'cid'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    recordUri: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            },
            threatSignature: {
                type: 'object',
                required: [
                    'property',
                    'value'
                ],
                properties: {
                    property: {
                        type: 'string'
                    },
                    value: {
                        type: 'string'
                    }
                }
            }
        }
    },
    ComAtprotoAdminDeleteAccount: {
        lexicon: 1,
        id: 'com.atproto.admin.deleteAccount',
        defs: {
            main: {
                type: 'procedure',
                description: 'Delete a user account as an administrator.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminDisableAccountInvites: {
        lexicon: 1,
        id: 'com.atproto.admin.disableAccountInvites',
        defs: {
            main: {
                type: 'procedure',
                description: 'Disable an account from receiving new invite codes, but does not invalidate existing codes.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'account'
                        ],
                        properties: {
                            account: {
                                type: 'string',
                                format: 'did'
                            },
                            note: {
                                type: 'string',
                                description: 'Optional reason for disabled invites.'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminDisableInviteCodes: {
        lexicon: 1,
        id: 'com.atproto.admin.disableInviteCodes',
        defs: {
            main: {
                type: 'procedure',
                description: 'Disable some set of codes and/or all codes associated with a set of users.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {
                            codes: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                }
                            },
                            accounts: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminEnableAccountInvites: {
        lexicon: 1,
        id: 'com.atproto.admin.enableAccountInvites',
        defs: {
            main: {
                type: 'procedure',
                description: "Re-enable an account's ability to receive invite codes.",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'account'
                        ],
                        properties: {
                            account: {
                                type: 'string',
                                format: 'did'
                            },
                            note: {
                                type: 'string',
                                description: 'Optional reason for enabled invites.'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminGetAccountInfo: {
        lexicon: 1,
        id: 'com.atproto.admin.getAccountInfo',
        defs: {
            main: {
                type: 'query',
                description: 'Get details about an account.',
                parameters: {
                    type: 'params',
                    required: [
                        'did'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:com.atproto.admin.defs#accountView'
                    }
                }
            }
        }
    },
    ComAtprotoAdminGetAccountInfos: {
        lexicon: 1,
        id: 'com.atproto.admin.getAccountInfos',
        defs: {
            main: {
                type: 'query',
                description: 'Get details about some accounts.',
                parameters: {
                    type: 'params',
                    required: [
                        'dids'
                    ],
                    properties: {
                        dids: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'infos'
                        ],
                        properties: {
                            infos: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.admin.defs#accountView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminGetInviteCodes: {
        lexicon: 1,
        id: 'com.atproto.admin.getInviteCodes',
        defs: {
            main: {
                type: 'query',
                description: 'Get an admin view of invite codes.',
                parameters: {
                    type: 'params',
                    properties: {
                        sort: {
                            type: 'string',
                            knownValues: [
                                'recent',
                                'usage'
                            ],
                            default: 'recent'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 500,
                            default: 100
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'codes'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            codes: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.server.defs#inviteCode'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminGetSubjectStatus: {
        lexicon: 1,
        id: 'com.atproto.admin.getSubjectStatus',
        defs: {
            main: {
                type: 'query',
                description: 'Get the service-specific admin status of a subject (account, record, or blob).',
                parameters: {
                    type: 'params',
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did'
                        },
                        uri: {
                            type: 'string',
                            format: 'at-uri'
                        },
                        blob: {
                            type: 'string',
                            format: 'cid'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'subject'
                        ],
                        properties: {
                            subject: {
                                type: 'union',
                                refs: [
                                    'lex:com.atproto.admin.defs#repoRef',
                                    'lex:com.atproto.repo.strongRef',
                                    'lex:com.atproto.admin.defs#repoBlobRef'
                                ]
                            },
                            takedown: {
                                type: 'ref',
                                ref: 'lex:com.atproto.admin.defs#statusAttr'
                            },
                            deactivated: {
                                type: 'ref',
                                ref: 'lex:com.atproto.admin.defs#statusAttr'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminSearchAccounts: {
        lexicon: 1,
        id: 'com.atproto.admin.searchAccounts',
        defs: {
            main: {
                type: 'query',
                description: 'Get list of accounts that matches your search query.',
                parameters: {
                    type: 'params',
                    properties: {
                        email: {
                            type: 'string'
                        },
                        cursor: {
                            type: 'string'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'accounts'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            accounts: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.admin.defs#accountView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminSendEmail: {
        lexicon: 1,
        id: 'com.atproto.admin.sendEmail',
        defs: {
            main: {
                type: 'procedure',
                description: "Send email to a user's account email address.",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'recipientDid',
                            'content',
                            'senderDid'
                        ],
                        properties: {
                            recipientDid: {
                                type: 'string',
                                format: 'did'
                            },
                            content: {
                                type: 'string'
                            },
                            subject: {
                                type: 'string'
                            },
                            senderDid: {
                                type: 'string',
                                format: 'did'
                            },
                            comment: {
                                type: 'string',
                                description: "Additional comment by the sender that won't be used in the email itself but helpful to provide more context for moderators/reviewers"
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'sent'
                        ],
                        properties: {
                            sent: {
                                type: 'boolean'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminUpdateAccountEmail: {
        lexicon: 1,
        id: 'com.atproto.admin.updateAccountEmail',
        defs: {
            main: {
                type: 'procedure',
                description: "Administrative action to update an account's email.",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'account',
                            'email'
                        ],
                        properties: {
                            account: {
                                type: 'string',
                                format: 'at-identifier',
                                description: 'The handle or DID of the repo.'
                            },
                            email: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminUpdateAccountHandle: {
        lexicon: 1,
        id: 'com.atproto.admin.updateAccountHandle',
        defs: {
            main: {
                type: 'procedure',
                description: "Administrative action to update an account's handle.",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did',
                            'handle'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            handle: {
                                type: 'string',
                                format: 'handle'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminUpdateAccountPassword: {
        lexicon: 1,
        id: 'com.atproto.admin.updateAccountPassword',
        defs: {
            main: {
                type: 'procedure',
                description: 'Update the password for a user account as an administrator.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did',
                            'password'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            password: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminUpdateSubjectStatus: {
        lexicon: 1,
        id: 'com.atproto.admin.updateSubjectStatus',
        defs: {
            main: {
                type: 'procedure',
                description: 'Update the service-specific admin status of a subject (account, record, or blob).',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'subject'
                        ],
                        properties: {
                            subject: {
                                type: 'union',
                                refs: [
                                    'lex:com.atproto.admin.defs#repoRef',
                                    'lex:com.atproto.repo.strongRef',
                                    'lex:com.atproto.admin.defs#repoBlobRef'
                                ]
                            },
                            takedown: {
                                type: 'ref',
                                ref: 'lex:com.atproto.admin.defs#statusAttr'
                            },
                            deactivated: {
                                type: 'ref',
                                ref: 'lex:com.atproto.admin.defs#statusAttr'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'subject'
                        ],
                        properties: {
                            subject: {
                                type: 'union',
                                refs: [
                                    'lex:com.atproto.admin.defs#repoRef',
                                    'lex:com.atproto.repo.strongRef',
                                    'lex:com.atproto.admin.defs#repoBlobRef'
                                ]
                            },
                            takedown: {
                                type: 'ref',
                                ref: 'lex:com.atproto.admin.defs#statusAttr'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoIdentityGetRecommendedDidCredentials: {
        lexicon: 1,
        id: 'com.atproto.identity.getRecommendedDidCredentials',
        defs: {
            main: {
                type: 'query',
                description: 'Describe the credentials that should be included in the DID doc of an account that is migrating to this service.',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {
                            rotationKeys: {
                                description: 'Recommended rotation keys for PLC dids. Should be undefined (or ignored) for did:webs.',
                                type: 'array',
                                items: {
                                    type: 'string'
                                }
                            },
                            alsoKnownAs: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                }
                            },
                            verificationMethods: {
                                type: 'unknown'
                            },
                            services: {
                                type: 'unknown'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoIdentityRequestPlcOperationSignature: {
        lexicon: 1,
        id: 'com.atproto.identity.requestPlcOperationSignature',
        defs: {
            main: {
                type: 'procedure',
                description: 'Request an email with a code to in order to request a signed PLC operation. Requires Auth.'
            }
        }
    },
    ComAtprotoIdentityResolveHandle: {
        lexicon: 1,
        id: 'com.atproto.identity.resolveHandle',
        defs: {
            main: {
                type: 'query',
                description: 'Resolves a handle (domain name) to a DID.',
                parameters: {
                    type: 'params',
                    required: [
                        'handle'
                    ],
                    properties: {
                        handle: {
                            type: 'string',
                            format: 'handle',
                            description: 'The handle to resolve.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoIdentitySignPlcOperation: {
        lexicon: 1,
        id: 'com.atproto.identity.signPlcOperation',
        defs: {
            main: {
                type: 'procedure',
                description: "Signs a PLC operation to update some value(s) in the requesting DID's document.",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {
                            token: {
                                description: 'A token received through com.atproto.identity.requestPlcOperationSignature',
                                type: 'string'
                            },
                            rotationKeys: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                }
                            },
                            alsoKnownAs: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                }
                            },
                            verificationMethods: {
                                type: 'unknown'
                            },
                            services: {
                                type: 'unknown'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'operation'
                        ],
                        properties: {
                            operation: {
                                type: 'unknown',
                                description: 'A signed DID PLC operation.'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoIdentitySubmitPlcOperation: {
        lexicon: 1,
        id: 'com.atproto.identity.submitPlcOperation',
        defs: {
            main: {
                type: 'procedure',
                description: "Validates a PLC operation to ensure that it doesn't violate a service's constraints or get the identity into a bad state, then submits it to the PLC registry",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'operation'
                        ],
                        properties: {
                            operation: {
                                type: 'unknown'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoIdentityUpdateHandle: {
        lexicon: 1,
        id: 'com.atproto.identity.updateHandle',
        defs: {
            main: {
                type: 'procedure',
                description: "Updates the current account's handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'handle'
                        ],
                        properties: {
                            handle: {
                                type: 'string',
                                format: 'handle',
                                description: 'The new handle.'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoLabelDefs: {
        lexicon: 1,
        id: 'com.atproto.label.defs',
        defs: {
            label: {
                type: 'object',
                description: 'Metadata tag on an atproto resource (eg, repo or record).',
                required: [
                    'src',
                    'uri',
                    'val',
                    'cts'
                ],
                properties: {
                    ver: {
                        type: 'integer',
                        description: 'The AT Protocol version of the label object.'
                    },
                    src: {
                        type: 'string',
                        format: 'did',
                        description: 'DID of the actor who created this label.'
                    },
                    uri: {
                        type: 'string',
                        format: 'uri',
                        description: 'AT URI of the record, repository (account), or other resource that this label applies to.'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid',
                        description: "Optionally, CID specifying the specific version of 'uri' resource this label applies to."
                    },
                    val: {
                        type: 'string',
                        maxLength: 128,
                        description: 'The short string name of the value or type of this label.'
                    },
                    neg: {
                        type: 'boolean',
                        description: 'If true, this is a negation label, overwriting a previous label.'
                    },
                    cts: {
                        type: 'string',
                        format: 'datetime',
                        description: 'Timestamp when this label was created.'
                    },
                    exp: {
                        type: 'string',
                        format: 'datetime',
                        description: 'Timestamp at which this label expires (no longer applies).'
                    },
                    sig: {
                        type: 'bytes',
                        description: 'Signature of dag-cbor encoded label.'
                    }
                }
            },
            selfLabels: {
                type: 'object',
                description: 'Metadata tags on an atproto record, published by the author within the record.',
                required: [
                    'values'
                ],
                properties: {
                    values: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#selfLabel'
                        },
                        maxLength: 10
                    }
                }
            },
            selfLabel: {
                type: 'object',
                description: 'Metadata tag on an atproto record, published by the author within the record. Note that schemas should use #selfLabels, not #selfLabel.',
                required: [
                    'val'
                ],
                properties: {
                    val: {
                        type: 'string',
                        maxLength: 128,
                        description: 'The short string name of the value or type of this label.'
                    }
                }
            },
            labelValueDefinition: {
                type: 'object',
                description: 'Declares a label value and its expected interpretations and behaviors.',
                required: [
                    'identifier',
                    'severity',
                    'blurs',
                    'locales'
                ],
                properties: {
                    identifier: {
                        type: 'string',
                        description: "The value of the label being defined. Must only include lowercase ascii and the '-' character ([a-z-]+).",
                        maxLength: 100,
                        maxGraphemes: 100
                    },
                    severity: {
                        type: 'string',
                        description: "How should a client visually convey this label? 'inform' means neutral and informational; 'alert' means negative and warning; 'none' means show nothing.",
                        knownValues: [
                            'inform',
                            'alert',
                            'none'
                        ]
                    },
                    blurs: {
                        type: 'string',
                        description: "What should this label hide in the UI, if applied? 'content' hides all of the target; 'media' hides the images/video/audio; 'none' hides nothing.",
                        knownValues: [
                            'content',
                            'media',
                            'none'
                        ]
                    },
                    defaultSetting: {
                        type: 'string',
                        description: 'The default setting for this label.',
                        knownValues: [
                            'ignore',
                            'warn',
                            'hide'
                        ],
                        default: 'warn'
                    },
                    adultOnly: {
                        type: 'boolean',
                        description: 'Does the user need to have adult content enabled in order to configure this label?'
                    },
                    locales: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#labelValueDefinitionStrings'
                        }
                    }
                }
            },
            labelValueDefinitionStrings: {
                type: 'object',
                description: 'Strings which describe the label in the UI, localized into a specific language.',
                required: [
                    'lang',
                    'name',
                    'description'
                ],
                properties: {
                    lang: {
                        type: 'string',
                        description: 'The code of the language these strings are written in.',
                        format: 'language'
                    },
                    name: {
                        type: 'string',
                        description: 'A short human-readable name for the label.',
                        maxGraphemes: 64,
                        maxLength: 640
                    },
                    description: {
                        type: 'string',
                        description: 'A longer description of what the label means and why it might be applied.',
                        maxGraphemes: 10000,
                        maxLength: 100000
                    }
                }
            },
            labelValue: {
                type: 'string',
                knownValues: [
                    '!hide',
                    '!no-promote',
                    '!warn',
                    '!no-unauthenticated',
                    'dmca-violation',
                    'doxxing',
                    'porn',
                    'sexual',
                    'nudity',
                    'nsfl',
                    'gore'
                ]
            }
        }
    },
    ComAtprotoLabelQueryLabels: {
        lexicon: 1,
        id: 'com.atproto.label.queryLabels',
        defs: {
            main: {
                type: 'query',
                description: 'Find labels relevant to the provided AT-URI patterns. Public endpoint for moderation services, though may return different or additional results with auth.',
                parameters: {
                    type: 'params',
                    required: [
                        'uriPatterns'
                    ],
                    properties: {
                        uriPatterns: {
                            type: 'array',
                            items: {
                                type: 'string'
                            },
                            description: "List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI."
                        },
                        sources: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'did'
                            },
                            description: 'Optional list of label sources (DIDs) to filter on.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 250,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'labels'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            labels: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.label.defs#label'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoLabelSubscribeLabels: {
        lexicon: 1,
        id: 'com.atproto.label.subscribeLabels',
        defs: {
            main: {
                type: 'subscription',
                description: 'Subscribe to stream of labels (and negations). Public endpoint implemented by mod services. Uses same sequencing scheme as repo event stream.',
                parameters: {
                    type: 'params',
                    properties: {
                        cursor: {
                            type: 'integer',
                            description: 'The last known event seq number to backfill from.'
                        }
                    }
                },
                message: {
                    schema: {
                        type: 'union',
                        refs: [
                            'lex:com.atproto.label.subscribeLabels#labels',
                            'lex:com.atproto.label.subscribeLabels#info'
                        ]
                    }
                },
                errors: [
                    {
                        name: 'FutureCursor'
                    }
                ]
            },
            labels: {
                type: 'object',
                required: [
                    'seq',
                    'labels'
                ],
                properties: {
                    seq: {
                        type: 'integer'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    }
                }
            },
            info: {
                type: 'object',
                required: [
                    'name'
                ],
                properties: {
                    name: {
                        type: 'string',
                        knownValues: [
                            'OutdatedCursor'
                        ]
                    },
                    message: {
                        type: 'string'
                    }
                }
            }
        }
    },
    ComAtprotoLexiconSchema: {
        lexicon: 1,
        id: 'com.atproto.lexicon.schema',
        defs: {
            main: {
                type: 'record',
                description: "Representation of Lexicon schemas themselves, when published as atproto records. Note that the schema language is not defined in Lexicon; this meta schema currently only includes a single version field ('lexicon'). See the atproto specifications for description of the other expected top-level fields ('id', 'defs', etc).",
                key: 'nsid',
                record: {
                    type: 'object',
                    required: [
                        'lexicon'
                    ],
                    properties: {
                        lexicon: {
                            type: 'integer',
                            description: "Indicates the 'version' of the Lexicon language. Must be '1' for the current atproto/Lexicon schema system."
                        }
                    }
                }
            }
        }
    },
    ComAtprotoModerationCreateReport: {
        lexicon: 1,
        id: 'com.atproto.moderation.createReport',
        defs: {
            main: {
                type: 'procedure',
                description: 'Submit a moderation report regarding an atproto account or record. Implemented by moderation services (with PDS proxying), and requires auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'reasonType',
                            'subject'
                        ],
                        properties: {
                            reasonType: {
                                type: 'ref',
                                description: 'Indicates the broad category of violation the report is for.',
                                ref: 'lex:com.atproto.moderation.defs#reasonType'
                            },
                            reason: {
                                type: 'string',
                                maxGraphemes: 2000,
                                maxLength: 20000,
                                description: 'Additional context about the content and violation.'
                            },
                            subject: {
                                type: 'union',
                                refs: [
                                    'lex:com.atproto.admin.defs#repoRef',
                                    'lex:com.atproto.repo.strongRef'
                                ]
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'id',
                            'reasonType',
                            'subject',
                            'reportedBy',
                            'createdAt'
                        ],
                        properties: {
                            id: {
                                type: 'integer'
                            },
                            reasonType: {
                                type: 'ref',
                                ref: 'lex:com.atproto.moderation.defs#reasonType'
                            },
                            reason: {
                                type: 'string',
                                maxGraphemes: 2000,
                                maxLength: 20000
                            },
                            subject: {
                                type: 'union',
                                refs: [
                                    'lex:com.atproto.admin.defs#repoRef',
                                    'lex:com.atproto.repo.strongRef'
                                ]
                            },
                            reportedBy: {
                                type: 'string',
                                format: 'did'
                            },
                            createdAt: {
                                type: 'string',
                                format: 'datetime'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoModerationDefs: {
        lexicon: 1,
        id: 'com.atproto.moderation.defs',
        defs: {
            reasonType: {
                type: 'string',
                knownValues: [
                    'com.atproto.moderation.defs#reasonSpam',
                    'com.atproto.moderation.defs#reasonViolation',
                    'com.atproto.moderation.defs#reasonMisleading',
                    'com.atproto.moderation.defs#reasonSexual',
                    'com.atproto.moderation.defs#reasonRude',
                    'com.atproto.moderation.defs#reasonOther',
                    'com.atproto.moderation.defs#reasonAppeal'
                ]
            },
            reasonSpam: {
                type: 'token',
                description: 'Spam: frequent unwanted promotion, replies, mentions'
            },
            reasonViolation: {
                type: 'token',
                description: 'Direct violation of server rules, laws, terms of service'
            },
            reasonMisleading: {
                type: 'token',
                description: 'Misleading identity, affiliation, or content'
            },
            reasonSexual: {
                type: 'token',
                description: 'Unwanted or mislabeled sexual content'
            },
            reasonRude: {
                type: 'token',
                description: 'Rude, harassing, explicit, or otherwise unwelcoming behavior'
            },
            reasonOther: {
                type: 'token',
                description: 'Other: reports not falling under another report category'
            },
            reasonAppeal: {
                type: 'token',
                description: 'Appeal: appeal a previously taken moderation action'
            }
        }
    },
    ComAtprotoRepoApplyWrites: {
        lexicon: 1,
        id: 'com.atproto.repo.applyWrites',
        defs: {
            main: {
                type: 'procedure',
                description: 'Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'repo',
                            'writes'
                        ],
                        properties: {
                            repo: {
                                type: 'string',
                                format: 'at-identifier',
                                description: 'The handle or DID of the repo (aka, current account).'
                            },
                            validate: {
                                type: 'boolean',
                                description: "Can be set to 'false' to skip Lexicon schema validation of record data across all operations, 'true' to require it, or leave unset to validate only for known Lexicons."
                            },
                            writes: {
                                type: 'array',
                                items: {
                                    type: 'union',
                                    refs: [
                                        'lex:com.atproto.repo.applyWrites#create',
                                        'lex:com.atproto.repo.applyWrites#update',
                                        'lex:com.atproto.repo.applyWrites#delete'
                                    ],
                                    closed: true
                                }
                            },
                            swapCommit: {
                                type: 'string',
                                description: 'If provided, the entire operation will fail if the current repo commit CID does not match this value. Used to prevent conflicting repo mutations.',
                                format: 'cid'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [],
                        properties: {
                            commit: {
                                type: 'ref',
                                ref: 'lex:com.atproto.repo.defs#commitMeta'
                            },
                            results: {
                                type: 'array',
                                items: {
                                    type: 'union',
                                    refs: [
                                        'lex:com.atproto.repo.applyWrites#createResult',
                                        'lex:com.atproto.repo.applyWrites#updateResult',
                                        'lex:com.atproto.repo.applyWrites#deleteResult'
                                    ],
                                    closed: true
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'InvalidSwap',
                        description: "Indicates that the 'swapCommit' parameter did not match current commit."
                    }
                ]
            },
            create: {
                type: 'object',
                description: 'Operation which creates a new record.',
                required: [
                    'collection',
                    'value'
                ],
                properties: {
                    collection: {
                        type: 'string',
                        format: 'nsid'
                    },
                    rkey: {
                        type: 'string',
                        maxLength: 512
                    },
                    value: {
                        type: 'unknown'
                    }
                }
            },
            update: {
                type: 'object',
                description: 'Operation which updates an existing record.',
                required: [
                    'collection',
                    'rkey',
                    'value'
                ],
                properties: {
                    collection: {
                        type: 'string',
                        format: 'nsid'
                    },
                    rkey: {
                        type: 'string'
                    },
                    value: {
                        type: 'unknown'
                    }
                }
            },
            delete: {
                type: 'object',
                description: 'Operation which deletes an existing record.',
                required: [
                    'collection',
                    'rkey'
                ],
                properties: {
                    collection: {
                        type: 'string',
                        format: 'nsid'
                    },
                    rkey: {
                        type: 'string'
                    }
                }
            },
            createResult: {
                type: 'object',
                required: [
                    'uri',
                    'cid'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    validationStatus: {
                        type: 'string',
                        knownValues: [
                            'valid',
                            'unknown'
                        ]
                    }
                }
            },
            updateResult: {
                type: 'object',
                required: [
                    'uri',
                    'cid'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    validationStatus: {
                        type: 'string',
                        knownValues: [
                            'valid',
                            'unknown'
                        ]
                    }
                }
            },
            deleteResult: {
                type: 'object',
                required: [],
                properties: {}
            }
        }
    },
    ComAtprotoRepoCreateRecord: {
        lexicon: 1,
        id: 'com.atproto.repo.createRecord',
        defs: {
            main: {
                type: 'procedure',
                description: 'Create a single new repository record. Requires auth, implemented by PDS.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'repo',
                            'collection',
                            'record'
                        ],
                        properties: {
                            repo: {
                                type: 'string',
                                format: 'at-identifier',
                                description: 'The handle or DID of the repo (aka, current account).'
                            },
                            collection: {
                                type: 'string',
                                format: 'nsid',
                                description: 'The NSID of the record collection.'
                            },
                            rkey: {
                                type: 'string',
                                description: 'The Record Key.',
                                maxLength: 512
                            },
                            validate: {
                                type: 'boolean',
                                description: "Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons."
                            },
                            record: {
                                type: 'unknown',
                                description: 'The record itself. Must contain a $type field.'
                            },
                            swapCommit: {
                                type: 'string',
                                format: 'cid',
                                description: 'Compare and swap with the previous commit by CID.'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'uri',
                            'cid'
                        ],
                        properties: {
                            uri: {
                                type: 'string',
                                format: 'at-uri'
                            },
                            cid: {
                                type: 'string',
                                format: 'cid'
                            },
                            commit: {
                                type: 'ref',
                                ref: 'lex:com.atproto.repo.defs#commitMeta'
                            },
                            validationStatus: {
                                type: 'string',
                                knownValues: [
                                    'valid',
                                    'unknown'
                                ]
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'InvalidSwap',
                        description: "Indicates that 'swapCommit' didn't match current repo commit."
                    }
                ]
            }
        }
    },
    ComAtprotoRepoDefs: {
        lexicon: 1,
        id: 'com.atproto.repo.defs',
        defs: {
            commitMeta: {
                type: 'object',
                required: [
                    'cid',
                    'rev'
                ],
                properties: {
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    rev: {
                        type: 'string'
                    }
                }
            }
        }
    },
    ComAtprotoRepoDeleteRecord: {
        lexicon: 1,
        id: 'com.atproto.repo.deleteRecord',
        defs: {
            main: {
                type: 'procedure',
                description: "Delete a repository record, or ensure it doesn't exist. Requires auth, implemented by PDS.",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'repo',
                            'collection',
                            'rkey'
                        ],
                        properties: {
                            repo: {
                                type: 'string',
                                format: 'at-identifier',
                                description: 'The handle or DID of the repo (aka, current account).'
                            },
                            collection: {
                                type: 'string',
                                format: 'nsid',
                                description: 'The NSID of the record collection.'
                            },
                            rkey: {
                                type: 'string',
                                description: 'The Record Key.'
                            },
                            swapRecord: {
                                type: 'string',
                                format: 'cid',
                                description: 'Compare and swap with the previous record by CID.'
                            },
                            swapCommit: {
                                type: 'string',
                                format: 'cid',
                                description: 'Compare and swap with the previous commit by CID.'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {
                            commit: {
                                type: 'ref',
                                ref: 'lex:com.atproto.repo.defs#commitMeta'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'InvalidSwap'
                    }
                ]
            }
        }
    },
    ComAtprotoRepoDescribeRepo: {
        lexicon: 1,
        id: 'com.atproto.repo.describeRepo',
        defs: {
            main: {
                type: 'query',
                description: 'Get information about an account and repository, including the list of collections. Does not require auth.',
                parameters: {
                    type: 'params',
                    required: [
                        'repo'
                    ],
                    properties: {
                        repo: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'The handle or DID of the repo.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'handle',
                            'did',
                            'didDoc',
                            'collections',
                            'handleIsCorrect'
                        ],
                        properties: {
                            handle: {
                                type: 'string',
                                format: 'handle'
                            },
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            didDoc: {
                                type: 'unknown',
                                description: 'The complete DID document for this account.'
                            },
                            collections: {
                                type: 'array',
                                description: 'List of all the collections (NSIDs) for which this repo contains at least one record.',
                                items: {
                                    type: 'string',
                                    format: 'nsid'
                                }
                            },
                            handleIsCorrect: {
                                type: 'boolean',
                                description: 'Indicates if handle is currently valid (resolves bi-directionally)'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoRepoGetRecord: {
        lexicon: 1,
        id: 'com.atproto.repo.getRecord',
        defs: {
            main: {
                type: 'query',
                description: 'Get a single record from a repository. Does not require auth.',
                parameters: {
                    type: 'params',
                    required: [
                        'repo',
                        'collection',
                        'rkey'
                    ],
                    properties: {
                        repo: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'The handle or DID of the repo.'
                        },
                        collection: {
                            type: 'string',
                            format: 'nsid',
                            description: 'The NSID of the record collection.'
                        },
                        rkey: {
                            type: 'string',
                            description: 'The Record Key.'
                        },
                        cid: {
                            type: 'string',
                            format: 'cid',
                            description: 'The CID of the version of the record. If not specified, then return the most recent version.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'uri',
                            'value'
                        ],
                        properties: {
                            uri: {
                                type: 'string',
                                format: 'at-uri'
                            },
                            cid: {
                                type: 'string',
                                format: 'cid'
                            },
                            value: {
                                type: 'unknown'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'RecordNotFound'
                    }
                ]
            }
        }
    },
    ComAtprotoRepoImportRepo: {
        lexicon: 1,
        id: 'com.atproto.repo.importRepo',
        defs: {
            main: {
                type: 'procedure',
                description: 'Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.',
                input: {
                    encoding: 'application/vnd.ipld.car'
                }
            }
        }
    },
    ComAtprotoRepoListMissingBlobs: {
        lexicon: 1,
        id: 'com.atproto.repo.listMissingBlobs',
        defs: {
            main: {
                type: 'query',
                description: 'Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 1000,
                            default: 500
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'blobs'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            blobs: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.repo.listMissingBlobs#recordBlob'
                                }
                            }
                        }
                    }
                }
            },
            recordBlob: {
                type: 'object',
                required: [
                    'cid',
                    'recordUri'
                ],
                properties: {
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    recordUri: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            }
        }
    },
    ComAtprotoRepoListRecords: {
        lexicon: 1,
        id: 'com.atproto.repo.listRecords',
        defs: {
            main: {
                type: 'query',
                description: 'List a range of records in a repository, matching a specific collection. Does not require auth.',
                parameters: {
                    type: 'params',
                    required: [
                        'repo',
                        'collection'
                    ],
                    properties: {
                        repo: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'The handle or DID of the repo.'
                        },
                        collection: {
                            type: 'string',
                            format: 'nsid',
                            description: 'The NSID of the record type.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50,
                            description: 'The number of records to return.'
                        },
                        cursor: {
                            type: 'string'
                        },
                        rkeyStart: {
                            type: 'string',
                            description: 'DEPRECATED: The lowest sort-ordered rkey to start from (exclusive)'
                        },
                        rkeyEnd: {
                            type: 'string',
                            description: 'DEPRECATED: The highest sort-ordered rkey to stop at (exclusive)'
                        },
                        reverse: {
                            type: 'boolean',
                            description: 'Flag to reverse the order of the returned records.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'records'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            records: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.repo.listRecords#record'
                                }
                            }
                        }
                    }
                }
            },
            record: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'value'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    value: {
                        type: 'unknown'
                    }
                }
            }
        }
    },
    ComAtprotoRepoPutRecord: {
        lexicon: 1,
        id: 'com.atproto.repo.putRecord',
        defs: {
            main: {
                type: 'procedure',
                description: 'Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'repo',
                            'collection',
                            'rkey',
                            'record'
                        ],
                        nullable: [
                            'swapRecord'
                        ],
                        properties: {
                            repo: {
                                type: 'string',
                                format: 'at-identifier',
                                description: 'The handle or DID of the repo (aka, current account).'
                            },
                            collection: {
                                type: 'string',
                                format: 'nsid',
                                description: 'The NSID of the record collection.'
                            },
                            rkey: {
                                type: 'string',
                                description: 'The Record Key.',
                                maxLength: 512
                            },
                            validate: {
                                type: 'boolean',
                                description: "Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons."
                            },
                            record: {
                                type: 'unknown',
                                description: 'The record to write.'
                            },
                            swapRecord: {
                                type: 'string',
                                format: 'cid',
                                description: 'Compare and swap with the previous record by CID. WARNING: nullable and optional field; may cause problems with golang implementation'
                            },
                            swapCommit: {
                                type: 'string',
                                format: 'cid',
                                description: 'Compare and swap with the previous commit by CID.'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'uri',
                            'cid'
                        ],
                        properties: {
                            uri: {
                                type: 'string',
                                format: 'at-uri'
                            },
                            cid: {
                                type: 'string',
                                format: 'cid'
                            },
                            commit: {
                                type: 'ref',
                                ref: 'lex:com.atproto.repo.defs#commitMeta'
                            },
                            validationStatus: {
                                type: 'string',
                                knownValues: [
                                    'valid',
                                    'unknown'
                                ]
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'InvalidSwap'
                    }
                ]
            }
        }
    },
    ComAtprotoRepoStrongRef: {
        lexicon: 1,
        id: 'com.atproto.repo.strongRef',
        description: 'A URI with a content-hash fingerprint.',
        defs: {
            main: {
                type: 'object',
                required: [
                    'uri',
                    'cid'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    }
                }
            }
        }
    },
    ComAtprotoRepoUploadBlob: {
        lexicon: 1,
        id: 'com.atproto.repo.uploadBlob',
        defs: {
            main: {
                type: 'procedure',
                description: 'Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.',
                input: {
                    encoding: '*/*'
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'blob'
                        ],
                        properties: {
                            blob: {
                                type: 'blob'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerActivateAccount: {
        lexicon: 1,
        id: 'com.atproto.server.activateAccount',
        defs: {
            main: {
                type: 'procedure',
                description: "Activates a currently deactivated account. Used to finalize account migration after the account's repo is imported and identity is setup."
            }
        }
    },
    ComAtprotoServerCheckAccountStatus: {
        lexicon: 1,
        id: 'com.atproto.server.checkAccountStatus',
        defs: {
            main: {
                type: 'query',
                description: 'Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'activated',
                            'validDid',
                            'repoCommit',
                            'repoRev',
                            'repoBlocks',
                            'indexedRecords',
                            'privateStateValues',
                            'expectedBlobs',
                            'importedBlobs'
                        ],
                        properties: {
                            activated: {
                                type: 'boolean'
                            },
                            validDid: {
                                type: 'boolean'
                            },
                            repoCommit: {
                                type: 'string',
                                format: 'cid'
                            },
                            repoRev: {
                                type: 'string'
                            },
                            repoBlocks: {
                                type: 'integer'
                            },
                            indexedRecords: {
                                type: 'integer'
                            },
                            privateStateValues: {
                                type: 'integer'
                            },
                            expectedBlobs: {
                                type: 'integer'
                            },
                            importedBlobs: {
                                type: 'integer'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerConfirmEmail: {
        lexicon: 1,
        id: 'com.atproto.server.confirmEmail',
        defs: {
            main: {
                type: 'procedure',
                description: 'Confirm an email using a token from com.atproto.server.requestEmailConfirmation.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'email',
                            'token'
                        ],
                        properties: {
                            email: {
                                type: 'string'
                            },
                            token: {
                                type: 'string'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'AccountNotFound'
                    },
                    {
                        name: 'ExpiredToken'
                    },
                    {
                        name: 'InvalidToken'
                    },
                    {
                        name: 'InvalidEmail'
                    }
                ]
            }
        }
    },
    ComAtprotoServerCreateAccount: {
        lexicon: 1,
        id: 'com.atproto.server.createAccount',
        defs: {
            main: {
                type: 'procedure',
                description: 'Create an account. Implemented by PDS.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'handle'
                        ],
                        properties: {
                            email: {
                                type: 'string'
                            },
                            handle: {
                                type: 'string',
                                format: 'handle',
                                description: 'Requested handle for the account.'
                            },
                            did: {
                                type: 'string',
                                format: 'did',
                                description: 'Pre-existing atproto DID, being imported to a new account.'
                            },
                            inviteCode: {
                                type: 'string'
                            },
                            verificationCode: {
                                type: 'string'
                            },
                            verificationPhone: {
                                type: 'string'
                            },
                            password: {
                                type: 'string',
                                description: 'Initial account password. May need to meet instance-specific password strength requirements.'
                            },
                            recoveryKey: {
                                type: 'string',
                                description: 'DID PLC rotation key (aka, recovery key) to be included in PLC creation operation.'
                            },
                            plcOp: {
                                type: 'unknown',
                                description: 'A signed DID PLC operation to be submitted as part of importing an existing account to this instance. NOTE: this optional field may be updated when full account migration is implemented.'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        description: 'Account login session returned on successful account creation.',
                        required: [
                            'accessJwt',
                            'refreshJwt',
                            'handle',
                            'did'
                        ],
                        properties: {
                            accessJwt: {
                                type: 'string'
                            },
                            refreshJwt: {
                                type: 'string'
                            },
                            handle: {
                                type: 'string',
                                format: 'handle'
                            },
                            did: {
                                type: 'string',
                                format: 'did',
                                description: 'The DID of the new account.'
                            },
                            didDoc: {
                                type: 'unknown',
                                description: 'Complete DID document.'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'InvalidHandle'
                    },
                    {
                        name: 'InvalidPassword'
                    },
                    {
                        name: 'InvalidInviteCode'
                    },
                    {
                        name: 'HandleNotAvailable'
                    },
                    {
                        name: 'UnsupportedDomain'
                    },
                    {
                        name: 'UnresolvableDid'
                    },
                    {
                        name: 'IncompatibleDidDoc'
                    }
                ]
            }
        }
    },
    ComAtprotoServerCreateAppPassword: {
        lexicon: 1,
        id: 'com.atproto.server.createAppPassword',
        defs: {
            main: {
                type: 'procedure',
                description: 'Create an App Password.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'name'
                        ],
                        properties: {
                            name: {
                                type: 'string',
                                description: 'A short name for the App Password, to help distinguish them.'
                            },
                            privileged: {
                                type: 'boolean',
                                description: "If an app password has 'privileged' access to possibly sensitive account state. Meant for use with trusted clients."
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:com.atproto.server.createAppPassword#appPassword'
                    }
                },
                errors: [
                    {
                        name: 'AccountTakedown'
                    }
                ]
            },
            appPassword: {
                type: 'object',
                required: [
                    'name',
                    'password',
                    'createdAt'
                ],
                properties: {
                    name: {
                        type: 'string'
                    },
                    password: {
                        type: 'string'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    privileged: {
                        type: 'boolean'
                    }
                }
            }
        }
    },
    ComAtprotoServerCreateInviteCode: {
        lexicon: 1,
        id: 'com.atproto.server.createInviteCode',
        defs: {
            main: {
                type: 'procedure',
                description: 'Create an invite code.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'useCount'
                        ],
                        properties: {
                            useCount: {
                                type: 'integer'
                            },
                            forAccount: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'code'
                        ],
                        properties: {
                            code: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerCreateInviteCodes: {
        lexicon: 1,
        id: 'com.atproto.server.createInviteCodes',
        defs: {
            main: {
                type: 'procedure',
                description: 'Create invite codes.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'codeCount',
                            'useCount'
                        ],
                        properties: {
                            codeCount: {
                                type: 'integer',
                                default: 1
                            },
                            useCount: {
                                type: 'integer'
                            },
                            forAccounts: {
                                type: 'array',
                                items: {
                                    type: 'string',
                                    format: 'did'
                                }
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'codes'
                        ],
                        properties: {
                            codes: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.server.createInviteCodes#accountCodes'
                                }
                            }
                        }
                    }
                }
            },
            accountCodes: {
                type: 'object',
                required: [
                    'account',
                    'codes'
                ],
                properties: {
                    account: {
                        type: 'string'
                    },
                    codes: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerCreateSession: {
        lexicon: 1,
        id: 'com.atproto.server.createSession',
        defs: {
            main: {
                type: 'procedure',
                description: 'Create an authentication session.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'identifier',
                            'password'
                        ],
                        properties: {
                            identifier: {
                                type: 'string',
                                description: 'Handle or other identifier supported by the server for the authenticating user.'
                            },
                            password: {
                                type: 'string'
                            },
                            authFactorToken: {
                                type: 'string'
                            },
                            allowTakendown: {
                                type: 'boolean',
                                description: 'When true, instead of throwing error for takendown accounts, a valid response with a narrow scoped token will be returned'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'accessJwt',
                            'refreshJwt',
                            'handle',
                            'did'
                        ],
                        properties: {
                            accessJwt: {
                                type: 'string'
                            },
                            refreshJwt: {
                                type: 'string'
                            },
                            handle: {
                                type: 'string',
                                format: 'handle'
                            },
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            didDoc: {
                                type: 'unknown'
                            },
                            email: {
                                type: 'string'
                            },
                            emailConfirmed: {
                                type: 'boolean'
                            },
                            emailAuthFactor: {
                                type: 'boolean'
                            },
                            active: {
                                type: 'boolean'
                            },
                            status: {
                                type: 'string',
                                description: 'If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.',
                                knownValues: [
                                    'takendown',
                                    'suspended',
                                    'deactivated'
                                ]
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'AccountTakedown'
                    },
                    {
                        name: 'AuthFactorTokenRequired'
                    }
                ]
            }
        }
    },
    ComAtprotoServerDeactivateAccount: {
        lexicon: 1,
        id: 'com.atproto.server.deactivateAccount',
        defs: {
            main: {
                type: 'procedure',
                description: 'Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {
                            deleteAfter: {
                                type: 'string',
                                format: 'datetime',
                                description: 'A recommendation to server as to how long they should hold onto the deactivated account before deleting.'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerDefs: {
        lexicon: 1,
        id: 'com.atproto.server.defs',
        defs: {
            inviteCode: {
                type: 'object',
                required: [
                    'code',
                    'available',
                    'disabled',
                    'forAccount',
                    'createdBy',
                    'createdAt',
                    'uses'
                ],
                properties: {
                    code: {
                        type: 'string'
                    },
                    available: {
                        type: 'integer'
                    },
                    disabled: {
                        type: 'boolean'
                    },
                    forAccount: {
                        type: 'string'
                    },
                    createdBy: {
                        type: 'string'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    uses: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.server.defs#inviteCodeUse'
                        }
                    }
                }
            },
            inviteCodeUse: {
                type: 'object',
                required: [
                    'usedBy',
                    'usedAt'
                ],
                properties: {
                    usedBy: {
                        type: 'string',
                        format: 'did'
                    },
                    usedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            }
        }
    },
    ComAtprotoServerDeleteAccount: {
        lexicon: 1,
        id: 'com.atproto.server.deleteAccount',
        defs: {
            main: {
                type: 'procedure',
                description: "Delete an actor's account with a token and password. Can only be called after requesting a deletion token. Requires auth.",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did',
                            'password',
                            'token'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            password: {
                                type: 'string'
                            },
                            token: {
                                type: 'string'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'ExpiredToken'
                    },
                    {
                        name: 'InvalidToken'
                    }
                ]
            }
        }
    },
    ComAtprotoServerDeleteSession: {
        lexicon: 1,
        id: 'com.atproto.server.deleteSession',
        defs: {
            main: {
                type: 'procedure',
                description: 'Delete the current session. Requires auth.'
            }
        }
    },
    ComAtprotoServerDescribeServer: {
        lexicon: 1,
        id: 'com.atproto.server.describeServer',
        defs: {
            main: {
                type: 'query',
                description: "Describes the server's account creation requirements and capabilities. Implemented by PDS.",
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did',
                            'availableUserDomains'
                        ],
                        properties: {
                            inviteCodeRequired: {
                                type: 'boolean',
                                description: 'If true, an invite code must be supplied to create an account on this instance.'
                            },
                            phoneVerificationRequired: {
                                type: 'boolean',
                                description: 'If true, a phone verification token must be supplied to create an account on this instance.'
                            },
                            availableUserDomains: {
                                type: 'array',
                                description: 'List of domain suffixes that can be used in account handles.',
                                items: {
                                    type: 'string'
                                }
                            },
                            links: {
                                type: 'ref',
                                description: 'URLs of service policy documents.',
                                ref: 'lex:com.atproto.server.describeServer#links'
                            },
                            contact: {
                                type: 'ref',
                                description: 'Contact information',
                                ref: 'lex:com.atproto.server.describeServer#contact'
                            },
                            did: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                }
            },
            links: {
                type: 'object',
                properties: {
                    privacyPolicy: {
                        type: 'string',
                        format: 'uri'
                    },
                    termsOfService: {
                        type: 'string',
                        format: 'uri'
                    }
                }
            },
            contact: {
                type: 'object',
                properties: {
                    email: {
                        type: 'string'
                    }
                }
            }
        }
    },
    ComAtprotoServerGetAccountInviteCodes: {
        lexicon: 1,
        id: 'com.atproto.server.getAccountInviteCodes',
        defs: {
            main: {
                type: 'query',
                description: 'Get all invite codes for the current account. Requires auth.',
                parameters: {
                    type: 'params',
                    properties: {
                        includeUsed: {
                            type: 'boolean',
                            default: true
                        },
                        createAvailable: {
                            type: 'boolean',
                            default: true,
                            description: "Controls whether any new 'earned' but not 'created' invites should be created."
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'codes'
                        ],
                        properties: {
                            codes: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.server.defs#inviteCode'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'DuplicateCreate'
                    }
                ]
            }
        }
    },
    ComAtprotoServerGetServiceAuth: {
        lexicon: 1,
        id: 'com.atproto.server.getServiceAuth',
        defs: {
            main: {
                type: 'query',
                description: 'Get a signed token on behalf of the requesting DID for the requested service.',
                parameters: {
                    type: 'params',
                    required: [
                        'aud'
                    ],
                    properties: {
                        aud: {
                            type: 'string',
                            format: 'did',
                            description: 'The DID of the service that the token will be used to authenticate with'
                        },
                        exp: {
                            type: 'integer',
                            description: 'The time in Unix Epoch seconds that the JWT expires. Defaults to 60 seconds in the future. The service may enforce certain time bounds on tokens depending on the requested scope.'
                        },
                        lxm: {
                            type: 'string',
                            format: 'nsid',
                            description: 'Lexicon (XRPC) method to bind the requested token to'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'token'
                        ],
                        properties: {
                            token: {
                                type: 'string'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'BadExpiration',
                        description: 'Indicates that the requested expiration date is not a valid. May be in the past or may be reliant on the requested scopes.'
                    }
                ]
            }
        }
    },
    ComAtprotoServerGetSession: {
        lexicon: 1,
        id: 'com.atproto.server.getSession',
        defs: {
            main: {
                type: 'query',
                description: 'Get information about the current auth session. Requires auth.',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'handle',
                            'did'
                        ],
                        properties: {
                            handle: {
                                type: 'string',
                                format: 'handle'
                            },
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            email: {
                                type: 'string'
                            },
                            emailConfirmed: {
                                type: 'boolean'
                            },
                            emailAuthFactor: {
                                type: 'boolean'
                            },
                            didDoc: {
                                type: 'unknown'
                            },
                            active: {
                                type: 'boolean'
                            },
                            status: {
                                type: 'string',
                                description: 'If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.',
                                knownValues: [
                                    'takendown',
                                    'suspended',
                                    'deactivated'
                                ]
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerListAppPasswords: {
        lexicon: 1,
        id: 'com.atproto.server.listAppPasswords',
        defs: {
            main: {
                type: 'query',
                description: 'List all App Passwords.',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'passwords'
                        ],
                        properties: {
                            passwords: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.server.listAppPasswords#appPassword'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'AccountTakedown'
                    }
                ]
            },
            appPassword: {
                type: 'object',
                required: [
                    'name',
                    'createdAt'
                ],
                properties: {
                    name: {
                        type: 'string'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    privileged: {
                        type: 'boolean'
                    }
                }
            }
        }
    },
    ComAtprotoServerRefreshSession: {
        lexicon: 1,
        id: 'com.atproto.server.refreshSession',
        defs: {
            main: {
                type: 'procedure',
                description: "Refresh an authentication session. Requires auth using the 'refreshJwt' (not the 'accessJwt').",
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'accessJwt',
                            'refreshJwt',
                            'handle',
                            'did'
                        ],
                        properties: {
                            accessJwt: {
                                type: 'string'
                            },
                            refreshJwt: {
                                type: 'string'
                            },
                            handle: {
                                type: 'string',
                                format: 'handle'
                            },
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            didDoc: {
                                type: 'unknown'
                            },
                            active: {
                                type: 'boolean'
                            },
                            status: {
                                type: 'string',
                                description: "Hosting status of the account. If not specified, then assume 'active'.",
                                knownValues: [
                                    'takendown',
                                    'suspended',
                                    'deactivated'
                                ]
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'AccountTakedown'
                    }
                ]
            }
        }
    },
    ComAtprotoServerRequestAccountDelete: {
        lexicon: 1,
        id: 'com.atproto.server.requestAccountDelete',
        defs: {
            main: {
                type: 'procedure',
                description: 'Initiate a user account deletion via email.'
            }
        }
    },
    ComAtprotoServerRequestEmailConfirmation: {
        lexicon: 1,
        id: 'com.atproto.server.requestEmailConfirmation',
        defs: {
            main: {
                type: 'procedure',
                description: 'Request an email with a code to confirm ownership of email.'
            }
        }
    },
    ComAtprotoServerRequestEmailUpdate: {
        lexicon: 1,
        id: 'com.atproto.server.requestEmailUpdate',
        defs: {
            main: {
                type: 'procedure',
                description: 'Request a token in order to update email.',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'tokenRequired'
                        ],
                        properties: {
                            tokenRequired: {
                                type: 'boolean'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerRequestPasswordReset: {
        lexicon: 1,
        id: 'com.atproto.server.requestPasswordReset',
        defs: {
            main: {
                type: 'procedure',
                description: 'Initiate a user account password reset via email.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'email'
                        ],
                        properties: {
                            email: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerReserveSigningKey: {
        lexicon: 1,
        id: 'com.atproto.server.reserveSigningKey',
        defs: {
            main: {
                type: 'procedure',
                description: 'Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did',
                                description: 'The DID to reserve a key for.'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'signingKey'
                        ],
                        properties: {
                            signingKey: {
                                type: 'string',
                                description: 'The public key for the reserved signing key, in did:key serialization.'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerResetPassword: {
        lexicon: 1,
        id: 'com.atproto.server.resetPassword',
        defs: {
            main: {
                type: 'procedure',
                description: 'Reset a user account password using a token.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'token',
                            'password'
                        ],
                        properties: {
                            token: {
                                type: 'string'
                            },
                            password: {
                                type: 'string'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'ExpiredToken'
                    },
                    {
                        name: 'InvalidToken'
                    }
                ]
            }
        }
    },
    ComAtprotoServerRevokeAppPassword: {
        lexicon: 1,
        id: 'com.atproto.server.revokeAppPassword',
        defs: {
            main: {
                type: 'procedure',
                description: 'Revoke an App Password by name.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'name'
                        ],
                        properties: {
                            name: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerUpdateEmail: {
        lexicon: 1,
        id: 'com.atproto.server.updateEmail',
        defs: {
            main: {
                type: 'procedure',
                description: "Update an account's email.",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'email'
                        ],
                        properties: {
                            email: {
                                type: 'string'
                            },
                            emailAuthFactor: {
                                type: 'boolean'
                            },
                            token: {
                                type: 'string',
                                description: "Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed."
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'ExpiredToken'
                    },
                    {
                        name: 'InvalidToken'
                    },
                    {
                        name: 'TokenRequired'
                    }
                ]
            }
        }
    },
    ComAtprotoSyncGetBlob: {
        lexicon: 1,
        id: 'com.atproto.sync.getBlob',
        defs: {
            main: {
                type: 'query',
                description: 'Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.',
                parameters: {
                    type: 'params',
                    required: [
                        'did',
                        'cid'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did',
                            description: 'The DID of the account.'
                        },
                        cid: {
                            type: 'string',
                            format: 'cid',
                            description: 'The CID of the blob to fetch'
                        }
                    }
                },
                output: {
                    encoding: '*/*'
                },
                errors: [
                    {
                        name: 'BlobNotFound'
                    },
                    {
                        name: 'RepoNotFound'
                    },
                    {
                        name: 'RepoTakendown'
                    },
                    {
                        name: 'RepoSuspended'
                    },
                    {
                        name: 'RepoDeactivated'
                    }
                ]
            }
        }
    },
    ComAtprotoSyncGetBlocks: {
        lexicon: 1,
        id: 'com.atproto.sync.getBlocks',
        defs: {
            main: {
                type: 'query',
                description: 'Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.',
                parameters: {
                    type: 'params',
                    required: [
                        'did',
                        'cids'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did',
                            description: 'The DID of the repo.'
                        },
                        cids: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'cid'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/vnd.ipld.car'
                },
                errors: [
                    {
                        name: 'BlockNotFound'
                    },
                    {
                        name: 'RepoNotFound'
                    },
                    {
                        name: 'RepoTakendown'
                    },
                    {
                        name: 'RepoSuspended'
                    },
                    {
                        name: 'RepoDeactivated'
                    }
                ]
            }
        }
    },
    ComAtprotoSyncGetCheckout: {
        lexicon: 1,
        id: 'com.atproto.sync.getCheckout',
        defs: {
            main: {
                type: 'query',
                description: 'DEPRECATED - please use com.atproto.sync.getRepo instead',
                parameters: {
                    type: 'params',
                    required: [
                        'did'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did',
                            description: 'The DID of the repo.'
                        }
                    }
                },
                output: {
                    encoding: 'application/vnd.ipld.car'
                }
            }
        }
    },
    ComAtprotoSyncGetHead: {
        lexicon: 1,
        id: 'com.atproto.sync.getHead',
        defs: {
            main: {
                type: 'query',
                description: 'DEPRECATED - please use com.atproto.sync.getLatestCommit instead',
                parameters: {
                    type: 'params',
                    required: [
                        'did'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did',
                            description: 'The DID of the repo.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'root'
                        ],
                        properties: {
                            root: {
                                type: 'string',
                                format: 'cid'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'HeadNotFound'
                    }
                ]
            }
        }
    },
    ComAtprotoSyncGetLatestCommit: {
        lexicon: 1,
        id: 'com.atproto.sync.getLatestCommit',
        defs: {
            main: {
                type: 'query',
                description: 'Get the current commit CID & revision of the specified repo. Does not require auth.',
                parameters: {
                    type: 'params',
                    required: [
                        'did'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did',
                            description: 'The DID of the repo.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'cid',
                            'rev'
                        ],
                        properties: {
                            cid: {
                                type: 'string',
                                format: 'cid'
                            },
                            rev: {
                                type: 'string'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'RepoNotFound'
                    },
                    {
                        name: 'RepoTakendown'
                    },
                    {
                        name: 'RepoSuspended'
                    },
                    {
                        name: 'RepoDeactivated'
                    }
                ]
            }
        }
    },
    ComAtprotoSyncGetRecord: {
        lexicon: 1,
        id: 'com.atproto.sync.getRecord',
        defs: {
            main: {
                type: 'query',
                description: 'Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.',
                parameters: {
                    type: 'params',
                    required: [
                        'did',
                        'collection',
                        'rkey'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did',
                            description: 'The DID of the repo.'
                        },
                        collection: {
                            type: 'string',
                            format: 'nsid'
                        },
                        rkey: {
                            type: 'string',
                            description: 'Record Key'
                        },
                        commit: {
                            type: 'string',
                            format: 'cid',
                            description: 'DEPRECATED: referenced a repo commit by CID, and retrieved record as of that commit'
                        }
                    }
                },
                output: {
                    encoding: 'application/vnd.ipld.car'
                },
                errors: [
                    {
                        name: 'RecordNotFound'
                    },
                    {
                        name: 'RepoNotFound'
                    },
                    {
                        name: 'RepoTakendown'
                    },
                    {
                        name: 'RepoSuspended'
                    },
                    {
                        name: 'RepoDeactivated'
                    }
                ]
            }
        }
    },
    ComAtprotoSyncGetRepo: {
        lexicon: 1,
        id: 'com.atproto.sync.getRepo',
        defs: {
            main: {
                type: 'query',
                description: "Download a repository export as CAR file. Optionally only a 'diff' since a previous revision. Does not require auth; implemented by PDS.",
                parameters: {
                    type: 'params',
                    required: [
                        'did'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did',
                            description: 'The DID of the repo.'
                        },
                        since: {
                            type: 'string',
                            description: "The revision ('rev') of the repo to create a diff from."
                        }
                    }
                },
                output: {
                    encoding: 'application/vnd.ipld.car'
                },
                errors: [
                    {
                        name: 'RepoNotFound'
                    },
                    {
                        name: 'RepoTakendown'
                    },
                    {
                        name: 'RepoSuspended'
                    },
                    {
                        name: 'RepoDeactivated'
                    }
                ]
            }
        }
    },
    ComAtprotoSyncGetRepoStatus: {
        lexicon: 1,
        id: 'com.atproto.sync.getRepoStatus',
        defs: {
            main: {
                type: 'query',
                description: 'Get the hosting status for a repository, on this server. Expected to be implemented by PDS and Relay.',
                parameters: {
                    type: 'params',
                    required: [
                        'did'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did',
                            description: 'The DID of the repo.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did',
                            'active'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            active: {
                                type: 'boolean'
                            },
                            status: {
                                type: 'string',
                                description: 'If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.',
                                knownValues: [
                                    'takendown',
                                    'suspended',
                                    'deactivated'
                                ]
                            },
                            rev: {
                                type: 'string',
                                description: 'Optional field, the current rev of the repo, if active=true'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'RepoNotFound'
                    }
                ]
            }
        }
    },
    ComAtprotoSyncListBlobs: {
        lexicon: 1,
        id: 'com.atproto.sync.listBlobs',
        defs: {
            main: {
                type: 'query',
                description: 'List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.',
                parameters: {
                    type: 'params',
                    required: [
                        'did'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did',
                            description: 'The DID of the repo.'
                        },
                        since: {
                            type: 'string',
                            description: 'Optional revision of the repo to list blobs since.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 1000,
                            default: 500
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'cids'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            cids: {
                                type: 'array',
                                items: {
                                    type: 'string',
                                    format: 'cid'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'RepoNotFound'
                    },
                    {
                        name: 'RepoTakendown'
                    },
                    {
                        name: 'RepoSuspended'
                    },
                    {
                        name: 'RepoDeactivated'
                    }
                ]
            }
        }
    },
    ComAtprotoSyncListRepos: {
        lexicon: 1,
        id: 'com.atproto.sync.listRepos',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 1000,
                            default: 500
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'repos'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            repos: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.sync.listRepos#repo'
                                }
                            }
                        }
                    }
                }
            },
            repo: {
                type: 'object',
                required: [
                    'did',
                    'head',
                    'rev'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    head: {
                        type: 'string',
                        format: 'cid',
                        description: 'Current repo commit CID'
                    },
                    rev: {
                        type: 'string'
                    },
                    active: {
                        type: 'boolean'
                    },
                    status: {
                        type: 'string',
                        description: 'If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.',
                        knownValues: [
                            'takendown',
                            'suspended',
                            'deactivated'
                        ]
                    }
                }
            }
        }
    },
    ComAtprotoSyncNotifyOfUpdate: {
        lexicon: 1,
        id: 'com.atproto.sync.notifyOfUpdate',
        defs: {
            main: {
                type: 'procedure',
                description: 'Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'hostname'
                        ],
                        properties: {
                            hostname: {
                                type: 'string',
                                description: 'Hostname of the current service (usually a PDS) that is notifying of update.'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoSyncRequestCrawl: {
        lexicon: 1,
        id: 'com.atproto.sync.requestCrawl',
        defs: {
            main: {
                type: 'procedure',
                description: 'Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'hostname'
                        ],
                        properties: {
                            hostname: {
                                type: 'string',
                                description: 'Hostname of the current service (eg, PDS) that is requesting to be crawled.'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoSyncSubscribeRepos: {
        lexicon: 1,
        id: 'com.atproto.sync.subscribeRepos',
        defs: {
            main: {
                type: 'subscription',
                description: 'Repository event stream, aka Firehose endpoint. Outputs repo commits with diff data, and identity update events, for all repositories on the current server. See the atproto specifications for details around stream sequencing, repo versioning, CAR diff format, and more. Public and does not require auth; implemented by PDS and Relay.',
                parameters: {
                    type: 'params',
                    properties: {
                        cursor: {
                            type: 'integer',
                            description: 'The last known event seq number to backfill from.'
                        }
                    }
                },
                message: {
                    schema: {
                        type: 'union',
                        refs: [
                            'lex:com.atproto.sync.subscribeRepos#commit',
                            'lex:com.atproto.sync.subscribeRepos#identity',
                            'lex:com.atproto.sync.subscribeRepos#account',
                            'lex:com.atproto.sync.subscribeRepos#handle',
                            'lex:com.atproto.sync.subscribeRepos#migrate',
                            'lex:com.atproto.sync.subscribeRepos#tombstone',
                            'lex:com.atproto.sync.subscribeRepos#info'
                        ]
                    }
                },
                errors: [
                    {
                        name: 'FutureCursor'
                    },
                    {
                        name: 'ConsumerTooSlow',
                        description: 'If the consumer of the stream can not keep up with events, and a backlog gets too large, the server will drop the connection.'
                    }
                ]
            },
            commit: {
                type: 'object',
                description: 'Represents an update of repository state. Note that empty commits are allowed, which include no repo data changes, but an update to rev and signature.',
                required: [
                    'seq',
                    'rebase',
                    'tooBig',
                    'repo',
                    'commit',
                    'rev',
                    'since',
                    'blocks',
                    'ops',
                    'blobs',
                    'time'
                ],
                nullable: [
                    'prev',
                    'since'
                ],
                properties: {
                    seq: {
                        type: 'integer',
                        description: 'The stream sequence number of this message.'
                    },
                    rebase: {
                        type: 'boolean',
                        description: 'DEPRECATED -- unused'
                    },
                    tooBig: {
                        type: 'boolean',
                        description: 'Indicates that this commit contained too many ops, or data size was too large. Consumers will need to make a separate request to get missing data.'
                    },
                    repo: {
                        type: 'string',
                        format: 'did',
                        description: 'The repo this event comes from.'
                    },
                    commit: {
                        type: 'cid-link',
                        description: 'Repo commit object CID.'
                    },
                    prev: {
                        type: 'cid-link',
                        description: 'DEPRECATED -- unused. WARNING -- nullable and optional; stick with optional to ensure golang interoperability.'
                    },
                    rev: {
                        type: 'string',
                        description: 'The rev of the emitted commit. Note that this information is also in the commit object included in blocks, unless this is a tooBig event.'
                    },
                    since: {
                        type: 'string',
                        description: 'The rev of the last emitted commit from this repo (if any).'
                    },
                    blocks: {
                        type: 'bytes',
                        description: 'CAR file containing relevant blocks, as a diff since the previous repo state.',
                        maxLength: 1000000
                    },
                    ops: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.sync.subscribeRepos#repoOp',
                            description: 'List of repo mutation operations in this commit (eg, records created, updated, or deleted).'
                        },
                        maxLength: 200
                    },
                    blobs: {
                        type: 'array',
                        items: {
                            type: 'cid-link',
                            description: 'List of new blobs (by CID) referenced by records in this commit.'
                        }
                    },
                    time: {
                        type: 'string',
                        format: 'datetime',
                        description: 'Timestamp of when this message was originally broadcast.'
                    }
                }
            },
            identity: {
                type: 'object',
                description: "Represents a change to an account's identity. Could be an updated handle, signing key, or pds hosting endpoint. Serves as a prod to all downstream services to refresh their identity cache.",
                required: [
                    'seq',
                    'did',
                    'time'
                ],
                properties: {
                    seq: {
                        type: 'integer'
                    },
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    time: {
                        type: 'string',
                        format: 'datetime'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle',
                        description: "The current handle for the account, or 'handle.invalid' if validation fails. This field is optional, might have been validated or passed-through from an upstream source. Semantics and behaviors for PDS vs Relay may evolve in the future; see atproto specs for more details."
                    }
                }
            },
            account: {
                type: 'object',
                description: "Represents a change to an account's status on a host (eg, PDS or Relay). The semantics of this event are that the status is at the host which emitted the event, not necessarily that at the currently active PDS. Eg, a Relay takedown would emit a takedown with active=false, even if the PDS is still active.",
                required: [
                    'seq',
                    'did',
                    'time',
                    'active'
                ],
                properties: {
                    seq: {
                        type: 'integer'
                    },
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    time: {
                        type: 'string',
                        format: 'datetime'
                    },
                    active: {
                        type: 'boolean',
                        description: 'Indicates that the account has a repository which can be fetched from the host that emitted this event.'
                    },
                    status: {
                        type: 'string',
                        description: 'If active=false, this optional field indicates a reason for why the account is not active.',
                        knownValues: [
                            'takendown',
                            'suspended',
                            'deleted',
                            'deactivated'
                        ]
                    }
                }
            },
            handle: {
                type: 'object',
                description: 'DEPRECATED -- Use #identity event instead',
                required: [
                    'seq',
                    'did',
                    'handle',
                    'time'
                ],
                properties: {
                    seq: {
                        type: 'integer'
                    },
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle'
                    },
                    time: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            migrate: {
                type: 'object',
                description: 'DEPRECATED -- Use #account event instead',
                required: [
                    'seq',
                    'did',
                    'migrateTo',
                    'time'
                ],
                nullable: [
                    'migrateTo'
                ],
                properties: {
                    seq: {
                        type: 'integer'
                    },
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    migrateTo: {
                        type: 'string'
                    },
                    time: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            tombstone: {
                type: 'object',
                description: 'DEPRECATED -- Use #account event instead',
                required: [
                    'seq',
                    'did',
                    'time'
                ],
                properties: {
                    seq: {
                        type: 'integer'
                    },
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    time: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            info: {
                type: 'object',
                required: [
                    'name'
                ],
                properties: {
                    name: {
                        type: 'string',
                        knownValues: [
                            'OutdatedCursor'
                        ]
                    },
                    message: {
                        type: 'string'
                    }
                }
            },
            repoOp: {
                type: 'object',
                description: 'A repo operation, ie a mutation of a single record.',
                required: [
                    'action',
                    'path',
                    'cid'
                ],
                nullable: [
                    'cid'
                ],
                properties: {
                    action: {
                        type: 'string',
                        knownValues: [
                            'create',
                            'update',
                            'delete'
                        ]
                    },
                    path: {
                        type: 'string'
                    },
                    cid: {
                        type: 'cid-link',
                        description: 'For creates and updates, the new record CID. For deletions, null.'
                    }
                }
            }
        }
    },
    ComAtprotoTempAddReservedHandle: {
        lexicon: 1,
        id: 'com.atproto.temp.addReservedHandle',
        defs: {
            main: {
                type: 'procedure',
                description: 'Add a handle to the set of reserved handles.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'handle'
                        ],
                        properties: {
                            handle: {
                                type: 'string'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {}
                    }
                }
            }
        }
    },
    ComAtprotoTempCheckSignupQueue: {
        lexicon: 1,
        id: 'com.atproto.temp.checkSignupQueue',
        defs: {
            main: {
                type: 'query',
                description: 'Check accounts location in signup queue.',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'activated'
                        ],
                        properties: {
                            activated: {
                                type: 'boolean'
                            },
                            placeInQueue: {
                                type: 'integer'
                            },
                            estimatedTimeMs: {
                                type: 'integer'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoTempFetchLabels: {
        lexicon: 1,
        id: 'com.atproto.temp.fetchLabels',
        defs: {
            main: {
                type: 'query',
                description: 'DEPRECATED: use queryLabels or subscribeLabels instead -- Fetch all labels from a labeler created after a certain date.',
                parameters: {
                    type: 'params',
                    properties: {
                        since: {
                            type: 'integer'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 250,
                            default: 50
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'labels'
                        ],
                        properties: {
                            labels: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.label.defs#label'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoTempRequestPhoneVerification: {
        lexicon: 1,
        id: 'com.atproto.temp.requestPhoneVerification',
        defs: {
            main: {
                type: 'procedure',
                description: 'Request a verification code to be sent to the supplied phone number',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'phoneNumber'
                        ],
                        properties: {
                            phoneNumber: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyActorDefs: {
        lexicon: 1,
        id: 'app.bsky.actor.defs',
        defs: {
            profileViewBasic: {
                type: 'object',
                required: [
                    'did',
                    'handle'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle'
                    },
                    displayName: {
                        type: 'string',
                        maxGraphemes: 64,
                        maxLength: 640
                    },
                    avatar: {
                        type: 'string',
                        format: 'uri'
                    },
                    associated: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileAssociated'
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#viewerState'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            profileView: {
                type: 'object',
                required: [
                    'did',
                    'handle'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle'
                    },
                    displayName: {
                        type: 'string',
                        maxGraphemes: 64,
                        maxLength: 640
                    },
                    description: {
                        type: 'string',
                        maxGraphemes: 256,
                        maxLength: 2560
                    },
                    avatar: {
                        type: 'string',
                        format: 'uri'
                    },
                    associated: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileAssociated'
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#viewerState'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    }
                }
            },
            profileViewDetailed: {
                type: 'object',
                required: [
                    'did',
                    'handle'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle'
                    },
                    displayName: {
                        type: 'string',
                        maxGraphemes: 64,
                        maxLength: 640
                    },
                    description: {
                        type: 'string',
                        maxGraphemes: 256,
                        maxLength: 2560
                    },
                    avatar: {
                        type: 'string',
                        format: 'uri'
                    },
                    banner: {
                        type: 'string',
                        format: 'uri'
                    },
                    followersCount: {
                        type: 'integer'
                    },
                    followsCount: {
                        type: 'integer'
                    },
                    postsCount: {
                        type: 'integer'
                    },
                    associated: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileAssociated'
                    },
                    joinedViaStarterPack: {
                        type: 'ref',
                        ref: 'lex:app.bsky.graph.defs#starterPackViewBasic'
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#viewerState'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    pinnedPost: {
                        type: 'ref',
                        ref: 'lex:com.atproto.repo.strongRef'
                    }
                }
            },
            profileAssociated: {
                type: 'object',
                properties: {
                    lists: {
                        type: 'integer'
                    },
                    feedgens: {
                        type: 'integer'
                    },
                    starterPacks: {
                        type: 'integer'
                    },
                    labeler: {
                        type: 'boolean'
                    },
                    chat: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileAssociatedChat'
                    }
                }
            },
            profileAssociatedChat: {
                type: 'object',
                required: [
                    'allowIncoming'
                ],
                properties: {
                    allowIncoming: {
                        type: 'string',
                        knownValues: [
                            'all',
                            'none',
                            'following'
                        ]
                    }
                }
            },
            viewerState: {
                type: 'object',
                description: "Metadata about the requesting account's relationship with the subject account. Only has meaningful content for authed requests.",
                properties: {
                    muted: {
                        type: 'boolean'
                    },
                    mutedByList: {
                        type: 'ref',
                        ref: 'lex:app.bsky.graph.defs#listViewBasic'
                    },
                    blockedBy: {
                        type: 'boolean'
                    },
                    blocking: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    blockingByList: {
                        type: 'ref',
                        ref: 'lex:app.bsky.graph.defs#listViewBasic'
                    },
                    following: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    followedBy: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    knownFollowers: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#knownFollowers'
                    }
                }
            },
            knownFollowers: {
                type: 'object',
                description: "The subject's followers whom you also follow",
                required: [
                    'count',
                    'followers'
                ],
                properties: {
                    count: {
                        type: 'integer'
                    },
                    followers: {
                        type: 'array',
                        minLength: 0,
                        maxLength: 5,
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.actor.defs#profileViewBasic'
                        }
                    }
                }
            },
            preferences: {
                type: 'array',
                items: {
                    type: 'union',
                    refs: [
                        'lex:app.bsky.actor.defs#adultContentPref',
                        'lex:app.bsky.actor.defs#contentLabelPref',
                        'lex:app.bsky.actor.defs#savedFeedsPref',
                        'lex:app.bsky.actor.defs#savedFeedsPrefV2',
                        'lex:app.bsky.actor.defs#personalDetailsPref',
                        'lex:app.bsky.actor.defs#feedViewPref',
                        'lex:app.bsky.actor.defs#threadViewPref',
                        'lex:app.bsky.actor.defs#interestsPref',
                        'lex:app.bsky.actor.defs#mutedWordsPref',
                        'lex:app.bsky.actor.defs#hiddenPostsPref',
                        'lex:app.bsky.actor.defs#bskyAppStatePref',
                        'lex:app.bsky.actor.defs#labelersPref'
                    ]
                }
            },
            adultContentPref: {
                type: 'object',
                required: [
                    'enabled'
                ],
                properties: {
                    enabled: {
                        type: 'boolean',
                        default: false
                    }
                }
            },
            contentLabelPref: {
                type: 'object',
                required: [
                    'label',
                    'visibility'
                ],
                properties: {
                    labelerDid: {
                        type: 'string',
                        description: 'Which labeler does this preference apply to? If undefined, applies globally.',
                        format: 'did'
                    },
                    label: {
                        type: 'string'
                    },
                    visibility: {
                        type: 'string',
                        knownValues: [
                            'ignore',
                            'show',
                            'warn',
                            'hide'
                        ]
                    }
                }
            },
            savedFeed: {
                type: 'object',
                required: [
                    'id',
                    'type',
                    'value',
                    'pinned'
                ],
                properties: {
                    id: {
                        type: 'string'
                    },
                    type: {
                        type: 'string',
                        knownValues: [
                            'feed',
                            'list',
                            'timeline'
                        ]
                    },
                    value: {
                        type: 'string'
                    },
                    pinned: {
                        type: 'boolean'
                    }
                }
            },
            savedFeedsPrefV2: {
                type: 'object',
                required: [
                    'items'
                ],
                properties: {
                    items: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.actor.defs#savedFeed'
                        }
                    }
                }
            },
            savedFeedsPref: {
                type: 'object',
                required: [
                    'pinned',
                    'saved'
                ],
                properties: {
                    pinned: {
                        type: 'array',
                        items: {
                            type: 'string',
                            format: 'at-uri'
                        }
                    },
                    saved: {
                        type: 'array',
                        items: {
                            type: 'string',
                            format: 'at-uri'
                        }
                    },
                    timelineIndex: {
                        type: 'integer'
                    }
                }
            },
            personalDetailsPref: {
                type: 'object',
                properties: {
                    birthDate: {
                        type: 'string',
                        format: 'datetime',
                        description: 'The birth date of account owner.'
                    }
                }
            },
            feedViewPref: {
                type: 'object',
                required: [
                    'feed'
                ],
                properties: {
                    feed: {
                        type: 'string',
                        description: 'The URI of the feed, or an identifier which describes the feed.'
                    },
                    hideReplies: {
                        type: 'boolean',
                        description: 'Hide replies in the feed.'
                    },
                    hideRepliesByUnfollowed: {
                        type: 'boolean',
                        description: 'Hide replies in the feed if they are not by followed users.',
                        default: true
                    },
                    hideRepliesByLikeCount: {
                        type: 'integer',
                        description: 'Hide replies in the feed if they do not have this number of likes.'
                    },
                    hideReposts: {
                        type: 'boolean',
                        description: 'Hide reposts in the feed.'
                    },
                    hideQuotePosts: {
                        type: 'boolean',
                        description: 'Hide quote posts in the feed.'
                    }
                }
            },
            threadViewPref: {
                type: 'object',
                properties: {
                    sort: {
                        type: 'string',
                        description: 'Sorting mode for threads.',
                        knownValues: [
                            'oldest',
                            'newest',
                            'most-likes',
                            'random',
                            'hotness'
                        ]
                    },
                    prioritizeFollowedUsers: {
                        type: 'boolean',
                        description: 'Show followed users at the top of all replies.'
                    }
                }
            },
            interestsPref: {
                type: 'object',
                required: [
                    'tags'
                ],
                properties: {
                    tags: {
                        type: 'array',
                        maxLength: 100,
                        items: {
                            type: 'string',
                            maxLength: 640,
                            maxGraphemes: 64
                        },
                        description: "A list of tags which describe the account owner's interests gathered during onboarding."
                    }
                }
            },
            mutedWordTarget: {
                type: 'string',
                knownValues: [
                    'content',
                    'tag'
                ],
                maxLength: 640,
                maxGraphemes: 64
            },
            mutedWord: {
                type: 'object',
                description: 'A word that the account owner has muted.',
                required: [
                    'value',
                    'targets'
                ],
                properties: {
                    id: {
                        type: 'string'
                    },
                    value: {
                        type: 'string',
                        description: 'The muted word itself.',
                        maxLength: 10000,
                        maxGraphemes: 1000
                    },
                    targets: {
                        type: 'array',
                        description: 'The intended targets of the muted word.',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.actor.defs#mutedWordTarget'
                        }
                    },
                    actorTarget: {
                        type: 'string',
                        description: 'Groups of users to apply the muted word to. If undefined, applies to all users.',
                        knownValues: [
                            'all',
                            'exclude-following'
                        ],
                        default: 'all'
                    },
                    expiresAt: {
                        type: 'string',
                        format: 'datetime',
                        description: 'The date and time at which the muted word will expire and no longer be applied.'
                    }
                }
            },
            mutedWordsPref: {
                type: 'object',
                required: [
                    'items'
                ],
                properties: {
                    items: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.actor.defs#mutedWord'
                        },
                        description: 'A list of words the account owner has muted.'
                    }
                }
            },
            hiddenPostsPref: {
                type: 'object',
                required: [
                    'items'
                ],
                properties: {
                    items: {
                        type: 'array',
                        items: {
                            type: 'string',
                            format: 'at-uri'
                        },
                        description: 'A list of URIs of posts the account owner has hidden.'
                    }
                }
            },
            labelersPref: {
                type: 'object',
                required: [
                    'labelers'
                ],
                properties: {
                    labelers: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.actor.defs#labelerPrefItem'
                        }
                    }
                }
            },
            labelerPrefItem: {
                type: 'object',
                required: [
                    'did'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    }
                }
            },
            bskyAppStatePref: {
                description: "A grab bag of state that's specific to the bsky.app program. Third-party apps shouldn't use this.",
                type: 'object',
                properties: {
                    activeProgressGuide: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#bskyAppProgressGuide'
                    },
                    queuedNudges: {
                        description: 'An array of tokens which identify nudges (modals, popups, tours, highlight dots) that should be shown to the user.',
                        type: 'array',
                        maxLength: 1000,
                        items: {
                            type: 'string',
                            maxLength: 100
                        }
                    },
                    nuxs: {
                        description: 'Storage for NUXs the user has encountered.',
                        type: 'array',
                        maxLength: 100,
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.actor.defs#nux'
                        }
                    }
                }
            },
            bskyAppProgressGuide: {
                description: 'If set, an active progress guide. Once completed, can be set to undefined. Should have unspecced fields tracking progress.',
                type: 'object',
                required: [
                    'guide'
                ],
                properties: {
                    guide: {
                        type: 'string',
                        maxLength: 100
                    }
                }
            },
            nux: {
                type: 'object',
                description: 'A new user experiences (NUX) storage object',
                required: [
                    'id',
                    'completed'
                ],
                properties: {
                    id: {
                        type: 'string',
                        maxLength: 100
                    },
                    completed: {
                        type: 'boolean',
                        default: false
                    },
                    data: {
                        description: 'Arbitrary data for the NUX. The structure is defined by the NUX itself. Limited to 300 characters.',
                        type: 'string',
                        maxLength: 3000,
                        maxGraphemes: 300
                    },
                    expiresAt: {
                        type: 'string',
                        format: 'datetime',
                        description: 'The date and time at which the NUX will expire and should be considered completed.'
                    }
                }
            }
        }
    },
    AppBskyActorGetPreferences: {
        lexicon: 1,
        id: 'app.bsky.actor.getPreferences',
        defs: {
            main: {
                type: 'query',
                description: 'Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.',
                parameters: {
                    type: 'params',
                    properties: {}
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'preferences'
                        ],
                        properties: {
                            preferences: {
                                type: 'ref',
                                ref: 'lex:app.bsky.actor.defs#preferences'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyActorGetProfile: {
        lexicon: 1,
        id: 'app.bsky.actor.getProfile',
        defs: {
            main: {
                type: 'query',
                description: 'Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.',
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'Handle or DID of account to fetch profile of.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileViewDetailed'
                    }
                }
            }
        }
    },
    AppBskyActorGetProfiles: {
        lexicon: 1,
        id: 'app.bsky.actor.getProfiles',
        defs: {
            main: {
                type: 'query',
                description: 'Get detailed profile views of multiple actors.',
                parameters: {
                    type: 'params',
                    required: [
                        'actors'
                    ],
                    properties: {
                        actors: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'at-identifier'
                            },
                            maxLength: 25
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'profiles'
                        ],
                        properties: {
                            profiles: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileViewDetailed'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyActorGetSuggestions: {
        lexicon: 1,
        id: 'app.bsky.actor.getSuggestions',
        defs: {
            main: {
                type: 'query',
                description: 'Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'actors'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            actors: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileView'
                                }
                            },
                            recId: {
                                type: 'integer',
                                description: 'Snowflake for this recommendation, use when submitting recommendation events.'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyActorProfile: {
        lexicon: 1,
        id: 'app.bsky.actor.profile',
        defs: {
            main: {
                type: 'record',
                description: 'A declaration of a Bluesky account profile.',
                key: 'literal:self',
                record: {
                    type: 'object',
                    properties: {
                        displayName: {
                            type: 'string',
                            maxGraphemes: 64,
                            maxLength: 640
                        },
                        description: {
                            type: 'string',
                            description: 'Free-form profile description text.',
                            maxGraphemes: 256,
                            maxLength: 2560
                        },
                        avatar: {
                            type: 'blob',
                            description: "Small image to be displayed next to posts from account. AKA, 'profile picture'",
                            accept: [
                                'image/png',
                                'image/jpeg'
                            ],
                            maxSize: 1000000
                        },
                        banner: {
                            type: 'blob',
                            description: 'Larger horizontal image to display behind profile view.',
                            accept: [
                                'image/png',
                                'image/jpeg'
                            ],
                            maxSize: 1000000
                        },
                        labels: {
                            type: 'union',
                            description: 'Self-label values, specific to the Bluesky application, on the overall account.',
                            refs: [
                                'lex:com.atproto.label.defs#selfLabels'
                            ]
                        },
                        joinedViaStarterPack: {
                            type: 'ref',
                            ref: 'lex:com.atproto.repo.strongRef'
                        },
                        pinnedPost: {
                            type: 'ref',
                            ref: 'lex:com.atproto.repo.strongRef'
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            }
        }
    },
    AppBskyActorPutPreferences: {
        lexicon: 1,
        id: 'app.bsky.actor.putPreferences',
        defs: {
            main: {
                type: 'procedure',
                description: 'Set the private preferences attached to the account.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'preferences'
                        ],
                        properties: {
                            preferences: {
                                type: 'ref',
                                ref: 'lex:app.bsky.actor.defs#preferences'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyActorSearchActors: {
        lexicon: 1,
        id: 'app.bsky.actor.searchActors',
        defs: {
            main: {
                type: 'query',
                description: 'Find actors (profiles) matching search criteria. Does not require auth.',
                parameters: {
                    type: 'params',
                    properties: {
                        term: {
                            type: 'string',
                            description: "DEPRECATED: use 'q' instead."
                        },
                        q: {
                            type: 'string',
                            description: 'Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 25
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'actors'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            actors: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyActorSearchActorsTypeahead: {
        lexicon: 1,
        id: 'app.bsky.actor.searchActorsTypeahead',
        defs: {
            main: {
                type: 'query',
                description: 'Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.',
                parameters: {
                    type: 'params',
                    properties: {
                        term: {
                            type: 'string',
                            description: "DEPRECATED: use 'q' instead."
                        },
                        q: {
                            type: 'string',
                            description: 'Search query prefix; not a full query string.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 10
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'actors'
                        ],
                        properties: {
                            actors: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileViewBasic'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyEmbedDefs: {
        lexicon: 1,
        id: 'app.bsky.embed.defs',
        defs: {
            aspectRatio: {
                type: 'object',
                description: 'width:height represents an aspect ratio. It may be approximate, and may not correspond to absolute dimensions in any given unit.',
                required: [
                    'width',
                    'height'
                ],
                properties: {
                    width: {
                        type: 'integer',
                        minimum: 1
                    },
                    height: {
                        type: 'integer',
                        minimum: 1
                    }
                }
            }
        }
    },
    AppBskyEmbedExternal: {
        lexicon: 1,
        id: 'app.bsky.embed.external',
        defs: {
            main: {
                type: 'object',
                description: "A representation of some externally linked content (eg, a URL and 'card'), embedded in a Bluesky record (eg, a post).",
                required: [
                    'external'
                ],
                properties: {
                    external: {
                        type: 'ref',
                        ref: 'lex:app.bsky.embed.external#external'
                    }
                }
            },
            external: {
                type: 'object',
                required: [
                    'uri',
                    'title',
                    'description'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'uri'
                    },
                    title: {
                        type: 'string'
                    },
                    description: {
                        type: 'string'
                    },
                    thumb: {
                        type: 'blob',
                        accept: [
                            'image/*'
                        ],
                        maxSize: 1000000
                    }
                }
            },
            view: {
                type: 'object',
                required: [
                    'external'
                ],
                properties: {
                    external: {
                        type: 'ref',
                        ref: 'lex:app.bsky.embed.external#viewExternal'
                    }
                }
            },
            viewExternal: {
                type: 'object',
                required: [
                    'uri',
                    'title',
                    'description'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'uri'
                    },
                    title: {
                        type: 'string'
                    },
                    description: {
                        type: 'string'
                    },
                    thumb: {
                        type: 'string',
                        format: 'uri'
                    }
                }
            }
        }
    },
    AppBskyEmbedImages: {
        lexicon: 1,
        id: 'app.bsky.embed.images',
        description: 'A set of images embedded in a Bluesky record (eg, a post).',
        defs: {
            main: {
                type: 'object',
                required: [
                    'images'
                ],
                properties: {
                    images: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.embed.images#image'
                        },
                        maxLength: 4
                    }
                }
            },
            image: {
                type: 'object',
                required: [
                    'image',
                    'alt'
                ],
                properties: {
                    image: {
                        type: 'blob',
                        accept: [
                            'image/*'
                        ],
                        maxSize: 1000000
                    },
                    alt: {
                        type: 'string',
                        description: 'Alt text description of the image, for accessibility.'
                    },
                    aspectRatio: {
                        type: 'ref',
                        ref: 'lex:app.bsky.embed.defs#aspectRatio'
                    }
                }
            },
            view: {
                type: 'object',
                required: [
                    'images'
                ],
                properties: {
                    images: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.embed.images#viewImage'
                        },
                        maxLength: 4
                    }
                }
            },
            viewImage: {
                type: 'object',
                required: [
                    'thumb',
                    'fullsize',
                    'alt'
                ],
                properties: {
                    thumb: {
                        type: 'string',
                        format: 'uri',
                        description: 'Fully-qualified URL where a thumbnail of the image can be fetched. For example, CDN location provided by the App View.'
                    },
                    fullsize: {
                        type: 'string',
                        format: 'uri',
                        description: 'Fully-qualified URL where a large version of the image can be fetched. May or may not be the exact original blob. For example, CDN location provided by the App View.'
                    },
                    alt: {
                        type: 'string',
                        description: 'Alt text description of the image, for accessibility.'
                    },
                    aspectRatio: {
                        type: 'ref',
                        ref: 'lex:app.bsky.embed.defs#aspectRatio'
                    }
                }
            }
        }
    },
    AppBskyEmbedRecord: {
        lexicon: 1,
        id: 'app.bsky.embed.record',
        description: 'A representation of a record embedded in a Bluesky record (eg, a post). For example, a quote-post, or sharing a feed generator record.',
        defs: {
            main: {
                type: 'object',
                required: [
                    'record'
                ],
                properties: {
                    record: {
                        type: 'ref',
                        ref: 'lex:com.atproto.repo.strongRef'
                    }
                }
            },
            view: {
                type: 'object',
                required: [
                    'record'
                ],
                properties: {
                    record: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.embed.record#viewRecord',
                            'lex:app.bsky.embed.record#viewNotFound',
                            'lex:app.bsky.embed.record#viewBlocked',
                            'lex:app.bsky.embed.record#viewDetached',
                            'lex:app.bsky.feed.defs#generatorView',
                            'lex:app.bsky.graph.defs#listView',
                            'lex:app.bsky.labeler.defs#labelerView',
                            'lex:app.bsky.graph.defs#starterPackViewBasic'
                        ]
                    }
                }
            },
            viewRecord: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'author',
                    'value',
                    'indexedAt'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    author: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileViewBasic'
                    },
                    value: {
                        type: 'unknown',
                        description: 'The record data itself.'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    replyCount: {
                        type: 'integer'
                    },
                    repostCount: {
                        type: 'integer'
                    },
                    likeCount: {
                        type: 'integer'
                    },
                    quoteCount: {
                        type: 'integer'
                    },
                    embeds: {
                        type: 'array',
                        items: {
                            type: 'union',
                            refs: [
                                'lex:app.bsky.embed.images#view',
                                'lex:app.bsky.embed.video#view',
                                'lex:app.bsky.embed.external#view',
                                'lex:app.bsky.embed.record#view',
                                'lex:app.bsky.embed.recordWithMedia#view'
                            ]
                        }
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            viewNotFound: {
                type: 'object',
                required: [
                    'uri',
                    'notFound'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    notFound: {
                        type: 'boolean',
                        const: true
                    }
                }
            },
            viewBlocked: {
                type: 'object',
                required: [
                    'uri',
                    'blocked',
                    'author'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    blocked: {
                        type: 'boolean',
                        const: true
                    },
                    author: {
                        type: 'ref',
                        ref: 'lex:app.bsky.feed.defs#blockedAuthor'
                    }
                }
            },
            viewDetached: {
                type: 'object',
                required: [
                    'uri',
                    'detached'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    detached: {
                        type: 'boolean',
                        const: true
                    }
                }
            }
        }
    },
    AppBskyEmbedRecordWithMedia: {
        lexicon: 1,
        id: 'app.bsky.embed.recordWithMedia',
        description: 'A representation of a record embedded in a Bluesky record (eg, a post), alongside other compatible embeds. For example, a quote post and image, or a quote post and external URL card.',
        defs: {
            main: {
                type: 'object',
                required: [
                    'record',
                    'media'
                ],
                properties: {
                    record: {
                        type: 'ref',
                        ref: 'lex:app.bsky.embed.record'
                    },
                    media: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.embed.images',
                            'lex:app.bsky.embed.video',
                            'lex:app.bsky.embed.external'
                        ]
                    }
                }
            },
            view: {
                type: 'object',
                required: [
                    'record',
                    'media'
                ],
                properties: {
                    record: {
                        type: 'ref',
                        ref: 'lex:app.bsky.embed.record#view'
                    },
                    media: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.embed.images#view',
                            'lex:app.bsky.embed.video#view',
                            'lex:app.bsky.embed.external#view'
                        ]
                    }
                }
            }
        }
    },
    AppBskyEmbedVideo: {
        lexicon: 1,
        id: 'app.bsky.embed.video',
        description: 'A video embedded in a Bluesky record (eg, a post).',
        defs: {
            main: {
                type: 'object',
                required: [
                    'video'
                ],
                properties: {
                    video: {
                        type: 'blob',
                        accept: [
                            'video/mp4'
                        ],
                        maxSize: 50000000
                    },
                    captions: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.embed.video#caption'
                        },
                        maxLength: 20
                    },
                    alt: {
                        type: 'string',
                        description: 'Alt text description of the video, for accessibility.',
                        maxGraphemes: 1000,
                        maxLength: 10000
                    },
                    aspectRatio: {
                        type: 'ref',
                        ref: 'lex:app.bsky.embed.defs#aspectRatio'
                    }
                }
            },
            caption: {
                type: 'object',
                required: [
                    'lang',
                    'file'
                ],
                properties: {
                    lang: {
                        type: 'string',
                        format: 'language'
                    },
                    file: {
                        type: 'blob',
                        accept: [
                            'text/vtt'
                        ],
                        maxSize: 20000
                    }
                }
            },
            view: {
                type: 'object',
                required: [
                    'cid',
                    'playlist'
                ],
                properties: {
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    playlist: {
                        type: 'string',
                        format: 'uri'
                    },
                    thumbnail: {
                        type: 'string',
                        format: 'uri'
                    },
                    alt: {
                        type: 'string',
                        maxGraphemes: 1000,
                        maxLength: 10000
                    },
                    aspectRatio: {
                        type: 'ref',
                        ref: 'lex:app.bsky.embed.defs#aspectRatio'
                    }
                }
            }
        }
    },
    AppBskyFeedDefs: {
        lexicon: 1,
        id: 'app.bsky.feed.defs',
        defs: {
            postView: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'author',
                    'record',
                    'indexedAt'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    author: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileViewBasic'
                    },
                    record: {
                        type: 'unknown'
                    },
                    embed: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.embed.images#view',
                            'lex:app.bsky.embed.video#view',
                            'lex:app.bsky.embed.external#view',
                            'lex:app.bsky.embed.record#view',
                            'lex:app.bsky.embed.recordWithMedia#view'
                        ]
                    },
                    replyCount: {
                        type: 'integer'
                    },
                    repostCount: {
                        type: 'integer'
                    },
                    likeCount: {
                        type: 'integer'
                    },
                    quoteCount: {
                        type: 'integer'
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.feed.defs#viewerState'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    threadgate: {
                        type: 'ref',
                        ref: 'lex:app.bsky.feed.defs#threadgateView'
                    }
                }
            },
            viewerState: {
                type: 'object',
                description: "Metadata about the requesting account's relationship with the subject content. Only has meaningful content for authed requests.",
                properties: {
                    repost: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    like: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    threadMuted: {
                        type: 'boolean'
                    },
                    replyDisabled: {
                        type: 'boolean'
                    },
                    embeddingDisabled: {
                        type: 'boolean'
                    },
                    pinned: {
                        type: 'boolean'
                    }
                }
            },
            feedViewPost: {
                type: 'object',
                required: [
                    'post'
                ],
                properties: {
                    post: {
                        type: 'ref',
                        ref: 'lex:app.bsky.feed.defs#postView'
                    },
                    reply: {
                        type: 'ref',
                        ref: 'lex:app.bsky.feed.defs#replyRef'
                    },
                    reason: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.feed.defs#reasonRepost',
                            'lex:app.bsky.feed.defs#reasonPin'
                        ]
                    },
                    feedContext: {
                        type: 'string',
                        description: 'Context provided by feed generator that may be passed back alongside interactions.',
                        maxLength: 2000
                    }
                }
            },
            replyRef: {
                type: 'object',
                required: [
                    'root',
                    'parent'
                ],
                properties: {
                    root: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.feed.defs#postView',
                            'lex:app.bsky.feed.defs#notFoundPost',
                            'lex:app.bsky.feed.defs#blockedPost'
                        ]
                    },
                    parent: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.feed.defs#postView',
                            'lex:app.bsky.feed.defs#notFoundPost',
                            'lex:app.bsky.feed.defs#blockedPost'
                        ]
                    },
                    grandparentAuthor: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileViewBasic',
                        description: 'When parent is a reply to another post, this is the author of that post.'
                    }
                }
            },
            reasonRepost: {
                type: 'object',
                required: [
                    'by',
                    'indexedAt'
                ],
                properties: {
                    by: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileViewBasic'
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            reasonPin: {
                type: 'object',
                properties: {}
            },
            threadViewPost: {
                type: 'object',
                required: [
                    'post'
                ],
                properties: {
                    post: {
                        type: 'ref',
                        ref: 'lex:app.bsky.feed.defs#postView'
                    },
                    parent: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.feed.defs#threadViewPost',
                            'lex:app.bsky.feed.defs#notFoundPost',
                            'lex:app.bsky.feed.defs#blockedPost'
                        ]
                    },
                    replies: {
                        type: 'array',
                        items: {
                            type: 'union',
                            refs: [
                                'lex:app.bsky.feed.defs#threadViewPost',
                                'lex:app.bsky.feed.defs#notFoundPost',
                                'lex:app.bsky.feed.defs#blockedPost'
                            ]
                        }
                    }
                }
            },
            notFoundPost: {
                type: 'object',
                required: [
                    'uri',
                    'notFound'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    notFound: {
                        type: 'boolean',
                        const: true
                    }
                }
            },
            blockedPost: {
                type: 'object',
                required: [
                    'uri',
                    'blocked',
                    'author'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    blocked: {
                        type: 'boolean',
                        const: true
                    },
                    author: {
                        type: 'ref',
                        ref: 'lex:app.bsky.feed.defs#blockedAuthor'
                    }
                }
            },
            blockedAuthor: {
                type: 'object',
                required: [
                    'did'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#viewerState'
                    }
                }
            },
            generatorView: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'did',
                    'creator',
                    'displayName',
                    'indexedAt'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    creator: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileView'
                    },
                    displayName: {
                        type: 'string'
                    },
                    description: {
                        type: 'string',
                        maxGraphemes: 300,
                        maxLength: 3000
                    },
                    descriptionFacets: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.richtext.facet'
                        }
                    },
                    avatar: {
                        type: 'string',
                        format: 'uri'
                    },
                    likeCount: {
                        type: 'integer',
                        minimum: 0
                    },
                    acceptsInteractions: {
                        type: 'boolean'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.feed.defs#generatorViewerState'
                    },
                    contentMode: {
                        type: 'string',
                        knownValues: [
                            'app.bsky.feed.defs#contentModeUnspecified',
                            'app.bsky.feed.defs#contentModeVideo'
                        ]
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            generatorViewerState: {
                type: 'object',
                properties: {
                    like: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            },
            skeletonFeedPost: {
                type: 'object',
                required: [
                    'post'
                ],
                properties: {
                    post: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    reason: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.feed.defs#skeletonReasonRepost',
                            'lex:app.bsky.feed.defs#skeletonReasonPin'
                        ]
                    },
                    feedContext: {
                        type: 'string',
                        description: 'Context that will be passed through to client and may be passed to feed generator back alongside interactions.',
                        maxLength: 2000
                    }
                }
            },
            skeletonReasonRepost: {
                type: 'object',
                required: [
                    'repost'
                ],
                properties: {
                    repost: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            },
            skeletonReasonPin: {
                type: 'object',
                properties: {}
            },
            threadgateView: {
                type: 'object',
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    record: {
                        type: 'unknown'
                    },
                    lists: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.graph.defs#listViewBasic'
                        }
                    }
                }
            },
            interaction: {
                type: 'object',
                properties: {
                    item: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    event: {
                        type: 'string',
                        knownValues: [
                            'app.bsky.feed.defs#requestLess',
                            'app.bsky.feed.defs#requestMore',
                            'app.bsky.feed.defs#clickthroughItem',
                            'app.bsky.feed.defs#clickthroughAuthor',
                            'app.bsky.feed.defs#clickthroughReposter',
                            'app.bsky.feed.defs#clickthroughEmbed',
                            'app.bsky.feed.defs#interactionSeen',
                            'app.bsky.feed.defs#interactionLike',
                            'app.bsky.feed.defs#interactionRepost',
                            'app.bsky.feed.defs#interactionReply',
                            'app.bsky.feed.defs#interactionQuote',
                            'app.bsky.feed.defs#interactionShare'
                        ]
                    },
                    feedContext: {
                        type: 'string',
                        description: 'Context on a feed item that was originally supplied by the feed generator on getFeedSkeleton.',
                        maxLength: 2000
                    }
                }
            },
            requestLess: {
                type: 'token',
                description: 'Request that less content like the given feed item be shown in the feed'
            },
            requestMore: {
                type: 'token',
                description: 'Request that more content like the given feed item be shown in the feed'
            },
            clickthroughItem: {
                type: 'token',
                description: 'User clicked through to the feed item'
            },
            clickthroughAuthor: {
                type: 'token',
                description: 'User clicked through to the author of the feed item'
            },
            clickthroughReposter: {
                type: 'token',
                description: 'User clicked through to the reposter of the feed item'
            },
            clickthroughEmbed: {
                type: 'token',
                description: 'User clicked through to the embedded content of the feed item'
            },
            contentModeUnspecified: {
                type: 'token',
                description: 'Declares the feed generator returns any types of posts.'
            },
            contentModeVideo: {
                type: 'token',
                description: 'Declares the feed generator returns posts containing app.bsky.embed.video embeds.'
            },
            interactionSeen: {
                type: 'token',
                description: 'Feed item was seen by user'
            },
            interactionLike: {
                type: 'token',
                description: 'User liked the feed item'
            },
            interactionRepost: {
                type: 'token',
                description: 'User reposted the feed item'
            },
            interactionReply: {
                type: 'token',
                description: 'User replied to the feed item'
            },
            interactionQuote: {
                type: 'token',
                description: 'User quoted the feed item'
            },
            interactionShare: {
                type: 'token',
                description: 'User shared the feed item'
            }
        }
    },
    AppBskyFeedDescribeFeedGenerator: {
        lexicon: 1,
        id: 'app.bsky.feed.describeFeedGenerator',
        defs: {
            main: {
                type: 'query',
                description: 'Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did',
                            'feeds'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            feeds: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.describeFeedGenerator#feed'
                                }
                            },
                            links: {
                                type: 'ref',
                                ref: 'lex:app.bsky.feed.describeFeedGenerator#links'
                            }
                        }
                    }
                }
            },
            feed: {
                type: 'object',
                required: [
                    'uri'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            },
            links: {
                type: 'object',
                properties: {
                    privacyPolicy: {
                        type: 'string'
                    },
                    termsOfService: {
                        type: 'string'
                    }
                }
            }
        }
    },
    AppBskyFeedGenerator: {
        lexicon: 1,
        id: 'app.bsky.feed.generator',
        defs: {
            main: {
                type: 'record',
                description: 'Record declaring of the existence of a feed generator, and containing metadata about it. The record can exist in any repository.',
                key: 'any',
                record: {
                    type: 'object',
                    required: [
                        'did',
                        'displayName',
                        'createdAt'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did'
                        },
                        displayName: {
                            type: 'string',
                            maxGraphemes: 24,
                            maxLength: 240
                        },
                        description: {
                            type: 'string',
                            maxGraphemes: 300,
                            maxLength: 3000
                        },
                        descriptionFacets: {
                            type: 'array',
                            items: {
                                type: 'ref',
                                ref: 'lex:app.bsky.richtext.facet'
                            }
                        },
                        avatar: {
                            type: 'blob',
                            accept: [
                                'image/png',
                                'image/jpeg'
                            ],
                            maxSize: 1000000
                        },
                        acceptsInteractions: {
                            type: 'boolean',
                            description: 'Declaration that a feed accepts feedback interactions from a client through app.bsky.feed.sendInteractions'
                        },
                        labels: {
                            type: 'union',
                            description: 'Self-label values',
                            refs: [
                                'lex:com.atproto.label.defs#selfLabels'
                            ]
                        },
                        contentMode: {
                            type: 'string',
                            knownValues: [
                                'app.bsky.feed.defs#contentModeUnspecified',
                                'app.bsky.feed.defs#contentModeVideo'
                            ]
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetActorFeeds: {
        lexicon: 1,
        id: 'app.bsky.feed.getActorFeeds',
        defs: {
            main: {
                type: 'query',
                description: "Get a list of feeds (feed generator records) created by the actor (in the actor's repo).",
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feeds'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            feeds: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#generatorView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetActorLikes: {
        lexicon: 1,
        id: 'app.bsky.feed.getActorLikes',
        defs: {
            main: {
                type: 'query',
                description: 'Get a list of posts liked by an actor. Requires auth, actor must be the requesting account.',
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feed'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            feed: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#feedViewPost'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'BlockedActor'
                    },
                    {
                        name: 'BlockedByActor'
                    }
                ]
            }
        }
    },
    AppBskyFeedGetAuthorFeed: {
        lexicon: 1,
        id: 'app.bsky.feed.getAuthorFeed',
        defs: {
            main: {
                type: 'query',
                description: "Get a view of an actor's 'author feed' (post and reposts by the author). Does not require auth.",
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        },
                        filter: {
                            type: 'string',
                            description: 'Combinations of post/repost types to include in response.',
                            knownValues: [
                                'posts_with_replies',
                                'posts_no_replies',
                                'posts_with_media',
                                'posts_and_author_threads'
                            ],
                            default: 'posts_with_replies'
                        },
                        includePins: {
                            type: 'boolean',
                            default: false
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feed'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            feed: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#feedViewPost'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'BlockedActor'
                    },
                    {
                        name: 'BlockedByActor'
                    }
                ]
            }
        }
    },
    AppBskyFeedGetFeed: {
        lexicon: 1,
        id: 'app.bsky.feed.getFeed',
        defs: {
            main: {
                type: 'query',
                description: "Get a hydrated feed from an actor's selected feed generator. Implemented by App View.",
                parameters: {
                    type: 'params',
                    required: [
                        'feed'
                    ],
                    properties: {
                        feed: {
                            type: 'string',
                            format: 'at-uri'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feed'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            feed: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#feedViewPost'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'UnknownFeed'
                    }
                ]
            }
        }
    },
    AppBskyFeedGetFeedGenerator: {
        lexicon: 1,
        id: 'app.bsky.feed.getFeedGenerator',
        defs: {
            main: {
                type: 'query',
                description: 'Get information about a feed generator. Implemented by AppView.',
                parameters: {
                    type: 'params',
                    required: [
                        'feed'
                    ],
                    properties: {
                        feed: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'AT-URI of the feed generator record.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'view',
                            'isOnline',
                            'isValid'
                        ],
                        properties: {
                            view: {
                                type: 'ref',
                                ref: 'lex:app.bsky.feed.defs#generatorView'
                            },
                            isOnline: {
                                type: 'boolean',
                                description: 'Indicates whether the feed generator service has been online recently, or else seems to be inactive.'
                            },
                            isValid: {
                                type: 'boolean',
                                description: 'Indicates whether the feed generator service is compatible with the record declaration.'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetFeedGenerators: {
        lexicon: 1,
        id: 'app.bsky.feed.getFeedGenerators',
        defs: {
            main: {
                type: 'query',
                description: 'Get information about a list of feed generators.',
                parameters: {
                    type: 'params',
                    required: [
                        'feeds'
                    ],
                    properties: {
                        feeds: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'at-uri'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feeds'
                        ],
                        properties: {
                            feeds: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#generatorView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetFeedSkeleton: {
        lexicon: 1,
        id: 'app.bsky.feed.getFeedSkeleton',
        defs: {
            main: {
                type: 'query',
                description: 'Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.',
                parameters: {
                    type: 'params',
                    required: [
                        'feed'
                    ],
                    properties: {
                        feed: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference to feed generator record describing the specific feed being requested.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feed'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            feed: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#skeletonFeedPost'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'UnknownFeed'
                    }
                ]
            }
        }
    },
    AppBskyFeedGetLikes: {
        lexicon: 1,
        id: 'app.bsky.feed.getLikes',
        defs: {
            main: {
                type: 'query',
                description: 'Get like records which reference a subject (by AT-URI and CID).',
                parameters: {
                    type: 'params',
                    required: [
                        'uri'
                    ],
                    properties: {
                        uri: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'AT-URI of the subject (eg, a post record).'
                        },
                        cid: {
                            type: 'string',
                            format: 'cid',
                            description: 'CID of the subject record (aka, specific version of record), to filter likes.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'uri',
                            'likes'
                        ],
                        properties: {
                            uri: {
                                type: 'string',
                                format: 'at-uri'
                            },
                            cid: {
                                type: 'string',
                                format: 'cid'
                            },
                            cursor: {
                                type: 'string'
                            },
                            likes: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.getLikes#like'
                                }
                            }
                        }
                    }
                }
            },
            like: {
                type: 'object',
                required: [
                    'indexedAt',
                    'createdAt',
                    'actor'
                ],
                properties: {
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    actor: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileView'
                    }
                }
            }
        }
    },
    AppBskyFeedGetListFeed: {
        lexicon: 1,
        id: 'app.bsky.feed.getListFeed',
        defs: {
            main: {
                type: 'query',
                description: 'Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.',
                parameters: {
                    type: 'params',
                    required: [
                        'list'
                    ],
                    properties: {
                        list: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) to the list record.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feed'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            feed: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#feedViewPost'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'UnknownList'
                    }
                ]
            }
        }
    },
    AppBskyFeedGetPostThread: {
        lexicon: 1,
        id: 'app.bsky.feed.getPostThread',
        defs: {
            main: {
                type: 'query',
                description: 'Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.',
                parameters: {
                    type: 'params',
                    required: [
                        'uri'
                    ],
                    properties: {
                        uri: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) to post record.'
                        },
                        depth: {
                            type: 'integer',
                            description: 'How many levels of reply depth should be included in response.',
                            default: 6,
                            minimum: 0,
                            maximum: 1000
                        },
                        parentHeight: {
                            type: 'integer',
                            description: 'How many levels of parent (and grandparent, etc) post to include.',
                            default: 80,
                            minimum: 0,
                            maximum: 1000
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'thread'
                        ],
                        properties: {
                            thread: {
                                type: 'union',
                                refs: [
                                    'lex:app.bsky.feed.defs#threadViewPost',
                                    'lex:app.bsky.feed.defs#notFoundPost',
                                    'lex:app.bsky.feed.defs#blockedPost'
                                ]
                            },
                            threadgate: {
                                type: 'ref',
                                ref: 'lex:app.bsky.feed.defs#threadgateView'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'NotFound'
                    }
                ]
            }
        }
    },
    AppBskyFeedGetPosts: {
        lexicon: 1,
        id: 'app.bsky.feed.getPosts',
        defs: {
            main: {
                type: 'query',
                description: "Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as 'hydrating' a 'feed skeleton'.",
                parameters: {
                    type: 'params',
                    required: [
                        'uris'
                    ],
                    properties: {
                        uris: {
                            type: 'array',
                            description: 'List of post AT-URIs to return hydrated views for.',
                            items: {
                                type: 'string',
                                format: 'at-uri'
                            },
                            maxLength: 25
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'posts'
                        ],
                        properties: {
                            posts: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#postView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetQuotes: {
        lexicon: 1,
        id: 'app.bsky.feed.getQuotes',
        defs: {
            main: {
                type: 'query',
                description: 'Get a list of quotes for a given post.',
                parameters: {
                    type: 'params',
                    required: [
                        'uri'
                    ],
                    properties: {
                        uri: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) of post record'
                        },
                        cid: {
                            type: 'string',
                            format: 'cid',
                            description: 'If supplied, filters to quotes of specific version (by CID) of the post record.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'uri',
                            'posts'
                        ],
                        properties: {
                            uri: {
                                type: 'string',
                                format: 'at-uri'
                            },
                            cid: {
                                type: 'string',
                                format: 'cid'
                            },
                            cursor: {
                                type: 'string'
                            },
                            posts: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#postView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetRepostedBy: {
        lexicon: 1,
        id: 'app.bsky.feed.getRepostedBy',
        defs: {
            main: {
                type: 'query',
                description: 'Get a list of reposts for a given post.',
                parameters: {
                    type: 'params',
                    required: [
                        'uri'
                    ],
                    properties: {
                        uri: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) of post record'
                        },
                        cid: {
                            type: 'string',
                            format: 'cid',
                            description: 'If supplied, filters to reposts of specific version (by CID) of the post record.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'uri',
                            'repostedBy'
                        ],
                        properties: {
                            uri: {
                                type: 'string',
                                format: 'at-uri'
                            },
                            cid: {
                                type: 'string',
                                format: 'cid'
                            },
                            cursor: {
                                type: 'string'
                            },
                            repostedBy: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetSuggestedFeeds: {
        lexicon: 1,
        id: 'app.bsky.feed.getSuggestedFeeds',
        defs: {
            main: {
                type: 'query',
                description: 'Get a list of suggested feeds (feed generators) for the requesting account.',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feeds'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            feeds: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#generatorView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetTimeline: {
        lexicon: 1,
        id: 'app.bsky.feed.getTimeline',
        defs: {
            main: {
                type: 'query',
                description: "Get a view of the requesting account's home timeline. This is expected to be some form of reverse-chronological feed.",
                parameters: {
                    type: 'params',
                    properties: {
                        algorithm: {
                            type: 'string',
                            description: "Variant 'algorithm' for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism."
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feed'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            feed: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#feedViewPost'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedLike: {
        lexicon: 1,
        id: 'app.bsky.feed.like',
        defs: {
            main: {
                type: 'record',
                description: "Record declaring a 'like' of a piece of subject content.",
                key: 'tid',
                record: {
                    type: 'object',
                    required: [
                        'subject',
                        'createdAt'
                    ],
                    properties: {
                        subject: {
                            type: 'ref',
                            ref: 'lex:com.atproto.repo.strongRef'
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedPost: {
        lexicon: 1,
        id: 'app.bsky.feed.post',
        defs: {
            main: {
                type: 'record',
                description: 'Record containing a Bluesky post.',
                key: 'tid',
                record: {
                    type: 'object',
                    required: [
                        'text',
                        'createdAt'
                    ],
                    properties: {
                        text: {
                            type: 'string',
                            maxLength: 3000,
                            maxGraphemes: 300,
                            description: 'The primary post content. May be an empty string, if there are embeds.'
                        },
                        entities: {
                            type: 'array',
                            description: 'DEPRECATED: replaced by app.bsky.richtext.facet.',
                            items: {
                                type: 'ref',
                                ref: 'lex:app.bsky.feed.post#entity'
                            }
                        },
                        facets: {
                            type: 'array',
                            description: 'Annotations of text (mentions, URLs, hashtags, etc)',
                            items: {
                                type: 'ref',
                                ref: 'lex:app.bsky.richtext.facet'
                            }
                        },
                        reply: {
                            type: 'ref',
                            ref: 'lex:app.bsky.feed.post#replyRef'
                        },
                        embed: {
                            type: 'union',
                            refs: [
                                'lex:app.bsky.embed.images',
                                'lex:app.bsky.embed.video',
                                'lex:app.bsky.embed.external',
                                'lex:app.bsky.embed.record',
                                'lex:app.bsky.embed.recordWithMedia'
                            ]
                        },
                        langs: {
                            type: 'array',
                            description: 'Indicates human language of post primary text content.',
                            maxLength: 3,
                            items: {
                                type: 'string',
                                format: 'language'
                            }
                        },
                        labels: {
                            type: 'union',
                            description: 'Self-label values for this post. Effectively content warnings.',
                            refs: [
                                'lex:com.atproto.label.defs#selfLabels'
                            ]
                        },
                        tags: {
                            type: 'array',
                            description: 'Additional hashtags, in addition to any included in post text and facets.',
                            maxLength: 8,
                            items: {
                                type: 'string',
                                maxLength: 640,
                                maxGraphemes: 64
                            }
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Client-declared timestamp when this post was originally created.'
                        }
                    }
                }
            },
            replyRef: {
                type: 'object',
                required: [
                    'root',
                    'parent'
                ],
                properties: {
                    root: {
                        type: 'ref',
                        ref: 'lex:com.atproto.repo.strongRef'
                    },
                    parent: {
                        type: 'ref',
                        ref: 'lex:com.atproto.repo.strongRef'
                    }
                }
            },
            entity: {
                type: 'object',
                description: 'Deprecated: use facets instead.',
                required: [
                    'index',
                    'type',
                    'value'
                ],
                properties: {
                    index: {
                        type: 'ref',
                        ref: 'lex:app.bsky.feed.post#textSlice'
                    },
                    type: {
                        type: 'string',
                        description: "Expected values are 'mention' and 'link'."
                    },
                    value: {
                        type: 'string'
                    }
                }
            },
            textSlice: {
                type: 'object',
                description: 'Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.',
                required: [
                    'start',
                    'end'
                ],
                properties: {
                    start: {
                        type: 'integer',
                        minimum: 0
                    },
                    end: {
                        type: 'integer',
                        minimum: 0
                    }
                }
            }
        }
    },
    AppBskyFeedPostgate: {
        lexicon: 1,
        id: 'app.bsky.feed.postgate',
        defs: {
            main: {
                type: 'record',
                key: 'tid',
                description: 'Record defining interaction rules for a post. The record key (rkey) of the postgate record must match the record key of the post, and that record must be in the same repository.',
                record: {
                    type: 'object',
                    required: [
                        'post',
                        'createdAt'
                    ],
                    properties: {
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        },
                        post: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) to the post record.'
                        },
                        detachedEmbeddingUris: {
                            type: 'array',
                            maxLength: 50,
                            items: {
                                type: 'string',
                                format: 'at-uri'
                            },
                            description: 'List of AT-URIs embedding this post that the author has detached from.'
                        },
                        embeddingRules: {
                            type: 'array',
                            maxLength: 5,
                            items: {
                                type: 'union',
                                refs: [
                                    'lex:app.bsky.feed.postgate#disableRule'
                                ]
                            }
                        }
                    }
                }
            },
            disableRule: {
                type: 'object',
                description: 'Disables embedding of this post.',
                properties: {}
            }
        }
    },
    AppBskyFeedRepost: {
        lexicon: 1,
        id: 'app.bsky.feed.repost',
        defs: {
            main: {
                description: "Record representing a 'repost' of an existing Bluesky post.",
                type: 'record',
                key: 'tid',
                record: {
                    type: 'object',
                    required: [
                        'subject',
                        'createdAt'
                    ],
                    properties: {
                        subject: {
                            type: 'ref',
                            ref: 'lex:com.atproto.repo.strongRef'
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedSearchPosts: {
        lexicon: 1,
        id: 'app.bsky.feed.searchPosts',
        defs: {
            main: {
                type: 'query',
                description: 'Find posts matching search criteria, returning views of those posts.',
                parameters: {
                    type: 'params',
                    required: [
                        'q'
                    ],
                    properties: {
                        q: {
                            type: 'string',
                            description: 'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'
                        },
                        sort: {
                            type: 'string',
                            knownValues: [
                                'top',
                                'latest'
                            ],
                            default: 'latest',
                            description: 'Specifies the ranking order of results.'
                        },
                        since: {
                            type: 'string',
                            description: "Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD)."
                        },
                        until: {
                            type: 'string',
                            description: "Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD)."
                        },
                        mentions: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions.'
                        },
                        author: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'Filter to posts by the given account. Handles are resolved to DID before query-time.'
                        },
                        lang: {
                            type: 'string',
                            format: 'language',
                            description: 'Filter to posts in the given language. Expected to be based on post language field, though server may override language detection.'
                        },
                        domain: {
                            type: 'string',
                            description: 'Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization.'
                        },
                        url: {
                            type: 'string',
                            format: 'uri',
                            description: 'Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching.'
                        },
                        tag: {
                            type: 'array',
                            items: {
                                type: 'string',
                                maxLength: 640,
                                maxGraphemes: 64
                            },
                            description: "Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching."
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 25
                        },
                        cursor: {
                            type: 'string',
                            description: 'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'posts'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            hitsTotal: {
                                type: 'integer',
                                description: 'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.'
                            },
                            posts: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#postView'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'BadQueryString'
                    }
                ]
            }
        }
    },
    AppBskyFeedSendInteractions: {
        lexicon: 1,
        id: 'app.bsky.feed.sendInteractions',
        defs: {
            main: {
                type: 'procedure',
                description: 'Send information about interactions with feed items back to the feed generator that served them.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'interactions'
                        ],
                        properties: {
                            interactions: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#interaction'
                                }
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {}
                    }
                }
            }
        }
    },
    AppBskyFeedThreadgate: {
        lexicon: 1,
        id: 'app.bsky.feed.threadgate',
        defs: {
            main: {
                type: 'record',
                key: 'tid',
                description: "Record defining interaction gating rules for a thread (aka, reply controls). The record key (rkey) of the threadgate record must match the record key of the thread's root post, and that record must be in the same repository.",
                record: {
                    type: 'object',
                    required: [
                        'post',
                        'createdAt'
                    ],
                    properties: {
                        post: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) to the post record.'
                        },
                        allow: {
                            type: 'array',
                            maxLength: 5,
                            items: {
                                type: 'union',
                                refs: [
                                    'lex:app.bsky.feed.threadgate#mentionRule',
                                    'lex:app.bsky.feed.threadgate#followingRule',
                                    'lex:app.bsky.feed.threadgate#listRule'
                                ]
                            }
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        },
                        hiddenReplies: {
                            type: 'array',
                            maxLength: 50,
                            items: {
                                type: 'string',
                                format: 'at-uri'
                            },
                            description: 'List of hidden reply URIs.'
                        }
                    }
                }
            },
            mentionRule: {
                type: 'object',
                description: 'Allow replies from actors mentioned in your post.',
                properties: {}
            },
            followingRule: {
                type: 'object',
                description: 'Allow replies from actors you follow.',
                properties: {}
            },
            listRule: {
                type: 'object',
                description: 'Allow replies from actors on a list.',
                required: [
                    'list'
                ],
                properties: {
                    list: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            }
        }
    },
    AppBskyGraphBlock: {
        lexicon: 1,
        id: 'app.bsky.graph.block',
        defs: {
            main: {
                type: 'record',
                description: "Record declaring a 'block' relationship against another account. NOTE: blocks are public in Bluesky; see blog posts for details.",
                key: 'tid',
                record: {
                    type: 'object',
                    required: [
                        'subject',
                        'createdAt'
                    ],
                    properties: {
                        subject: {
                            type: 'string',
                            format: 'did',
                            description: 'DID of the account to be blocked.'
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphDefs: {
        lexicon: 1,
        id: 'app.bsky.graph.defs',
        defs: {
            listViewBasic: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'name',
                    'purpose'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    name: {
                        type: 'string',
                        maxLength: 64,
                        minLength: 1
                    },
                    purpose: {
                        type: 'ref',
                        ref: 'lex:app.bsky.graph.defs#listPurpose'
                    },
                    avatar: {
                        type: 'string',
                        format: 'uri'
                    },
                    listItemCount: {
                        type: 'integer',
                        minimum: 0
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.graph.defs#listViewerState'
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            listView: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'creator',
                    'name',
                    'purpose',
                    'indexedAt'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    creator: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileView'
                    },
                    name: {
                        type: 'string',
                        maxLength: 64,
                        minLength: 1
                    },
                    purpose: {
                        type: 'ref',
                        ref: 'lex:app.bsky.graph.defs#listPurpose'
                    },
                    description: {
                        type: 'string',
                        maxGraphemes: 300,
                        maxLength: 3000
                    },
                    descriptionFacets: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.richtext.facet'
                        }
                    },
                    avatar: {
                        type: 'string',
                        format: 'uri'
                    },
                    listItemCount: {
                        type: 'integer',
                        minimum: 0
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.graph.defs#listViewerState'
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            listItemView: {
                type: 'object',
                required: [
                    'uri',
                    'subject'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    subject: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileView'
                    }
                }
            },
            starterPackView: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'record',
                    'creator',
                    'indexedAt'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    record: {
                        type: 'unknown'
                    },
                    creator: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileViewBasic'
                    },
                    list: {
                        type: 'ref',
                        ref: 'lex:app.bsky.graph.defs#listViewBasic'
                    },
                    listItemsSample: {
                        type: 'array',
                        maxLength: 12,
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.graph.defs#listItemView'
                        }
                    },
                    feeds: {
                        type: 'array',
                        maxLength: 3,
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.feed.defs#generatorView'
                        }
                    },
                    joinedWeekCount: {
                        type: 'integer',
                        minimum: 0
                    },
                    joinedAllTimeCount: {
                        type: 'integer',
                        minimum: 0
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            starterPackViewBasic: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'record',
                    'creator',
                    'indexedAt'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    record: {
                        type: 'unknown'
                    },
                    creator: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileViewBasic'
                    },
                    listItemCount: {
                        type: 'integer',
                        minimum: 0
                    },
                    joinedWeekCount: {
                        type: 'integer',
                        minimum: 0
                    },
                    joinedAllTimeCount: {
                        type: 'integer',
                        minimum: 0
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            listPurpose: {
                type: 'string',
                knownValues: [
                    'app.bsky.graph.defs#modlist',
                    'app.bsky.graph.defs#curatelist',
                    'app.bsky.graph.defs#referencelist'
                ]
            },
            modlist: {
                type: 'token',
                description: 'A list of actors to apply an aggregate moderation action (mute/block) on.'
            },
            curatelist: {
                type: 'token',
                description: 'A list of actors used for curation purposes such as list feeds or interaction gating.'
            },
            referencelist: {
                type: 'token',
                description: 'A list of actors used for only for reference purposes such as within a starter pack.'
            },
            listViewerState: {
                type: 'object',
                properties: {
                    muted: {
                        type: 'boolean'
                    },
                    blocked: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            },
            notFoundActor: {
                type: 'object',
                description: 'indicates that a handle or DID could not be resolved',
                required: [
                    'actor',
                    'notFound'
                ],
                properties: {
                    actor: {
                        type: 'string',
                        format: 'at-identifier'
                    },
                    notFound: {
                        type: 'boolean',
                        const: true
                    }
                }
            },
            relationship: {
                type: 'object',
                description: 'lists the bi-directional graph relationships between one actor (not indicated in the object), and the target actors (the DID included in the object)',
                required: [
                    'did'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    following: {
                        type: 'string',
                        format: 'at-uri',
                        description: 'if the actor follows this DID, this is the AT-URI of the follow record'
                    },
                    followedBy: {
                        type: 'string',
                        format: 'at-uri',
                        description: 'if the actor is followed by this DID, contains the AT-URI of the follow record'
                    }
                }
            }
        }
    },
    AppBskyGraphFollow: {
        lexicon: 1,
        id: 'app.bsky.graph.follow',
        defs: {
            main: {
                type: 'record',
                description: "Record declaring a social 'follow' relationship of another account. Duplicate follows will be ignored by the AppView.",
                key: 'tid',
                record: {
                    type: 'object',
                    required: [
                        'subject',
                        'createdAt'
                    ],
                    properties: {
                        subject: {
                            type: 'string',
                            format: 'did'
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetActorStarterPacks: {
        lexicon: 1,
        id: 'app.bsky.graph.getActorStarterPacks',
        defs: {
            main: {
                type: 'query',
                description: 'Get a list of starter packs created by the actor.',
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'starterPacks'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            starterPacks: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.graph.defs#starterPackViewBasic'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetBlocks: {
        lexicon: 1,
        id: 'app.bsky.graph.getBlocks',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates which accounts the requesting account is currently blocking. Requires auth.',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'blocks'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            blocks: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetFollowers: {
        lexicon: 1,
        id: 'app.bsky.graph.getFollowers',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates accounts which follow a specified account (actor).',
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'subject',
                            'followers'
                        ],
                        properties: {
                            subject: {
                                type: 'ref',
                                ref: 'lex:app.bsky.actor.defs#profileView'
                            },
                            cursor: {
                                type: 'string'
                            },
                            followers: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetFollows: {
        lexicon: 1,
        id: 'app.bsky.graph.getFollows',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates accounts which a specified account (actor) follows.',
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'subject',
                            'follows'
                        ],
                        properties: {
                            subject: {
                                type: 'ref',
                                ref: 'lex:app.bsky.actor.defs#profileView'
                            },
                            cursor: {
                                type: 'string'
                            },
                            follows: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetKnownFollowers: {
        lexicon: 1,
        id: 'app.bsky.graph.getKnownFollowers',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates accounts which follow a specified account (actor) and are followed by the viewer.',
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'subject',
                            'followers'
                        ],
                        properties: {
                            subject: {
                                type: 'ref',
                                ref: 'lex:app.bsky.actor.defs#profileView'
                            },
                            cursor: {
                                type: 'string'
                            },
                            followers: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetList: {
        lexicon: 1,
        id: 'app.bsky.graph.getList',
        defs: {
            main: {
                type: 'query',
                description: "Gets a 'view' (with additional context) of a specified list.",
                parameters: {
                    type: 'params',
                    required: [
                        'list'
                    ],
                    properties: {
                        list: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) of the list record to hydrate.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'list',
                            'items'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            list: {
                                type: 'ref',
                                ref: 'lex:app.bsky.graph.defs#listView'
                            },
                            items: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.graph.defs#listItemView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetListBlocks: {
        lexicon: 1,
        id: 'app.bsky.graph.getListBlocks',
        defs: {
            main: {
                type: 'query',
                description: 'Get mod lists that the requesting account (actor) is blocking. Requires auth.',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'lists'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            lists: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.graph.defs#listView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetListMutes: {
        lexicon: 1,
        id: 'app.bsky.graph.getListMutes',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates mod lists that the requesting account (actor) currently has muted. Requires auth.',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'lists'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            lists: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.graph.defs#listView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetLists: {
        lexicon: 1,
        id: 'app.bsky.graph.getLists',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates the lists created by a specified account (actor).',
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'The account (actor) to enumerate lists from.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'lists'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            lists: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.graph.defs#listView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetMutes: {
        lexicon: 1,
        id: 'app.bsky.graph.getMutes',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates accounts that the requesting account (actor) currently has muted. Requires auth.',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'mutes'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            mutes: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetRelationships: {
        lexicon: 1,
        id: 'app.bsky.graph.getRelationships',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates public relationships between one account, and a list of other accounts. Does not require auth.',
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'Primary account requesting relationships for.'
                        },
                        others: {
                            type: 'array',
                            description: "List of 'other' accounts to be related back to the primary.",
                            maxLength: 30,
                            items: {
                                type: 'string',
                                format: 'at-identifier'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'relationships'
                        ],
                        properties: {
                            actor: {
                                type: 'string',
                                format: 'did'
                            },
                            relationships: {
                                type: 'array',
                                items: {
                                    type: 'union',
                                    refs: [
                                        'lex:app.bsky.graph.defs#relationship',
                                        'lex:app.bsky.graph.defs#notFoundActor'
                                    ]
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'ActorNotFound',
                        description: 'the primary actor at-identifier could not be resolved'
                    }
                ]
            }
        }
    },
    AppBskyGraphGetStarterPack: {
        lexicon: 1,
        id: 'app.bsky.graph.getStarterPack',
        defs: {
            main: {
                type: 'query',
                description: 'Gets a view of a starter pack.',
                parameters: {
                    type: 'params',
                    required: [
                        'starterPack'
                    ],
                    properties: {
                        starterPack: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) of the starter pack record.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'starterPack'
                        ],
                        properties: {
                            starterPack: {
                                type: 'ref',
                                ref: 'lex:app.bsky.graph.defs#starterPackView'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetStarterPacks: {
        lexicon: 1,
        id: 'app.bsky.graph.getStarterPacks',
        defs: {
            main: {
                type: 'query',
                description: 'Get views for a list of starter packs.',
                parameters: {
                    type: 'params',
                    required: [
                        'uris'
                    ],
                    properties: {
                        uris: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'at-uri'
                            },
                            maxLength: 25
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'starterPacks'
                        ],
                        properties: {
                            starterPacks: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.graph.defs#starterPackViewBasic'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetSuggestedFollowsByActor: {
        lexicon: 1,
        id: 'app.bsky.graph.getSuggestedFollowsByActor',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates follows similar to a given account (actor). Expected use is to recommend additional accounts immediately after following one account.',
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'suggestions'
                        ],
                        properties: {
                            suggestions: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileView'
                                }
                            },
                            isFallback: {
                                type: 'boolean',
                                description: 'If true, response has fallen-back to generic results, and is not scoped using relativeToDid',
                                default: false
                            },
                            recId: {
                                type: 'integer',
                                description: 'Snowflake for this recommendation, use when submitting recommendation events.'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphList: {
        lexicon: 1,
        id: 'app.bsky.graph.list',
        defs: {
            main: {
                type: 'record',
                description: 'Record representing a list of accounts (actors). Scope includes both moderation-oriented lists and curration-oriented lists.',
                key: 'tid',
                record: {
                    type: 'object',
                    required: [
                        'name',
                        'purpose',
                        'createdAt'
                    ],
                    properties: {
                        purpose: {
                            type: 'ref',
                            description: 'Defines the purpose of the list (aka, moderation-oriented or curration-oriented)',
                            ref: 'lex:app.bsky.graph.defs#listPurpose'
                        },
                        name: {
                            type: 'string',
                            maxLength: 64,
                            minLength: 1,
                            description: 'Display name for list; can not be empty.'
                        },
                        description: {
                            type: 'string',
                            maxGraphemes: 300,
                            maxLength: 3000
                        },
                        descriptionFacets: {
                            type: 'array',
                            items: {
                                type: 'ref',
                                ref: 'lex:app.bsky.richtext.facet'
                            }
                        },
                        avatar: {
                            type: 'blob',
                            accept: [
                                'image/png',
                                'image/jpeg'
                            ],
                            maxSize: 1000000
                        },
                        labels: {
                            type: 'union',
                            refs: [
                                'lex:com.atproto.label.defs#selfLabels'
                            ]
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphListblock: {
        lexicon: 1,
        id: 'app.bsky.graph.listblock',
        defs: {
            main: {
                type: 'record',
                description: 'Record representing a block relationship against an entire an entire list of accounts (actors).',
                key: 'tid',
                record: {
                    type: 'object',
                    required: [
                        'subject',
                        'createdAt'
                    ],
                    properties: {
                        subject: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) to the mod list record.'
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphListitem: {
        lexicon: 1,
        id: 'app.bsky.graph.listitem',
        defs: {
            main: {
                type: 'record',
                description: "Record representing an account's inclusion on a specific list. The AppView will ignore duplicate listitem records.",
                key: 'tid',
                record: {
                    type: 'object',
                    required: [
                        'subject',
                        'list',
                        'createdAt'
                    ],
                    properties: {
                        subject: {
                            type: 'string',
                            format: 'did',
                            description: 'The account which is included on the list.'
                        },
                        list: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) to the list record (app.bsky.graph.list).'
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphMuteActor: {
        lexicon: 1,
        id: 'app.bsky.graph.muteActor',
        defs: {
            main: {
                type: 'procedure',
                description: 'Creates a mute relationship for the specified account. Mutes are private in Bluesky. Requires auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'actor'
                        ],
                        properties: {
                            actor: {
                                type: 'string',
                                format: 'at-identifier'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphMuteActorList: {
        lexicon: 1,
        id: 'app.bsky.graph.muteActorList',
        defs: {
            main: {
                type: 'procedure',
                description: 'Creates a mute relationship for the specified list of accounts. Mutes are private in Bluesky. Requires auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'list'
                        ],
                        properties: {
                            list: {
                                type: 'string',
                                format: 'at-uri'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphMuteThread: {
        lexicon: 1,
        id: 'app.bsky.graph.muteThread',
        defs: {
            main: {
                type: 'procedure',
                description: 'Mutes a thread preventing notifications from the thread and any of its children. Mutes are private in Bluesky. Requires auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'root'
                        ],
                        properties: {
                            root: {
                                type: 'string',
                                format: 'at-uri'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphSearchStarterPacks: {
        lexicon: 1,
        id: 'app.bsky.graph.searchStarterPacks',
        defs: {
            main: {
                type: 'query',
                description: 'Find starter packs matching search criteria. Does not require auth.',
                parameters: {
                    type: 'params',
                    required: [
                        'q'
                    ],
                    properties: {
                        q: {
                            type: 'string',
                            description: 'Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 25
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'starterPacks'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            starterPacks: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.graph.defs#starterPackViewBasic'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphStarterpack: {
        lexicon: 1,
        id: 'app.bsky.graph.starterpack',
        defs: {
            main: {
                type: 'record',
                description: 'Record defining a starter pack of actors and feeds for new users.',
                key: 'tid',
                record: {
                    type: 'object',
                    required: [
                        'name',
                        'list',
                        'createdAt'
                    ],
                    properties: {
                        name: {
                            type: 'string',
                            maxGraphemes: 50,
                            maxLength: 500,
                            minLength: 1,
                            description: 'Display name for starter pack; can not be empty.'
                        },
                        description: {
                            type: 'string',
                            maxGraphemes: 300,
                            maxLength: 3000
                        },
                        descriptionFacets: {
                            type: 'array',
                            items: {
                                type: 'ref',
                                ref: 'lex:app.bsky.richtext.facet'
                            }
                        },
                        list: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) to the list record.'
                        },
                        feeds: {
                            type: 'array',
                            maxLength: 3,
                            items: {
                                type: 'ref',
                                ref: 'lex:app.bsky.graph.starterpack#feedItem'
                            }
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            },
            feedItem: {
                type: 'object',
                required: [
                    'uri'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            }
        }
    },
    AppBskyGraphUnmuteActor: {
        lexicon: 1,
        id: 'app.bsky.graph.unmuteActor',
        defs: {
            main: {
                type: 'procedure',
                description: 'Unmutes the specified account. Requires auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'actor'
                        ],
                        properties: {
                            actor: {
                                type: 'string',
                                format: 'at-identifier'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphUnmuteActorList: {
        lexicon: 1,
        id: 'app.bsky.graph.unmuteActorList',
        defs: {
            main: {
                type: 'procedure',
                description: 'Unmutes the specified list of accounts. Requires auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'list'
                        ],
                        properties: {
                            list: {
                                type: 'string',
                                format: 'at-uri'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphUnmuteThread: {
        lexicon: 1,
        id: 'app.bsky.graph.unmuteThread',
        defs: {
            main: {
                type: 'procedure',
                description: 'Unmutes the specified thread. Requires auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'root'
                        ],
                        properties: {
                            root: {
                                type: 'string',
                                format: 'at-uri'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyLabelerDefs: {
        lexicon: 1,
        id: 'app.bsky.labeler.defs',
        defs: {
            labelerView: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'creator',
                    'indexedAt'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    creator: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileView'
                    },
                    likeCount: {
                        type: 'integer',
                        minimum: 0
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.labeler.defs#labelerViewerState'
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    }
                }
            },
            labelerViewDetailed: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'creator',
                    'policies',
                    'indexedAt'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    creator: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileView'
                    },
                    policies: {
                        type: 'ref',
                        ref: 'lex:app.bsky.labeler.defs#labelerPolicies'
                    },
                    likeCount: {
                        type: 'integer',
                        minimum: 0
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.labeler.defs#labelerViewerState'
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    }
                }
            },
            labelerViewerState: {
                type: 'object',
                properties: {
                    like: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            },
            labelerPolicies: {
                type: 'object',
                required: [
                    'labelValues'
                ],
                properties: {
                    labelValues: {
                        type: 'array',
                        description: 'The label values which this labeler publishes. May include global or custom labels.',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#labelValue'
                        }
                    },
                    labelValueDefinitions: {
                        type: 'array',
                        description: 'Label values created by this labeler and scoped exclusively to it. Labels defined here will override global label definitions for this labeler.',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#labelValueDefinition'
                        }
                    }
                }
            }
        }
    },
    AppBskyLabelerGetServices: {
        lexicon: 1,
        id: 'app.bsky.labeler.getServices',
        defs: {
            main: {
                type: 'query',
                description: 'Get information about a list of labeler services.',
                parameters: {
                    type: 'params',
                    required: [
                        'dids'
                    ],
                    properties: {
                        dids: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'did'
                            }
                        },
                        detailed: {
                            type: 'boolean',
                            default: false
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'views'
                        ],
                        properties: {
                            views: {
                                type: 'array',
                                items: {
                                    type: 'union',
                                    refs: [
                                        'lex:app.bsky.labeler.defs#labelerView',
                                        'lex:app.bsky.labeler.defs#labelerViewDetailed'
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyLabelerService: {
        lexicon: 1,
        id: 'app.bsky.labeler.service',
        defs: {
            main: {
                type: 'record',
                description: 'A declaration of the existence of labeler service.',
                key: 'literal:self',
                record: {
                    type: 'object',
                    required: [
                        'policies',
                        'createdAt'
                    ],
                    properties: {
                        policies: {
                            type: 'ref',
                            ref: 'lex:app.bsky.labeler.defs#labelerPolicies'
                        },
                        labels: {
                            type: 'union',
                            refs: [
                                'lex:com.atproto.label.defs#selfLabels'
                            ]
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            }
        }
    },
    AppBskyNotificationGetUnreadCount: {
        lexicon: 1,
        id: 'app.bsky.notification.getUnreadCount',
        defs: {
            main: {
                type: 'query',
                description: 'Count the number of unread notifications for the requesting account. Requires auth.',
                parameters: {
                    type: 'params',
                    properties: {
                        priority: {
                            type: 'boolean'
                        },
                        seenAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'count'
                        ],
                        properties: {
                            count: {
                                type: 'integer'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyNotificationListNotifications: {
        lexicon: 1,
        id: 'app.bsky.notification.listNotifications',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerate notifications for the requesting account. Requires auth.',
                parameters: {
                    type: 'params',
                    properties: {
                        reasons: {
                            description: 'Notification reasons to include in response.',
                            type: 'array',
                            items: {
                                type: 'string',
                                description: 'A reason that matches the reason property of #notification.'
                            }
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        priority: {
                            type: 'boolean'
                        },
                        cursor: {
                            type: 'string'
                        },
                        seenAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'notifications'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            notifications: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.notification.listNotifications#notification'
                                }
                            },
                            priority: {
                                type: 'boolean'
                            },
                            seenAt: {
                                type: 'string',
                                format: 'datetime'
                            }
                        }
                    }
                }
            },
            notification: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'author',
                    'reason',
                    'record',
                    'isRead',
                    'indexedAt'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    author: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileView'
                    },
                    reason: {
                        type: 'string',
                        description: "Expected values are 'like', 'repost', 'follow', 'mention', 'reply', 'quote', and 'starterpack-joined'.",
                        knownValues: [
                            'like',
                            'repost',
                            'follow',
                            'mention',
                            'reply',
                            'quote',
                            'starterpack-joined'
                        ]
                    },
                    reasonSubject: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    record: {
                        type: 'unknown'
                    },
                    isRead: {
                        type: 'boolean'
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    }
                }
            }
        }
    },
    AppBskyNotificationPutPreferences: {
        lexicon: 1,
        id: 'app.bsky.notification.putPreferences',
        defs: {
            main: {
                type: 'procedure',
                description: 'Set notification-related preferences for an account. Requires auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'priority'
                        ],
                        properties: {
                            priority: {
                                type: 'boolean'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyNotificationRegisterPush: {
        lexicon: 1,
        id: 'app.bsky.notification.registerPush',
        defs: {
            main: {
                type: 'procedure',
                description: 'Register to receive push notifications, via a specified service, for the requesting account. Requires auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'serviceDid',
                            'token',
                            'platform',
                            'appId'
                        ],
                        properties: {
                            serviceDid: {
                                type: 'string',
                                format: 'did'
                            },
                            token: {
                                type: 'string'
                            },
                            platform: {
                                type: 'string',
                                knownValues: [
                                    'ios',
                                    'android',
                                    'web'
                                ]
                            },
                            appId: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyNotificationUpdateSeen: {
        lexicon: 1,
        id: 'app.bsky.notification.updateSeen',
        defs: {
            main: {
                type: 'procedure',
                description: 'Notify server that the requesting account has seen notifications. Requires auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'seenAt'
                        ],
                        properties: {
                            seenAt: {
                                type: 'string',
                                format: 'datetime'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyRichtextFacet: {
        lexicon: 1,
        id: 'app.bsky.richtext.facet',
        defs: {
            main: {
                type: 'object',
                description: 'Annotation of a sub-string within rich text.',
                required: [
                    'index',
                    'features'
                ],
                properties: {
                    index: {
                        type: 'ref',
                        ref: 'lex:app.bsky.richtext.facet#byteSlice'
                    },
                    features: {
                        type: 'array',
                        items: {
                            type: 'union',
                            refs: [
                                'lex:app.bsky.richtext.facet#mention',
                                'lex:app.bsky.richtext.facet#link',
                                'lex:app.bsky.richtext.facet#tag'
                            ]
                        }
                    }
                }
            },
            mention: {
                type: 'object',
                description: "Facet feature for mention of another account. The text is usually a handle, including a '@' prefix, but the facet reference is a DID.",
                required: [
                    'did'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    }
                }
            },
            link: {
                type: 'object',
                description: 'Facet feature for a URL. The text URL may have been simplified or truncated, but the facet reference should be a complete URL.',
                required: [
                    'uri'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'uri'
                    }
                }
            },
            tag: {
                type: 'object',
                description: "Facet feature for a hashtag. The text usually includes a '#' prefix, but the facet reference should not (except in the case of 'double hash tags').",
                required: [
                    'tag'
                ],
                properties: {
                    tag: {
                        type: 'string',
                        maxLength: 640,
                        maxGraphemes: 64
                    }
                }
            },
            byteSlice: {
                type: 'object',
                description: 'Specifies the sub-string range a facet feature applies to. Start index is inclusive, end index is exclusive. Indices are zero-indexed, counting bytes of the UTF-8 encoded text. NOTE: some languages, like Javascript, use UTF-16 or Unicode codepoints for string slice indexing; in these languages, convert to byte arrays before working with facets.',
                required: [
                    'byteStart',
                    'byteEnd'
                ],
                properties: {
                    byteStart: {
                        type: 'integer',
                        minimum: 0
                    },
                    byteEnd: {
                        type: 'integer',
                        minimum: 0
                    }
                }
            }
        }
    },
    AppBskyUnspeccedDefs: {
        lexicon: 1,
        id: 'app.bsky.unspecced.defs',
        defs: {
            skeletonSearchPost: {
                type: 'object',
                required: [
                    'uri'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            },
            skeletonSearchActor: {
                type: 'object',
                required: [
                    'did'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    }
                }
            },
            skeletonSearchStarterPack: {
                type: 'object',
                required: [
                    'uri'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            },
            trendingTopic: {
                type: 'object',
                required: [
                    'topic',
                    'link'
                ],
                properties: {
                    topic: {
                        type: 'string'
                    },
                    displayName: {
                        type: 'string'
                    },
                    description: {
                        type: 'string'
                    },
                    link: {
                        type: 'string'
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetConfig: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getConfig',
        defs: {
            main: {
                type: 'query',
                description: 'Get miscellaneous runtime configuration.',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [],
                        properties: {
                            checkEmailConfirmed: {
                                type: 'boolean'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetPopularFeedGenerators: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getPopularFeedGenerators',
        defs: {
            main: {
                type: 'query',
                description: 'An unspecced view of globally popular feed generators.',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        },
                        query: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feeds'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            feeds: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#generatorView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetSuggestionsSkeleton: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getSuggestionsSkeleton',
        defs: {
            main: {
                type: 'query',
                description: 'Get a skeleton of suggested actors. Intended to be called and then hydrated through app.bsky.actor.getSuggestions',
                parameters: {
                    type: 'params',
                    properties: {
                        viewer: {
                            type: 'string',
                            format: 'did',
                            description: 'DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        },
                        relativeToDid: {
                            type: 'string',
                            format: 'did',
                            description: 'DID of the account to get suggestions relative to. If not provided, suggestions will be based on the viewer.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'actors'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            actors: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.unspecced.defs#skeletonSearchActor'
                                }
                            },
                            relativeToDid: {
                                type: 'string',
                                format: 'did',
                                description: 'DID of the account these suggestions are relative to. If this is returned undefined, suggestions are based on the viewer.'
                            },
                            recId: {
                                type: 'integer',
                                description: 'Snowflake for this recommendation, use when submitting recommendation events.'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetTaggedSuggestions: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getTaggedSuggestions',
        defs: {
            main: {
                type: 'query',
                description: 'Get a list of suggestions (feeds and users) tagged with categories',
                parameters: {
                    type: 'params',
                    properties: {}
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'suggestions'
                        ],
                        properties: {
                            suggestions: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.unspecced.getTaggedSuggestions#suggestion'
                                }
                            }
                        }
                    }
                }
            },
            suggestion: {
                type: 'object',
                required: [
                    'tag',
                    'subjectType',
                    'subject'
                ],
                properties: {
                    tag: {
                        type: 'string'
                    },
                    subjectType: {
                        type: 'string',
                        knownValues: [
                            'actor',
                            'feed'
                        ]
                    },
                    subject: {
                        type: 'string',
                        format: 'uri'
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetTrendingTopics: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getTrendingTopics',
        defs: {
            main: {
                type: 'query',
                description: 'Get a list of trending topics',
                parameters: {
                    type: 'params',
                    properties: {
                        viewer: {
                            type: 'string',
                            format: 'did',
                            description: 'DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 25,
                            default: 10
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'topics',
                            'suggested'
                        ],
                        properties: {
                            topics: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.unspecced.defs#trendingTopic'
                                }
                            },
                            suggested: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.unspecced.defs#trendingTopic'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyUnspeccedSearchActorsSkeleton: {
        lexicon: 1,
        id: 'app.bsky.unspecced.searchActorsSkeleton',
        defs: {
            main: {
                type: 'query',
                description: 'Backend Actors (profile) search, returns only skeleton.',
                parameters: {
                    type: 'params',
                    required: [
                        'q'
                    ],
                    properties: {
                        q: {
                            type: 'string',
                            description: 'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. For typeahead search, only simple term match is supported, not full syntax.'
                        },
                        viewer: {
                            type: 'string',
                            format: 'did',
                            description: 'DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.'
                        },
                        typeahead: {
                            type: 'boolean',
                            description: "If true, acts as fast/simple 'typeahead' query."
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 25
                        },
                        cursor: {
                            type: 'string',
                            description: 'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'actors'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            hitsTotal: {
                                type: 'integer',
                                description: 'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.'
                            },
                            actors: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.unspecced.defs#skeletonSearchActor'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'BadQueryString'
                    }
                ]
            }
        }
    },
    AppBskyUnspeccedSearchPostsSkeleton: {
        lexicon: 1,
        id: 'app.bsky.unspecced.searchPostsSkeleton',
        defs: {
            main: {
                type: 'query',
                description: 'Backend Posts search, returns only skeleton',
                parameters: {
                    type: 'params',
                    required: [
                        'q'
                    ],
                    properties: {
                        q: {
                            type: 'string',
                            description: 'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'
                        },
                        sort: {
                            type: 'string',
                            knownValues: [
                                'top',
                                'latest'
                            ],
                            default: 'latest',
                            description: 'Specifies the ranking order of results.'
                        },
                        since: {
                            type: 'string',
                            description: "Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD)."
                        },
                        until: {
                            type: 'string',
                            description: "Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD)."
                        },
                        mentions: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions.'
                        },
                        author: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'Filter to posts by the given account. Handles are resolved to DID before query-time.'
                        },
                        lang: {
                            type: 'string',
                            format: 'language',
                            description: 'Filter to posts in the given language. Expected to be based on post language field, though server may override language detection.'
                        },
                        domain: {
                            type: 'string',
                            description: 'Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization.'
                        },
                        url: {
                            type: 'string',
                            format: 'uri',
                            description: 'Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching.'
                        },
                        tag: {
                            type: 'array',
                            items: {
                                type: 'string',
                                maxLength: 640,
                                maxGraphemes: 64
                            },
                            description: "Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching."
                        },
                        viewer: {
                            type: 'string',
                            format: 'did',
                            description: "DID of the account making the request (not included for public/unauthenticated queries). Used for 'from:me' queries."
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 25
                        },
                        cursor: {
                            type: 'string',
                            description: 'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'posts'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            hitsTotal: {
                                type: 'integer',
                                description: 'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.'
                            },
                            posts: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.unspecced.defs#skeletonSearchPost'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'BadQueryString'
                    }
                ]
            }
        }
    },
    AppBskyUnspeccedSearchStarterPacksSkeleton: {
        lexicon: 1,
        id: 'app.bsky.unspecced.searchStarterPacksSkeleton',
        defs: {
            main: {
                type: 'query',
                description: 'Backend Starter Pack search, returns only skeleton.',
                parameters: {
                    type: 'params',
                    required: [
                        'q'
                    ],
                    properties: {
                        q: {
                            type: 'string',
                            description: 'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'
                        },
                        viewer: {
                            type: 'string',
                            format: 'did',
                            description: 'DID of the account making the request (not included for public/unauthenticated queries).'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 25
                        },
                        cursor: {
                            type: 'string',
                            description: 'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'starterPacks'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            hitsTotal: {
                                type: 'integer',
                                description: 'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.'
                            },
                            starterPacks: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.unspecced.defs#skeletonSearchStarterPack'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'BadQueryString'
                    }
                ]
            }
        }
    },
    AppBskyVideoDefs: {
        lexicon: 1,
        id: 'app.bsky.video.defs',
        defs: {
            jobStatus: {
                type: 'object',
                required: [
                    'jobId',
                    'did',
                    'state'
                ],
                properties: {
                    jobId: {
                        type: 'string'
                    },
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    state: {
                        type: 'string',
                        description: 'The state of the video processing job. All values not listed as a known value indicate that the job is in process.',
                        knownValues: [
                            'JOB_STATE_COMPLETED',
                            'JOB_STATE_FAILED'
                        ]
                    },
                    progress: {
                        type: 'integer',
                        minimum: 0,
                        maximum: 100,
                        description: 'Progress within the current processing state.'
                    },
                    blob: {
                        type: 'blob'
                    },
                    error: {
                        type: 'string'
                    },
                    message: {
                        type: 'string'
                    }
                }
            }
        }
    },
    AppBskyVideoGetJobStatus: {
        lexicon: 1,
        id: 'app.bsky.video.getJobStatus',
        defs: {
            main: {
                type: 'query',
                description: 'Get status details for a video processing job.',
                parameters: {
                    type: 'params',
                    required: [
                        'jobId'
                    ],
                    properties: {
                        jobId: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'jobStatus'
                        ],
                        properties: {
                            jobStatus: {
                                type: 'ref',
                                ref: 'lex:app.bsky.video.defs#jobStatus'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyVideoGetUploadLimits: {
        lexicon: 1,
        id: 'app.bsky.video.getUploadLimits',
        defs: {
            main: {
                type: 'query',
                description: 'Get video upload limits for the authenticated user.',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'canUpload'
                        ],
                        properties: {
                            canUpload: {
                                type: 'boolean'
                            },
                            remainingDailyVideos: {
                                type: 'integer'
                            },
                            remainingDailyBytes: {
                                type: 'integer'
                            },
                            message: {
                                type: 'string'
                            },
                            error: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyVideoUploadVideo: {
        lexicon: 1,
        id: 'app.bsky.video.uploadVideo',
        defs: {
            main: {
                type: 'procedure',
                description: 'Upload a video to be processed then stored on the PDS.',
                input: {
                    encoding: 'video/mp4'
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'jobStatus'
                        ],
                        properties: {
                            jobStatus: {
                                type: 'ref',
                                ref: 'lex:app.bsky.video.defs#jobStatus'
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyActorDeclaration: {
        lexicon: 1,
        id: 'chat.bsky.actor.declaration',
        defs: {
            main: {
                type: 'record',
                description: 'A declaration of a Bluesky chat account.',
                key: 'literal:self',
                record: {
                    type: 'object',
                    required: [
                        'allowIncoming'
                    ],
                    properties: {
                        allowIncoming: {
                            type: 'string',
                            knownValues: [
                                'all',
                                'none',
                                'following'
                            ]
                        }
                    }
                }
            }
        }
    },
    ChatBskyActorDefs: {
        lexicon: 1,
        id: 'chat.bsky.actor.defs',
        defs: {
            profileViewBasic: {
                type: 'object',
                required: [
                    'did',
                    'handle'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle'
                    },
                    displayName: {
                        type: 'string',
                        maxGraphemes: 64,
                        maxLength: 640
                    },
                    avatar: {
                        type: 'string',
                        format: 'uri'
                    },
                    associated: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileAssociated'
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#viewerState'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    chatDisabled: {
                        type: 'boolean',
                        description: 'Set to true when the actor cannot actively participate in converations'
                    }
                }
            }
        }
    },
    ChatBskyActorDeleteAccount: {
        lexicon: 1,
        id: 'chat.bsky.actor.deleteAccount',
        defs: {
            main: {
                type: 'procedure',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {}
                    }
                }
            }
        }
    },
    ChatBskyActorExportAccountData: {
        lexicon: 1,
        id: 'chat.bsky.actor.exportAccountData',
        defs: {
            main: {
                type: 'query',
                output: {
                    encoding: 'application/jsonl'
                }
            }
        }
    },
    ChatBskyConvoDefs: {
        lexicon: 1,
        id: 'chat.bsky.convo.defs',
        defs: {
            messageRef: {
                type: 'object',
                required: [
                    'did',
                    'messageId',
                    'convoId'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    convoId: {
                        type: 'string'
                    },
                    messageId: {
                        type: 'string'
                    }
                }
            },
            messageInput: {
                type: 'object',
                required: [
                    'text'
                ],
                properties: {
                    text: {
                        type: 'string',
                        maxLength: 10000,
                        maxGraphemes: 1000
                    },
                    facets: {
                        type: 'array',
                        description: 'Annotations of text (mentions, URLs, hashtags, etc)',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.richtext.facet'
                        }
                    },
                    embed: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.embed.record'
                        ]
                    }
                }
            },
            messageView: {
                type: 'object',
                required: [
                    'id',
                    'rev',
                    'text',
                    'sender',
                    'sentAt'
                ],
                properties: {
                    id: {
                        type: 'string'
                    },
                    rev: {
                        type: 'string'
                    },
                    text: {
                        type: 'string',
                        maxLength: 10000,
                        maxGraphemes: 1000
                    },
                    facets: {
                        type: 'array',
                        description: 'Annotations of text (mentions, URLs, hashtags, etc)',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.richtext.facet'
                        }
                    },
                    embed: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.embed.record#view'
                        ]
                    },
                    sender: {
                        type: 'ref',
                        ref: 'lex:chat.bsky.convo.defs#messageViewSender'
                    },
                    sentAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            deletedMessageView: {
                type: 'object',
                required: [
                    'id',
                    'rev',
                    'sender',
                    'sentAt'
                ],
                properties: {
                    id: {
                        type: 'string'
                    },
                    rev: {
                        type: 'string'
                    },
                    sender: {
                        type: 'ref',
                        ref: 'lex:chat.bsky.convo.defs#messageViewSender'
                    },
                    sentAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            messageViewSender: {
                type: 'object',
                required: [
                    'did'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    }
                }
            },
            convoView: {
                type: 'object',
                required: [
                    'id',
                    'rev',
                    'members',
                    'muted',
                    'unreadCount'
                ],
                properties: {
                    id: {
                        type: 'string'
                    },
                    rev: {
                        type: 'string'
                    },
                    members: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:chat.bsky.actor.defs#profileViewBasic'
                        }
                    },
                    lastMessage: {
                        type: 'union',
                        refs: [
                            'lex:chat.bsky.convo.defs#messageView',
                            'lex:chat.bsky.convo.defs#deletedMessageView'
                        ]
                    },
                    muted: {
                        type: 'boolean'
                    },
                    opened: {
                        type: 'boolean'
                    },
                    unreadCount: {
                        type: 'integer'
                    }
                }
            },
            logBeginConvo: {
                type: 'object',
                required: [
                    'rev',
                    'convoId'
                ],
                properties: {
                    rev: {
                        type: 'string'
                    },
                    convoId: {
                        type: 'string'
                    }
                }
            },
            logLeaveConvo: {
                type: 'object',
                required: [
                    'rev',
                    'convoId'
                ],
                properties: {
                    rev: {
                        type: 'string'
                    },
                    convoId: {
                        type: 'string'
                    }
                }
            },
            logCreateMessage: {
                type: 'object',
                required: [
                    'rev',
                    'convoId',
                    'message'
                ],
                properties: {
                    rev: {
                        type: 'string'
                    },
                    convoId: {
                        type: 'string'
                    },
                    message: {
                        type: 'union',
                        refs: [
                            'lex:chat.bsky.convo.defs#messageView',
                            'lex:chat.bsky.convo.defs#deletedMessageView'
                        ]
                    }
                }
            },
            logDeleteMessage: {
                type: 'object',
                required: [
                    'rev',
                    'convoId',
                    'message'
                ],
                properties: {
                    rev: {
                        type: 'string'
                    },
                    convoId: {
                        type: 'string'
                    },
                    message: {
                        type: 'union',
                        refs: [
                            'lex:chat.bsky.convo.defs#messageView',
                            'lex:chat.bsky.convo.defs#deletedMessageView'
                        ]
                    }
                }
            }
        }
    },
    ChatBskyConvoDeleteMessageForSelf: {
        lexicon: 1,
        id: 'chat.bsky.convo.deleteMessageForSelf',
        defs: {
            main: {
                type: 'procedure',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convoId',
                            'messageId'
                        ],
                        properties: {
                            convoId: {
                                type: 'string'
                            },
                            messageId: {
                                type: 'string'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:chat.bsky.convo.defs#deletedMessageView'
                    }
                }
            }
        }
    },
    ChatBskyConvoGetConvo: {
        lexicon: 1,
        id: 'chat.bsky.convo.getConvo',
        defs: {
            main: {
                type: 'query',
                parameters: {
                    type: 'params',
                    required: [
                        'convoId'
                    ],
                    properties: {
                        convoId: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convo'
                        ],
                        properties: {
                            convo: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.convo.defs#convoView'
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyConvoGetConvoForMembers: {
        lexicon: 1,
        id: 'chat.bsky.convo.getConvoForMembers',
        defs: {
            main: {
                type: 'query',
                parameters: {
                    type: 'params',
                    required: [
                        'members'
                    ],
                    properties: {
                        members: {
                            type: 'array',
                            minLength: 1,
                            maxLength: 10,
                            items: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convo'
                        ],
                        properties: {
                            convo: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.convo.defs#convoView'
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyConvoGetLog: {
        lexicon: 1,
        id: 'chat.bsky.convo.getLog',
        defs: {
            main: {
                type: 'query',
                parameters: {
                    type: 'params',
                    required: [],
                    properties: {
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'logs'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            logs: {
                                type: 'array',
                                items: {
                                    type: 'union',
                                    refs: [
                                        'lex:chat.bsky.convo.defs#logBeginConvo',
                                        'lex:chat.bsky.convo.defs#logLeaveConvo',
                                        'lex:chat.bsky.convo.defs#logCreateMessage',
                                        'lex:chat.bsky.convo.defs#logDeleteMessage'
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyConvoGetMessages: {
        lexicon: 1,
        id: 'chat.bsky.convo.getMessages',
        defs: {
            main: {
                type: 'query',
                parameters: {
                    type: 'params',
                    required: [
                        'convoId'
                    ],
                    properties: {
                        convoId: {
                            type: 'string'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'messages'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            messages: {
                                type: 'array',
                                items: {
                                    type: 'union',
                                    refs: [
                                        'lex:chat.bsky.convo.defs#messageView',
                                        'lex:chat.bsky.convo.defs#deletedMessageView'
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyConvoLeaveConvo: {
        lexicon: 1,
        id: 'chat.bsky.convo.leaveConvo',
        defs: {
            main: {
                type: 'procedure',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convoId'
                        ],
                        properties: {
                            convoId: {
                                type: 'string'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convoId',
                            'rev'
                        ],
                        properties: {
                            convoId: {
                                type: 'string'
                            },
                            rev: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyConvoListConvos: {
        lexicon: 1,
        id: 'chat.bsky.convo.listConvos',
        defs: {
            main: {
                type: 'query',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convos'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            convos: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:chat.bsky.convo.defs#convoView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyConvoMuteConvo: {
        lexicon: 1,
        id: 'chat.bsky.convo.muteConvo',
        defs: {
            main: {
                type: 'procedure',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convoId'
                        ],
                        properties: {
                            convoId: {
                                type: 'string'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convo'
                        ],
                        properties: {
                            convo: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.convo.defs#convoView'
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyConvoSendMessage: {
        lexicon: 1,
        id: 'chat.bsky.convo.sendMessage',
        defs: {
            main: {
                type: 'procedure',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convoId',
                            'message'
                        ],
                        properties: {
                            convoId: {
                                type: 'string'
                            },
                            message: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.convo.defs#messageInput'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:chat.bsky.convo.defs#messageView'
                    }
                }
            }
        }
    },
    ChatBskyConvoSendMessageBatch: {
        lexicon: 1,
        id: 'chat.bsky.convo.sendMessageBatch',
        defs: {
            main: {
                type: 'procedure',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'items'
                        ],
                        properties: {
                            items: {
                                type: 'array',
                                maxLength: 100,
                                items: {
                                    type: 'ref',
                                    ref: 'lex:chat.bsky.convo.sendMessageBatch#batchItem'
                                }
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'items'
                        ],
                        properties: {
                            items: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:chat.bsky.convo.defs#messageView'
                                }
                            }
                        }
                    }
                }
            },
            batchItem: {
                type: 'object',
                required: [
                    'convoId',
                    'message'
                ],
                properties: {
                    convoId: {
                        type: 'string'
                    },
                    message: {
                        type: 'ref',
                        ref: 'lex:chat.bsky.convo.defs#messageInput'
                    }
                }
            }
        }
    },
    ChatBskyConvoUnmuteConvo: {
        lexicon: 1,
        id: 'chat.bsky.convo.unmuteConvo',
        defs: {
            main: {
                type: 'procedure',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convoId'
                        ],
                        properties: {
                            convoId: {
                                type: 'string'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convo'
                        ],
                        properties: {
                            convo: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.convo.defs#convoView'
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyConvoUpdateRead: {
        lexicon: 1,
        id: 'chat.bsky.convo.updateRead',
        defs: {
            main: {
                type: 'procedure',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convoId'
                        ],
                        properties: {
                            convoId: {
                                type: 'string'
                            },
                            messageId: {
                                type: 'string'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convo'
                        ],
                        properties: {
                            convo: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.convo.defs#convoView'
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyModerationGetActorMetadata: {
        lexicon: 1,
        id: 'chat.bsky.moderation.getActorMetadata',
        defs: {
            main: {
                type: 'query',
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'did'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'day',
                            'month',
                            'all'
                        ],
                        properties: {
                            day: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.moderation.getActorMetadata#metadata'
                            },
                            month: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.moderation.getActorMetadata#metadata'
                            },
                            all: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.moderation.getActorMetadata#metadata'
                            }
                        }
                    }
                }
            },
            metadata: {
                type: 'object',
                required: [
                    'messagesSent',
                    'messagesReceived',
                    'convos',
                    'convosStarted'
                ],
                properties: {
                    messagesSent: {
                        type: 'integer'
                    },
                    messagesReceived: {
                        type: 'integer'
                    },
                    convos: {
                        type: 'integer'
                    },
                    convosStarted: {
                        type: 'integer'
                    }
                }
            }
        }
    },
    ChatBskyModerationGetMessageContext: {
        lexicon: 1,
        id: 'chat.bsky.moderation.getMessageContext',
        defs: {
            main: {
                type: 'query',
                parameters: {
                    type: 'params',
                    required: [
                        'messageId'
                    ],
                    properties: {
                        convoId: {
                            type: 'string',
                            description: 'Conversation that the message is from. NOTE: this field will eventually be required.'
                        },
                        messageId: {
                            type: 'string'
                        },
                        before: {
                            type: 'integer',
                            default: 5
                        },
                        after: {
                            type: 'integer',
                            default: 5
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'messages'
                        ],
                        properties: {
                            messages: {
                                type: 'array',
                                items: {
                                    type: 'union',
                                    refs: [
                                        'lex:chat.bsky.convo.defs#messageView',
                                        'lex:chat.bsky.convo.defs#deletedMessageView'
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyModerationUpdateActorAccess: {
        lexicon: 1,
        id: 'chat.bsky.moderation.updateActorAccess',
        defs: {
            main: {
                type: 'procedure',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'actor',
                            'allowAccess'
                        ],
                        properties: {
                            actor: {
                                type: 'string',
                                format: 'did'
                            },
                            allowAccess: {
                                type: 'boolean'
                            },
                            ref: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneCommunicationCreateTemplate: {
        lexicon: 1,
        id: 'tools.ozone.communication.createTemplate',
        defs: {
            main: {
                type: 'procedure',
                description: 'Administrative action to create a new, re-usable communication (email for now) template.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'subject',
                            'contentMarkdown',
                            'name'
                        ],
                        properties: {
                            name: {
                                type: 'string',
                                description: 'Name of the template.'
                            },
                            contentMarkdown: {
                                type: 'string',
                                description: 'Content of the template, markdown supported, can contain variable placeholders.'
                            },
                            subject: {
                                type: 'string',
                                description: 'Subject of the message, used in emails.'
                            },
                            lang: {
                                type: 'string',
                                format: 'language',
                                description: 'Message language.'
                            },
                            createdBy: {
                                type: 'string',
                                format: 'did',
                                description: 'DID of the user who is creating the template.'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.communication.defs#templateView'
                    }
                },
                errors: [
                    {
                        name: 'DuplicateTemplateName'
                    }
                ]
            }
        }
    },
    ToolsOzoneCommunicationDefs: {
        lexicon: 1,
        id: 'tools.ozone.communication.defs',
        defs: {
            templateView: {
                type: 'object',
                required: [
                    'id',
                    'name',
                    'contentMarkdown',
                    'disabled',
                    'lastUpdatedBy',
                    'createdAt',
                    'updatedAt'
                ],
                properties: {
                    id: {
                        type: 'string'
                    },
                    name: {
                        type: 'string',
                        description: 'Name of the template.'
                    },
                    subject: {
                        type: 'string',
                        description: 'Content of the template, can contain markdown and variable placeholders.'
                    },
                    contentMarkdown: {
                        type: 'string',
                        description: 'Subject of the message, used in emails.'
                    },
                    disabled: {
                        type: 'boolean'
                    },
                    lang: {
                        type: 'string',
                        format: 'language',
                        description: 'Message language.'
                    },
                    lastUpdatedBy: {
                        type: 'string',
                        format: 'did',
                        description: 'DID of the user who last updated the template.'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    updatedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            }
        }
    },
    ToolsOzoneCommunicationDeleteTemplate: {
        lexicon: 1,
        id: 'tools.ozone.communication.deleteTemplate',
        defs: {
            main: {
                type: 'procedure',
                description: 'Delete a communication template.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'id'
                        ],
                        properties: {
                            id: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneCommunicationListTemplates: {
        lexicon: 1,
        id: 'tools.ozone.communication.listTemplates',
        defs: {
            main: {
                type: 'query',
                description: 'Get list of all communication templates.',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'communicationTemplates'
                        ],
                        properties: {
                            communicationTemplates: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.communication.defs#templateView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneCommunicationUpdateTemplate: {
        lexicon: 1,
        id: 'tools.ozone.communication.updateTemplate',
        defs: {
            main: {
                type: 'procedure',
                description: 'Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'id'
                        ],
                        properties: {
                            id: {
                                type: 'string',
                                description: 'ID of the template to be updated.'
                            },
                            name: {
                                type: 'string',
                                description: 'Name of the template.'
                            },
                            lang: {
                                type: 'string',
                                format: 'language',
                                description: 'Message language.'
                            },
                            contentMarkdown: {
                                type: 'string',
                                description: 'Content of the template, markdown supported, can contain variable placeholders.'
                            },
                            subject: {
                                type: 'string',
                                description: 'Subject of the message, used in emails.'
                            },
                            updatedBy: {
                                type: 'string',
                                format: 'did',
                                description: 'DID of the user who is updating the template.'
                            },
                            disabled: {
                                type: 'boolean'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.communication.defs#templateView'
                    }
                },
                errors: [
                    {
                        name: 'DuplicateTemplateName'
                    }
                ]
            }
        }
    },
    ToolsOzoneModerationDefs: {
        lexicon: 1,
        id: 'tools.ozone.moderation.defs',
        defs: {
            modEventView: {
                type: 'object',
                required: [
                    'id',
                    'event',
                    'subject',
                    'subjectBlobCids',
                    'createdBy',
                    'createdAt'
                ],
                properties: {
                    id: {
                        type: 'integer'
                    },
                    event: {
                        type: 'union',
                        refs: [
                            'lex:tools.ozone.moderation.defs#modEventTakedown',
                            'lex:tools.ozone.moderation.defs#modEventReverseTakedown',
                            'lex:tools.ozone.moderation.defs#modEventComment',
                            'lex:tools.ozone.moderation.defs#modEventReport',
                            'lex:tools.ozone.moderation.defs#modEventLabel',
                            'lex:tools.ozone.moderation.defs#modEventAcknowledge',
                            'lex:tools.ozone.moderation.defs#modEventEscalate',
                            'lex:tools.ozone.moderation.defs#modEventMute',
                            'lex:tools.ozone.moderation.defs#modEventUnmute',
                            'lex:tools.ozone.moderation.defs#modEventMuteReporter',
                            'lex:tools.ozone.moderation.defs#modEventUnmuteReporter',
                            'lex:tools.ozone.moderation.defs#modEventEmail',
                            'lex:tools.ozone.moderation.defs#modEventResolveAppeal',
                            'lex:tools.ozone.moderation.defs#modEventDivert',
                            'lex:tools.ozone.moderation.defs#modEventTag',
                            'lex:tools.ozone.moderation.defs#accountEvent',
                            'lex:tools.ozone.moderation.defs#identityEvent',
                            'lex:tools.ozone.moderation.defs#recordEvent'
                        ]
                    },
                    subject: {
                        type: 'union',
                        refs: [
                            'lex:com.atproto.admin.defs#repoRef',
                            'lex:com.atproto.repo.strongRef',
                            'lex:chat.bsky.convo.defs#messageRef'
                        ]
                    },
                    subjectBlobCids: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    },
                    createdBy: {
                        type: 'string',
                        format: 'did'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    creatorHandle: {
                        type: 'string'
                    },
                    subjectHandle: {
                        type: 'string'
                    }
                }
            },
            modEventViewDetail: {
                type: 'object',
                required: [
                    'id',
                    'event',
                    'subject',
                    'subjectBlobs',
                    'createdBy',
                    'createdAt'
                ],
                properties: {
                    id: {
                        type: 'integer'
                    },
                    event: {
                        type: 'union',
                        refs: [
                            'lex:tools.ozone.moderation.defs#modEventTakedown',
                            'lex:tools.ozone.moderation.defs#modEventReverseTakedown',
                            'lex:tools.ozone.moderation.defs#modEventComment',
                            'lex:tools.ozone.moderation.defs#modEventReport',
                            'lex:tools.ozone.moderation.defs#modEventLabel',
                            'lex:tools.ozone.moderation.defs#modEventAcknowledge',
                            'lex:tools.ozone.moderation.defs#modEventEscalate',
                            'lex:tools.ozone.moderation.defs#modEventMute',
                            'lex:tools.ozone.moderation.defs#modEventUnmute',
                            'lex:tools.ozone.moderation.defs#modEventMuteReporter',
                            'lex:tools.ozone.moderation.defs#modEventUnmuteReporter',
                            'lex:tools.ozone.moderation.defs#modEventEmail',
                            'lex:tools.ozone.moderation.defs#modEventResolveAppeal',
                            'lex:tools.ozone.moderation.defs#modEventDivert',
                            'lex:tools.ozone.moderation.defs#modEventTag',
                            'lex:tools.ozone.moderation.defs#accountEvent',
                            'lex:tools.ozone.moderation.defs#identityEvent',
                            'lex:tools.ozone.moderation.defs#recordEvent'
                        ]
                    },
                    subject: {
                        type: 'union',
                        refs: [
                            'lex:tools.ozone.moderation.defs#repoView',
                            'lex:tools.ozone.moderation.defs#repoViewNotFound',
                            'lex:tools.ozone.moderation.defs#recordView',
                            'lex:tools.ozone.moderation.defs#recordViewNotFound'
                        ]
                    },
                    subjectBlobs: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:tools.ozone.moderation.defs#blobView'
                        }
                    },
                    createdBy: {
                        type: 'string',
                        format: 'did'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            subjectStatusView: {
                type: 'object',
                required: [
                    'id',
                    'subject',
                    'createdAt',
                    'updatedAt',
                    'reviewState'
                ],
                properties: {
                    id: {
                        type: 'integer'
                    },
                    subject: {
                        type: 'union',
                        refs: [
                            'lex:com.atproto.admin.defs#repoRef',
                            'lex:com.atproto.repo.strongRef'
                        ]
                    },
                    hosting: {
                        type: 'union',
                        refs: [
                            'lex:tools.ozone.moderation.defs#accountHosting',
                            'lex:tools.ozone.moderation.defs#recordHosting'
                        ]
                    },
                    subjectBlobCids: {
                        type: 'array',
                        items: {
                            type: 'string',
                            format: 'cid'
                        }
                    },
                    subjectRepoHandle: {
                        type: 'string'
                    },
                    updatedAt: {
                        type: 'string',
                        format: 'datetime',
                        description: 'Timestamp referencing when the last update was made to the moderation status of the subject'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime',
                        description: 'Timestamp referencing the first moderation status impacting event was emitted on the subject'
                    },
                    reviewState: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#subjectReviewState'
                    },
                    comment: {
                        type: 'string',
                        description: 'Sticky comment on the subject.'
                    },
                    muteUntil: {
                        type: 'string',
                        format: 'datetime'
                    },
                    muteReportingUntil: {
                        type: 'string',
                        format: 'datetime'
                    },
                    lastReviewedBy: {
                        type: 'string',
                        format: 'did'
                    },
                    lastReviewedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    lastReportedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    lastAppealedAt: {
                        type: 'string',
                        format: 'datetime',
                        description: 'Timestamp referencing when the author of the subject appealed a moderation action'
                    },
                    takendown: {
                        type: 'boolean'
                    },
                    appealed: {
                        type: 'boolean',
                        description: 'True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators.'
                    },
                    suspendUntil: {
                        type: 'string',
                        format: 'datetime'
                    },
                    tags: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            subjectReviewState: {
                type: 'string',
                knownValues: [
                    'lex:tools.ozone.moderation.defs#reviewOpen',
                    'lex:tools.ozone.moderation.defs#reviewEscalated',
                    'lex:tools.ozone.moderation.defs#reviewClosed',
                    'lex:tools.ozone.moderation.defs#reviewNone'
                ]
            },
            reviewOpen: {
                type: 'token',
                description: 'Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator'
            },
            reviewEscalated: {
                type: 'token',
                description: 'Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator'
            },
            reviewClosed: {
                type: 'token',
                description: 'Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator'
            },
            reviewNone: {
                type: 'token',
                description: 'Moderator review status of a subject: Unnecessary. Indicates that the subject does not need a review at the moment but there is probably some moderation related metadata available for it'
            },
            modEventTakedown: {
                type: 'object',
                description: 'Take down a subject permanently or temporarily',
                properties: {
                    comment: {
                        type: 'string'
                    },
                    durationInHours: {
                        type: 'integer',
                        description: 'Indicates how long the takedown should be in effect before automatically expiring.'
                    },
                    acknowledgeAccountSubjects: {
                        type: 'boolean',
                        description: 'If true, all other reports on content authored by this account will be resolved (acknowledged).'
                    },
                    policies: {
                        type: 'array',
                        maxLength: 5,
                        items: {
                            type: 'string'
                        },
                        description: 'Names/Keywords of the policies that drove the decision.'
                    }
                }
            },
            modEventReverseTakedown: {
                type: 'object',
                description: 'Revert take down action on a subject',
                properties: {
                    comment: {
                        type: 'string',
                        description: 'Describe reasoning behind the reversal.'
                    }
                }
            },
            modEventResolveAppeal: {
                type: 'object',
                description: 'Resolve appeal on a subject',
                properties: {
                    comment: {
                        type: 'string',
                        description: 'Describe resolution.'
                    }
                }
            },
            modEventComment: {
                type: 'object',
                description: 'Add a comment to a subject',
                required: [
                    'comment'
                ],
                properties: {
                    comment: {
                        type: 'string'
                    },
                    sticky: {
                        type: 'boolean',
                        description: 'Make the comment persistent on the subject'
                    }
                }
            },
            modEventReport: {
                type: 'object',
                description: 'Report a subject',
                required: [
                    'reportType'
                ],
                properties: {
                    comment: {
                        type: 'string'
                    },
                    isReporterMuted: {
                        type: 'boolean',
                        description: "Set to true if the reporter was muted from reporting at the time of the event. These reports won't impact the reviewState of the subject."
                    },
                    reportType: {
                        type: 'ref',
                        ref: 'lex:com.atproto.moderation.defs#reasonType'
                    }
                }
            },
            modEventLabel: {
                type: 'object',
                description: 'Apply/Negate labels on a subject',
                required: [
                    'createLabelVals',
                    'negateLabelVals'
                ],
                properties: {
                    comment: {
                        type: 'string'
                    },
                    createLabelVals: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    },
                    negateLabelVals: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            modEventAcknowledge: {
                type: 'object',
                properties: {
                    comment: {
                        type: 'string'
                    },
                    acknowledgeAccountSubjects: {
                        type: 'boolean',
                        description: 'If true, all other reports on content authored by this account will be resolved (acknowledged).'
                    }
                }
            },
            modEventEscalate: {
                type: 'object',
                properties: {
                    comment: {
                        type: 'string'
                    }
                }
            },
            modEventMute: {
                type: 'object',
                description: 'Mute incoming reports on a subject',
                required: [
                    'durationInHours'
                ],
                properties: {
                    comment: {
                        type: 'string'
                    },
                    durationInHours: {
                        type: 'integer',
                        description: 'Indicates how long the subject should remain muted.'
                    }
                }
            },
            modEventUnmute: {
                type: 'object',
                description: 'Unmute action on a subject',
                properties: {
                    comment: {
                        type: 'string',
                        description: 'Describe reasoning behind the reversal.'
                    }
                }
            },
            modEventMuteReporter: {
                type: 'object',
                description: 'Mute incoming reports from an account',
                properties: {
                    comment: {
                        type: 'string'
                    },
                    durationInHours: {
                        type: 'integer',
                        description: 'Indicates how long the account should remain muted. Falsy value here means a permanent mute.'
                    }
                }
            },
            modEventUnmuteReporter: {
                type: 'object',
                description: 'Unmute incoming reports from an account',
                properties: {
                    comment: {
                        type: 'string',
                        description: 'Describe reasoning behind the reversal.'
                    }
                }
            },
            modEventEmail: {
                type: 'object',
                description: 'Keep a log of outgoing email to a user',
                required: [
                    'subjectLine'
                ],
                properties: {
                    subjectLine: {
                        type: 'string',
                        description: 'The subject line of the email sent to the user.'
                    },
                    content: {
                        type: 'string',
                        description: 'The content of the email sent to the user.'
                    },
                    comment: {
                        type: 'string',
                        description: 'Additional comment about the outgoing comm.'
                    }
                }
            },
            modEventDivert: {
                type: 'object',
                description: "Divert a record's blobs to a 3rd party service for further scanning/tagging",
                properties: {
                    comment: {
                        type: 'string'
                    }
                }
            },
            modEventTag: {
                type: 'object',
                description: 'Add/Remove a tag on a subject',
                required: [
                    'add',
                    'remove'
                ],
                properties: {
                    add: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        description: "Tags to be added to the subject. If already exists, won't be duplicated."
                    },
                    remove: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        description: "Tags to be removed to the subject. Ignores a tag If it doesn't exist, won't be duplicated."
                    },
                    comment: {
                        type: 'string',
                        description: 'Additional comment about added/removed tags.'
                    }
                }
            },
            accountEvent: {
                type: 'object',
                description: 'Logs account status related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.',
                required: [
                    'timestamp',
                    'active'
                ],
                properties: {
                    comment: {
                        type: 'string'
                    },
                    active: {
                        type: 'boolean',
                        description: 'Indicates that the account has a repository which can be fetched from the host that emitted this event.'
                    },
                    status: {
                        type: 'string',
                        knownValues: [
                            'unknown',
                            'deactivated',
                            'deleted',
                            'takendown',
                            'suspended',
                            'tombstoned'
                        ]
                    },
                    timestamp: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            identityEvent: {
                type: 'object',
                description: 'Logs identity related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.',
                required: [
                    'timestamp'
                ],
                properties: {
                    comment: {
                        type: 'string'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle'
                    },
                    pdsHost: {
                        type: 'string',
                        format: 'uri'
                    },
                    tombstone: {
                        type: 'boolean'
                    },
                    timestamp: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            recordEvent: {
                type: 'object',
                description: 'Logs lifecycle event on a record subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.',
                required: [
                    'timestamp',
                    'op'
                ],
                properties: {
                    comment: {
                        type: 'string'
                    },
                    op: {
                        type: 'string',
                        knownValues: [
                            'create',
                            'update',
                            'delete'
                        ]
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    timestamp: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            repoView: {
                type: 'object',
                required: [
                    'did',
                    'handle',
                    'relatedRecords',
                    'indexedAt',
                    'moderation'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle'
                    },
                    email: {
                        type: 'string'
                    },
                    relatedRecords: {
                        type: 'array',
                        items: {
                            type: 'unknown'
                        }
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    moderation: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#moderation'
                    },
                    invitedBy: {
                        type: 'ref',
                        ref: 'lex:com.atproto.server.defs#inviteCode'
                    },
                    invitesDisabled: {
                        type: 'boolean'
                    },
                    inviteNote: {
                        type: 'string'
                    },
                    deactivatedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    threatSignatures: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.admin.defs#threatSignature'
                        }
                    }
                }
            },
            repoViewDetail: {
                type: 'object',
                required: [
                    'did',
                    'handle',
                    'relatedRecords',
                    'indexedAt',
                    'moderation'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle'
                    },
                    email: {
                        type: 'string'
                    },
                    relatedRecords: {
                        type: 'array',
                        items: {
                            type: 'unknown'
                        }
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    moderation: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#moderationDetail'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    invitedBy: {
                        type: 'ref',
                        ref: 'lex:com.atproto.server.defs#inviteCode'
                    },
                    invites: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.server.defs#inviteCode'
                        }
                    },
                    invitesDisabled: {
                        type: 'boolean'
                    },
                    inviteNote: {
                        type: 'string'
                    },
                    emailConfirmedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    deactivatedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    threatSignatures: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.admin.defs#threatSignature'
                        }
                    }
                }
            },
            repoViewNotFound: {
                type: 'object',
                required: [
                    'did'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    }
                }
            },
            recordView: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'value',
                    'blobCids',
                    'indexedAt',
                    'moderation',
                    'repo'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    value: {
                        type: 'unknown'
                    },
                    blobCids: {
                        type: 'array',
                        items: {
                            type: 'string',
                            format: 'cid'
                        }
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    moderation: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#moderation'
                    },
                    repo: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#repoView'
                    }
                }
            },
            recordViewDetail: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'value',
                    'blobs',
                    'indexedAt',
                    'moderation',
                    'repo'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    value: {
                        type: 'unknown'
                    },
                    blobs: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:tools.ozone.moderation.defs#blobView'
                        }
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    moderation: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#moderationDetail'
                    },
                    repo: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#repoView'
                    }
                }
            },
            recordViewNotFound: {
                type: 'object',
                required: [
                    'uri'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            },
            moderation: {
                type: 'object',
                properties: {
                    subjectStatus: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#subjectStatusView'
                    }
                }
            },
            moderationDetail: {
                type: 'object',
                properties: {
                    subjectStatus: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#subjectStatusView'
                    }
                }
            },
            blobView: {
                type: 'object',
                required: [
                    'cid',
                    'mimeType',
                    'size',
                    'createdAt'
                ],
                properties: {
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    mimeType: {
                        type: 'string'
                    },
                    size: {
                        type: 'integer'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    details: {
                        type: 'union',
                        refs: [
                            'lex:tools.ozone.moderation.defs#imageDetails',
                            'lex:tools.ozone.moderation.defs#videoDetails'
                        ]
                    },
                    moderation: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#moderation'
                    }
                }
            },
            imageDetails: {
                type: 'object',
                required: [
                    'width',
                    'height'
                ],
                properties: {
                    width: {
                        type: 'integer'
                    },
                    height: {
                        type: 'integer'
                    }
                }
            },
            videoDetails: {
                type: 'object',
                required: [
                    'width',
                    'height',
                    'length'
                ],
                properties: {
                    width: {
                        type: 'integer'
                    },
                    height: {
                        type: 'integer'
                    },
                    length: {
                        type: 'integer'
                    }
                }
            },
            accountHosting: {
                type: 'object',
                required: [
                    'status'
                ],
                properties: {
                    status: {
                        type: 'string',
                        knownValues: [
                            'takendown',
                            'suspended',
                            'deleted',
                            'deactivated',
                            'unknown'
                        ]
                    },
                    updatedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    deletedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    deactivatedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    reactivatedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            recordHosting: {
                type: 'object',
                required: [
                    'status'
                ],
                properties: {
                    status: {
                        type: 'string',
                        knownValues: [
                            'deleted',
                            'unknown'
                        ]
                    },
                    updatedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    deletedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            }
        }
    },
    ToolsOzoneModerationEmitEvent: {
        lexicon: 1,
        id: 'tools.ozone.moderation.emitEvent',
        defs: {
            main: {
                type: 'procedure',
                description: 'Take a moderation action on an actor.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'event',
                            'subject',
                            'createdBy'
                        ],
                        properties: {
                            event: {
                                type: 'union',
                                refs: [
                                    'lex:tools.ozone.moderation.defs#modEventTakedown',
                                    'lex:tools.ozone.moderation.defs#modEventAcknowledge',
                                    'lex:tools.ozone.moderation.defs#modEventEscalate',
                                    'lex:tools.ozone.moderation.defs#modEventComment',
                                    'lex:tools.ozone.moderation.defs#modEventLabel',
                                    'lex:tools.ozone.moderation.defs#modEventReport',
                                    'lex:tools.ozone.moderation.defs#modEventMute',
                                    'lex:tools.ozone.moderation.defs#modEventUnmute',
                                    'lex:tools.ozone.moderation.defs#modEventMuteReporter',
                                    'lex:tools.ozone.moderation.defs#modEventUnmuteReporter',
                                    'lex:tools.ozone.moderation.defs#modEventReverseTakedown',
                                    'lex:tools.ozone.moderation.defs#modEventResolveAppeal',
                                    'lex:tools.ozone.moderation.defs#modEventEmail',
                                    'lex:tools.ozone.moderation.defs#modEventTag',
                                    'lex:tools.ozone.moderation.defs#accountEvent',
                                    'lex:tools.ozone.moderation.defs#identityEvent',
                                    'lex:tools.ozone.moderation.defs#recordEvent'
                                ]
                            },
                            subject: {
                                type: 'union',
                                refs: [
                                    'lex:com.atproto.admin.defs#repoRef',
                                    'lex:com.atproto.repo.strongRef'
                                ]
                            },
                            subjectBlobCids: {
                                type: 'array',
                                items: {
                                    type: 'string',
                                    format: 'cid'
                                }
                            },
                            createdBy: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#modEventView'
                    }
                },
                errors: [
                    {
                        name: 'SubjectHasAction'
                    }
                ]
            }
        }
    },
    ToolsOzoneModerationGetEvent: {
        lexicon: 1,
        id: 'tools.ozone.moderation.getEvent',
        defs: {
            main: {
                type: 'query',
                description: 'Get details about a moderation event.',
                parameters: {
                    type: 'params',
                    required: [
                        'id'
                    ],
                    properties: {
                        id: {
                            type: 'integer'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#modEventViewDetail'
                    }
                }
            }
        }
    },
    ToolsOzoneModerationGetRecord: {
        lexicon: 1,
        id: 'tools.ozone.moderation.getRecord',
        defs: {
            main: {
                type: 'query',
                description: 'Get details about a record.',
                parameters: {
                    type: 'params',
                    required: [
                        'uri'
                    ],
                    properties: {
                        uri: {
                            type: 'string',
                            format: 'at-uri'
                        },
                        cid: {
                            type: 'string',
                            format: 'cid'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#recordViewDetail'
                    }
                },
                errors: [
                    {
                        name: 'RecordNotFound'
                    }
                ]
            }
        }
    },
    ToolsOzoneModerationGetRecords: {
        lexicon: 1,
        id: 'tools.ozone.moderation.getRecords',
        defs: {
            main: {
                type: 'query',
                description: 'Get details about some records.',
                parameters: {
                    type: 'params',
                    required: [
                        'uris'
                    ],
                    properties: {
                        uris: {
                            type: 'array',
                            maxLength: 100,
                            items: {
                                type: 'string',
                                format: 'at-uri'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'records'
                        ],
                        properties: {
                            records: {
                                type: 'array',
                                items: {
                                    type: 'union',
                                    refs: [
                                        'lex:tools.ozone.moderation.defs#recordViewDetail',
                                        'lex:tools.ozone.moderation.defs#recordViewNotFound'
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneModerationGetRepo: {
        lexicon: 1,
        id: 'tools.ozone.moderation.getRepo',
        defs: {
            main: {
                type: 'query',
                description: 'Get details about a repository.',
                parameters: {
                    type: 'params',
                    required: [
                        'did'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#repoViewDetail'
                    }
                },
                errors: [
                    {
                        name: 'RepoNotFound'
                    }
                ]
            }
        }
    },
    ToolsOzoneModerationGetRepos: {
        lexicon: 1,
        id: 'tools.ozone.moderation.getRepos',
        defs: {
            main: {
                type: 'query',
                description: 'Get details about some repositories.',
                parameters: {
                    type: 'params',
                    required: [
                        'dids'
                    ],
                    properties: {
                        dids: {
                            type: 'array',
                            maxLength: 100,
                            items: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'repos'
                        ],
                        properties: {
                            repos: {
                                type: 'array',
                                items: {
                                    type: 'union',
                                    refs: [
                                        'lex:tools.ozone.moderation.defs#repoViewDetail',
                                        'lex:tools.ozone.moderation.defs#repoViewNotFound'
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneModerationQueryEvents: {
        lexicon: 1,
        id: 'tools.ozone.moderation.queryEvents',
        defs: {
            main: {
                type: 'query',
                description: 'List moderation events related to a subject.',
                parameters: {
                    type: 'params',
                    properties: {
                        types: {
                            type: 'array',
                            items: {
                                type: 'string'
                            },
                            description: 'The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent<name>) to filter by. If not specified, all events are returned.'
                        },
                        createdBy: {
                            type: 'string',
                            format: 'did'
                        },
                        sortDirection: {
                            type: 'string',
                            default: 'desc',
                            enum: [
                                'asc',
                                'desc'
                            ],
                            description: 'Sort direction for the events. Defaults to descending order of created at timestamp.'
                        },
                        createdAfter: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Retrieve events created after a given timestamp'
                        },
                        createdBefore: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Retrieve events created before a given timestamp'
                        },
                        subject: {
                            type: 'string',
                            format: 'uri'
                        },
                        collections: {
                            type: 'array',
                            maxLength: 20,
                            description: "If specified, only events where the subject belongs to the given collections will be returned. When subjectType is set to 'account', this will be ignored.",
                            items: {
                                type: 'string',
                                format: 'nsid'
                            }
                        },
                        subjectType: {
                            type: 'string',
                            description: "If specified, only events where the subject is of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.",
                            knownValues: [
                                'account',
                                'record'
                            ]
                        },
                        includeAllUserRecords: {
                            type: 'boolean',
                            default: false,
                            description: "If true, events on all record types (posts, lists, profile etc.) or records from given 'collections' param, owned by the did are returned."
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        hasComment: {
                            type: 'boolean',
                            description: 'If true, only events with comments are returned'
                        },
                        comment: {
                            type: 'string',
                            description: 'If specified, only events with comments containing the keyword are returned. Apply || separator to use multiple keywords and match using OR condition.'
                        },
                        addedLabels: {
                            type: 'array',
                            items: {
                                type: 'string'
                            },
                            description: 'If specified, only events where all of these labels were added are returned'
                        },
                        removedLabels: {
                            type: 'array',
                            items: {
                                type: 'string'
                            },
                            description: 'If specified, only events where all of these labels were removed are returned'
                        },
                        addedTags: {
                            type: 'array',
                            items: {
                                type: 'string'
                            },
                            description: 'If specified, only events where all of these tags were added are returned'
                        },
                        removedTags: {
                            type: 'array',
                            items: {
                                type: 'string'
                            },
                            description: 'If specified, only events where all of these tags were removed are returned'
                        },
                        reportTypes: {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        policies: {
                            type: 'array',
                            items: {
                                type: 'string',
                                description: 'If specified, only events where the action policies match any of the given policies are returned'
                            }
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'events'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            events: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.moderation.defs#modEventView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneModerationQueryStatuses: {
        lexicon: 1,
        id: 'tools.ozone.moderation.queryStatuses',
        defs: {
            main: {
                type: 'query',
                description: 'View moderation statuses of subjects (record or repo).',
                parameters: {
                    type: 'params',
                    properties: {
                        queueCount: {
                            type: 'integer',
                            description: 'Number of queues being used by moderators. Subjects will be split among all queues.'
                        },
                        queueIndex: {
                            type: 'integer',
                            description: 'Index of the queue to fetch subjects from. Works only when queueCount value is specified.'
                        },
                        queueSeed: {
                            type: 'string',
                            description: 'A seeder to shuffle/balance the queue items.'
                        },
                        includeAllUserRecords: {
                            type: 'boolean',
                            description: "All subjects, or subjects from given 'collections' param, belonging to the account specified in the 'subject' param will be returned."
                        },
                        subject: {
                            type: 'string',
                            format: 'uri',
                            description: 'The subject to get the status for.'
                        },
                        comment: {
                            type: 'string',
                            description: 'Search subjects by keyword from comments'
                        },
                        reportedAfter: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Search subjects reported after a given timestamp'
                        },
                        reportedBefore: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Search subjects reported before a given timestamp'
                        },
                        reviewedAfter: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Search subjects reviewed after a given timestamp'
                        },
                        hostingDeletedAfter: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Search subjects where the associated record/account was deleted after a given timestamp'
                        },
                        hostingDeletedBefore: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Search subjects where the associated record/account was deleted before a given timestamp'
                        },
                        hostingUpdatedAfter: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Search subjects where the associated record/account was updated after a given timestamp'
                        },
                        hostingUpdatedBefore: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Search subjects where the associated record/account was updated before a given timestamp'
                        },
                        hostingStatuses: {
                            type: 'array',
                            items: {
                                type: 'string'
                            },
                            description: 'Search subjects by the status of the associated record/account'
                        },
                        reviewedBefore: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Search subjects reviewed before a given timestamp'
                        },
                        includeMuted: {
                            type: 'boolean',
                            description: "By default, we don't include muted subjects in the results. Set this to true to include them."
                        },
                        onlyMuted: {
                            type: 'boolean',
                            description: 'When set to true, only muted subjects and reporters will be returned.'
                        },
                        reviewState: {
                            type: 'string',
                            description: 'Specify when fetching subjects in a certain state'
                        },
                        ignoreSubjects: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'uri'
                            }
                        },
                        lastReviewedBy: {
                            type: 'string',
                            format: 'did',
                            description: 'Get all subject statuses that were reviewed by a specific moderator'
                        },
                        sortField: {
                            type: 'string',
                            default: 'lastReportedAt',
                            enum: [
                                'lastReviewedAt',
                                'lastReportedAt'
                            ]
                        },
                        sortDirection: {
                            type: 'string',
                            default: 'desc',
                            enum: [
                                'asc',
                                'desc'
                            ]
                        },
                        takendown: {
                            type: 'boolean',
                            description: 'Get subjects that were taken down'
                        },
                        appealed: {
                            type: 'boolean',
                            description: 'Get subjects in unresolved appealed status'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        tags: {
                            type: 'array',
                            maxLength: 25,
                            items: {
                                type: 'string',
                                description: 'Items in this array are applied with OR filters. To apply AND filter, put all tags in the same string and separate using && characters'
                            }
                        },
                        excludeTags: {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        cursor: {
                            type: 'string'
                        },
                        collections: {
                            type: 'array',
                            maxLength: 20,
                            description: "If specified, subjects belonging to the given collections will be returned. When subjectType is set to 'account', this will be ignored.",
                            items: {
                                type: 'string',
                                format: 'nsid'
                            }
                        },
                        subjectType: {
                            type: 'string',
                            description: "If specified, subjects of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.",
                            knownValues: [
                                'account',
                                'record'
                            ]
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'subjectStatuses'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            subjectStatuses: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.moderation.defs#subjectStatusView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneModerationSearchRepos: {
        lexicon: 1,
        id: 'tools.ozone.moderation.searchRepos',
        defs: {
            main: {
                type: 'query',
                description: 'Find repositories based on a search term.',
                parameters: {
                    type: 'params',
                    properties: {
                        term: {
                            type: 'string',
                            description: "DEPRECATED: use 'q' instead"
                        },
                        q: {
                            type: 'string'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'repos'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            repos: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.moderation.defs#repoView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneServerGetConfig: {
        lexicon: 1,
        id: 'tools.ozone.server.getConfig',
        defs: {
            main: {
                type: 'query',
                description: "Get details about ozone's server configuration.",
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {
                            appview: {
                                type: 'ref',
                                ref: 'lex:tools.ozone.server.getConfig#serviceConfig'
                            },
                            pds: {
                                type: 'ref',
                                ref: 'lex:tools.ozone.server.getConfig#serviceConfig'
                            },
                            blobDivert: {
                                type: 'ref',
                                ref: 'lex:tools.ozone.server.getConfig#serviceConfig'
                            },
                            chat: {
                                type: 'ref',
                                ref: 'lex:tools.ozone.server.getConfig#serviceConfig'
                            },
                            viewer: {
                                type: 'ref',
                                ref: 'lex:tools.ozone.server.getConfig#viewerConfig'
                            }
                        }
                    }
                }
            },
            serviceConfig: {
                type: 'object',
                properties: {
                    url: {
                        type: 'string',
                        format: 'uri'
                    }
                }
            },
            viewerConfig: {
                type: 'object',
                properties: {
                    role: {
                        type: 'string',
                        knownValues: [
                            'tools.ozone.team.defs#roleAdmin',
                            'tools.ozone.team.defs#roleModerator',
                            'tools.ozone.team.defs#roleTriage'
                        ]
                    }
                }
            }
        }
    },
    ToolsOzoneSetAddValues: {
        lexicon: 1,
        id: 'tools.ozone.set.addValues',
        defs: {
            main: {
                type: 'procedure',
                description: 'Add values to a specific set. Attempting to add values to a set that does not exist will result in an error.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'name',
                            'values'
                        ],
                        properties: {
                            name: {
                                type: 'string',
                                description: 'Name of the set to add values to'
                            },
                            values: {
                                type: 'array',
                                minLength: 1,
                                maxLength: 1000,
                                items: {
                                    type: 'string'
                                },
                                description: 'Array of string values to add to the set'
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneSetDefs: {
        lexicon: 1,
        id: 'tools.ozone.set.defs',
        defs: {
            set: {
                type: 'object',
                required: [
                    'name'
                ],
                properties: {
                    name: {
                        type: 'string',
                        minLength: 3,
                        maxLength: 128
                    },
                    description: {
                        type: 'string',
                        maxGraphemes: 1024,
                        maxLength: 10240
                    }
                }
            },
            setView: {
                type: 'object',
                required: [
                    'name',
                    'setSize',
                    'createdAt',
                    'updatedAt'
                ],
                properties: {
                    name: {
                        type: 'string',
                        minLength: 3,
                        maxLength: 128
                    },
                    description: {
                        type: 'string',
                        maxGraphemes: 1024,
                        maxLength: 10240
                    },
                    setSize: {
                        type: 'integer'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    updatedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            }
        }
    },
    ToolsOzoneSetDeleteSet: {
        lexicon: 1,
        id: 'tools.ozone.set.deleteSet',
        defs: {
            main: {
                type: 'procedure',
                description: 'Delete an entire set. Attempting to delete a set that does not exist will result in an error.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'name'
                        ],
                        properties: {
                            name: {
                                type: 'string',
                                description: 'Name of the set to delete'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {}
                    }
                },
                errors: [
                    {
                        name: 'SetNotFound',
                        description: 'set with the given name does not exist'
                    }
                ]
            }
        }
    },
    ToolsOzoneSetDeleteValues: {
        lexicon: 1,
        id: 'tools.ozone.set.deleteValues',
        defs: {
            main: {
                type: 'procedure',
                description: 'Delete values from a specific set. Attempting to delete values that are not in the set will not result in an error',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'name',
                            'values'
                        ],
                        properties: {
                            name: {
                                type: 'string',
                                description: 'Name of the set to delete values from'
                            },
                            values: {
                                type: 'array',
                                minLength: 1,
                                items: {
                                    type: 'string'
                                },
                                description: 'Array of string values to delete from the set'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'SetNotFound',
                        description: 'set with the given name does not exist'
                    }
                ]
            }
        }
    },
    ToolsOzoneSetGetValues: {
        lexicon: 1,
        id: 'tools.ozone.set.getValues',
        defs: {
            main: {
                type: 'query',
                description: 'Get a specific set and its values',
                parameters: {
                    type: 'params',
                    required: [
                        'name'
                    ],
                    properties: {
                        name: {
                            type: 'string'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 1000,
                            default: 100
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'set',
                            'values'
                        ],
                        properties: {
                            set: {
                                type: 'ref',
                                ref: 'lex:tools.ozone.set.defs#setView'
                            },
                            values: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                }
                            },
                            cursor: {
                                type: 'string'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'SetNotFound',
                        description: 'set with the given name does not exist'
                    }
                ]
            }
        }
    },
    ToolsOzoneSetQuerySets: {
        lexicon: 1,
        id: 'tools.ozone.set.querySets',
        defs: {
            main: {
                type: 'query',
                description: 'Query available sets',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        },
                        namePrefix: {
                            type: 'string'
                        },
                        sortBy: {
                            type: 'string',
                            enum: [
                                'name',
                                'createdAt',
                                'updatedAt'
                            ],
                            default: 'name'
                        },
                        sortDirection: {
                            type: 'string',
                            default: 'asc',
                            enum: [
                                'asc',
                                'desc'
                            ],
                            description: 'Defaults to ascending order of name field.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'sets'
                        ],
                        properties: {
                            sets: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.set.defs#setView'
                                }
                            },
                            cursor: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneSetUpsertSet: {
        lexicon: 1,
        id: 'tools.ozone.set.upsertSet',
        defs: {
            main: {
                type: 'procedure',
                description: 'Create or update set metadata',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.set.defs#set'
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.set.defs#setView'
                    }
                }
            }
        }
    },
    ToolsOzoneSettingDefs: {
        lexicon: 1,
        id: 'tools.ozone.setting.defs',
        defs: {
            option: {
                type: 'object',
                required: [
                    'key',
                    'value',
                    'did',
                    'scope',
                    'createdBy',
                    'lastUpdatedBy'
                ],
                properties: {
                    key: {
                        type: 'string',
                        format: 'nsid'
                    },
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    value: {
                        type: 'unknown'
                    },
                    description: {
                        type: 'string',
                        maxGraphemes: 1024,
                        maxLength: 10240
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    updatedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    managerRole: {
                        type: 'string',
                        knownValues: [
                            'tools.ozone.team.defs#roleModerator',
                            'tools.ozone.team.defs#roleTriage',
                            'tools.ozone.team.defs#roleAdmin'
                        ]
                    },
                    scope: {
                        type: 'string',
                        knownValues: [
                            'instance',
                            'personal'
                        ]
                    },
                    createdBy: {
                        type: 'string',
                        format: 'did'
                    },
                    lastUpdatedBy: {
                        type: 'string',
                        format: 'did'
                    }
                }
            }
        }
    },
    ToolsOzoneSettingListOptions: {
        lexicon: 1,
        id: 'tools.ozone.setting.listOptions',
        defs: {
            main: {
                type: 'query',
                description: 'List settings with optional filtering',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        },
                        scope: {
                            type: 'string',
                            knownValues: [
                                'instance',
                                'personal'
                            ],
                            default: 'instance'
                        },
                        prefix: {
                            type: 'string',
                            description: 'Filter keys by prefix'
                        },
                        keys: {
                            type: 'array',
                            maxLength: 100,
                            items: {
                                type: 'string',
                                format: 'nsid'
                            },
                            description: 'Filter for only the specified keys. Ignored if prefix is provided'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'options'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            options: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.setting.defs#option'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneSettingRemoveOptions: {
        lexicon: 1,
        id: 'tools.ozone.setting.removeOptions',
        defs: {
            main: {
                type: 'procedure',
                description: 'Delete settings by key',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'keys',
                            'scope'
                        ],
                        properties: {
                            keys: {
                                type: 'array',
                                minLength: 1,
                                maxLength: 200,
                                items: {
                                    type: 'string',
                                    format: 'nsid'
                                }
                            },
                            scope: {
                                type: 'string',
                                knownValues: [
                                    'instance',
                                    'personal'
                                ]
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {}
                    }
                }
            }
        }
    },
    ToolsOzoneSettingUpsertOption: {
        lexicon: 1,
        id: 'tools.ozone.setting.upsertOption',
        defs: {
            main: {
                type: 'procedure',
                description: 'Create or update setting option',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'key',
                            'scope',
                            'value'
                        ],
                        properties: {
                            key: {
                                type: 'string',
                                format: 'nsid'
                            },
                            scope: {
                                type: 'string',
                                knownValues: [
                                    'instance',
                                    'personal'
                                ]
                            },
                            value: {
                                type: 'unknown'
                            },
                            description: {
                                type: 'string',
                                maxLength: 2000
                            },
                            managerRole: {
                                type: 'string',
                                knownValues: [
                                    'tools.ozone.team.defs#roleModerator',
                                    'tools.ozone.team.defs#roleTriage',
                                    'tools.ozone.team.defs#roleAdmin'
                                ]
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'option'
                        ],
                        properties: {
                            option: {
                                type: 'ref',
                                ref: 'lex:tools.ozone.setting.defs#option'
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneSignatureDefs: {
        lexicon: 1,
        id: 'tools.ozone.signature.defs',
        defs: {
            sigDetail: {
                type: 'object',
                required: [
                    'property',
                    'value'
                ],
                properties: {
                    property: {
                        type: 'string'
                    },
                    value: {
                        type: 'string'
                    }
                }
            }
        }
    },
    ToolsOzoneSignatureFindCorrelation: {
        lexicon: 1,
        id: 'tools.ozone.signature.findCorrelation',
        defs: {
            main: {
                type: 'query',
                description: 'Find all correlated threat signatures between 2 or more accounts.',
                parameters: {
                    type: 'params',
                    required: [
                        'dids'
                    ],
                    properties: {
                        dids: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'details'
                        ],
                        properties: {
                            details: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.signature.defs#sigDetail'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneSignatureFindRelatedAccounts: {
        lexicon: 1,
        id: 'tools.ozone.signature.findRelatedAccounts',
        defs: {
            main: {
                type: 'query',
                description: 'Get accounts that share some matching threat signatures with the root account.',
                parameters: {
                    type: 'params',
                    required: [
                        'did'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did'
                        },
                        cursor: {
                            type: 'string'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'accounts'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            accounts: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.signature.findRelatedAccounts#relatedAccount'
                                }
                            }
                        }
                    }
                }
            },
            relatedAccount: {
                type: 'object',
                required: [
                    'account'
                ],
                properties: {
                    account: {
                        type: 'ref',
                        ref: 'lex:com.atproto.admin.defs#accountView'
                    },
                    similarities: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:tools.ozone.signature.defs#sigDetail'
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneSignatureSearchAccounts: {
        lexicon: 1,
        id: 'tools.ozone.signature.searchAccounts',
        defs: {
            main: {
                type: 'query',
                description: 'Search for accounts that match one or more threat signature values.',
                parameters: {
                    type: 'params',
                    required: [
                        'values'
                    ],
                    properties: {
                        values: {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        cursor: {
                            type: 'string'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'accounts'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            accounts: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.admin.defs#accountView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneTeamAddMember: {
        lexicon: 1,
        id: 'tools.ozone.team.addMember',
        defs: {
            main: {
                type: 'procedure',
                description: 'Add a member to the ozone team. Requires admin role.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did',
                            'role'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            role: {
                                type: 'string',
                                knownValues: [
                                    'tools.ozone.team.defs#roleAdmin',
                                    'tools.ozone.team.defs#roleModerator',
                                    'tools.ozone.team.defs#roleTriage'
                                ]
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.team.defs#member'
                    }
                },
                errors: [
                    {
                        name: 'MemberAlreadyExists',
                        description: 'Member already exists in the team.'
                    }
                ]
            }
        }
    },
    ToolsOzoneTeamDefs: {
        lexicon: 1,
        id: 'tools.ozone.team.defs',
        defs: {
            member: {
                type: 'object',
                required: [
                    'did',
                    'role'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    disabled: {
                        type: 'boolean'
                    },
                    profile: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileViewDetailed'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    updatedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    lastUpdatedBy: {
                        type: 'string'
                    },
                    role: {
                        type: 'string',
                        knownValues: [
                            'lex:tools.ozone.team.defs#roleAdmin',
                            'lex:tools.ozone.team.defs#roleModerator',
                            'lex:tools.ozone.team.defs#roleTriage'
                        ]
                    }
                }
            },
            roleAdmin: {
                type: 'token',
                description: 'Admin role. Highest level of access, can perform all actions.'
            },
            roleModerator: {
                type: 'token',
                description: 'Moderator role. Can perform most actions.'
            },
            roleTriage: {
                type: 'token',
                description: 'Triage role. Mostly intended for monitoring and escalating issues.'
            }
        }
    },
    ToolsOzoneTeamDeleteMember: {
        lexicon: 1,
        id: 'tools.ozone.team.deleteMember',
        defs: {
            main: {
                type: 'procedure',
                description: 'Delete a member from ozone team. Requires admin role.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'MemberNotFound',
                        description: 'The member being deleted does not exist'
                    },
                    {
                        name: 'CannotDeleteSelf',
                        description: 'You can not delete yourself from the team'
                    }
                ]
            }
        }
    },
    ToolsOzoneTeamListMembers: {
        lexicon: 1,
        id: 'tools.ozone.team.listMembers',
        defs: {
            main: {
                type: 'query',
                description: 'List all members with access to the ozone service.',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'members'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            members: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.team.defs#member'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneTeamUpdateMember: {
        lexicon: 1,
        id: 'tools.ozone.team.updateMember',
        defs: {
            main: {
                type: 'procedure',
                description: 'Update a member in the ozone service. Requires admin role.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            disabled: {
                                type: 'boolean'
                            },
                            role: {
                                type: 'string',
                                knownValues: [
                                    'tools.ozone.team.defs#roleAdmin',
                                    'tools.ozone.team.defs#roleModerator',
                                    'tools.ozone.team.defs#roleTriage'
                                ]
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.team.defs#member'
                    }
                },
                errors: [
                    {
                        name: 'MemberNotFound',
                        description: 'The member being updated does not exist in the team'
                    }
                ]
            }
        }
    }
};
exports.schemas = Object.values(exports.schemaDict);
exports.lexicons = new lexicon_1.Lexicons(exports.schemas);
exports.ids = {
    ComAtprotoAdminDefs: 'com.atproto.admin.defs',
    ComAtprotoAdminDeleteAccount: 'com.atproto.admin.deleteAccount',
    ComAtprotoAdminDisableAccountInvites: 'com.atproto.admin.disableAccountInvites',
    ComAtprotoAdminDisableInviteCodes: 'com.atproto.admin.disableInviteCodes',
    ComAtprotoAdminEnableAccountInvites: 'com.atproto.admin.enableAccountInvites',
    ComAtprotoAdminGetAccountInfo: 'com.atproto.admin.getAccountInfo',
    ComAtprotoAdminGetAccountInfos: 'com.atproto.admin.getAccountInfos',
    ComAtprotoAdminGetInviteCodes: 'com.atproto.admin.getInviteCodes',
    ComAtprotoAdminGetSubjectStatus: 'com.atproto.admin.getSubjectStatus',
    ComAtprotoAdminSearchAccounts: 'com.atproto.admin.searchAccounts',
    ComAtprotoAdminSendEmail: 'com.atproto.admin.sendEmail',
    ComAtprotoAdminUpdateAccountEmail: 'com.atproto.admin.updateAccountEmail',
    ComAtprotoAdminUpdateAccountHandle: 'com.atproto.admin.updateAccountHandle',
    ComAtprotoAdminUpdateAccountPassword: 'com.atproto.admin.updateAccountPassword',
    ComAtprotoAdminUpdateSubjectStatus: 'com.atproto.admin.updateSubjectStatus',
    ComAtprotoIdentityGetRecommendedDidCredentials: 'com.atproto.identity.getRecommendedDidCredentials',
    ComAtprotoIdentityRequestPlcOperationSignature: 'com.atproto.identity.requestPlcOperationSignature',
    ComAtprotoIdentityResolveHandle: 'com.atproto.identity.resolveHandle',
    ComAtprotoIdentitySignPlcOperation: 'com.atproto.identity.signPlcOperation',
    ComAtprotoIdentitySubmitPlcOperation: 'com.atproto.identity.submitPlcOperation',
    ComAtprotoIdentityUpdateHandle: 'com.atproto.identity.updateHandle',
    ComAtprotoLabelDefs: 'com.atproto.label.defs',
    ComAtprotoLabelQueryLabels: 'com.atproto.label.queryLabels',
    ComAtprotoLabelSubscribeLabels: 'com.atproto.label.subscribeLabels',
    ComAtprotoLexiconSchema: 'com.atproto.lexicon.schema',
    ComAtprotoModerationCreateReport: 'com.atproto.moderation.createReport',
    ComAtprotoModerationDefs: 'com.atproto.moderation.defs',
    ComAtprotoRepoApplyWrites: 'com.atproto.repo.applyWrites',
    ComAtprotoRepoCreateRecord: 'com.atproto.repo.createRecord',
    ComAtprotoRepoDefs: 'com.atproto.repo.defs',
    ComAtprotoRepoDeleteRecord: 'com.atproto.repo.deleteRecord',
    ComAtprotoRepoDescribeRepo: 'com.atproto.repo.describeRepo',
    ComAtprotoRepoGetRecord: 'com.atproto.repo.getRecord',
    ComAtprotoRepoImportRepo: 'com.atproto.repo.importRepo',
    ComAtprotoRepoListMissingBlobs: 'com.atproto.repo.listMissingBlobs',
    ComAtprotoRepoListRecords: 'com.atproto.repo.listRecords',
    ComAtprotoRepoPutRecord: 'com.atproto.repo.putRecord',
    ComAtprotoRepoStrongRef: 'com.atproto.repo.strongRef',
    ComAtprotoRepoUploadBlob: 'com.atproto.repo.uploadBlob',
    ComAtprotoServerActivateAccount: 'com.atproto.server.activateAccount',
    ComAtprotoServerCheckAccountStatus: 'com.atproto.server.checkAccountStatus',
    ComAtprotoServerConfirmEmail: 'com.atproto.server.confirmEmail',
    ComAtprotoServerCreateAccount: 'com.atproto.server.createAccount',
    ComAtprotoServerCreateAppPassword: 'com.atproto.server.createAppPassword',
    ComAtprotoServerCreateInviteCode: 'com.atproto.server.createInviteCode',
    ComAtprotoServerCreateInviteCodes: 'com.atproto.server.createInviteCodes',
    ComAtprotoServerCreateSession: 'com.atproto.server.createSession',
    ComAtprotoServerDeactivateAccount: 'com.atproto.server.deactivateAccount',
    ComAtprotoServerDefs: 'com.atproto.server.defs',
    ComAtprotoServerDeleteAccount: 'com.atproto.server.deleteAccount',
    ComAtprotoServerDeleteSession: 'com.atproto.server.deleteSession',
    ComAtprotoServerDescribeServer: 'com.atproto.server.describeServer',
    ComAtprotoServerGetAccountInviteCodes: 'com.atproto.server.getAccountInviteCodes',
    ComAtprotoServerGetServiceAuth: 'com.atproto.server.getServiceAuth',
    ComAtprotoServerGetSession: 'com.atproto.server.getSession',
    ComAtprotoServerListAppPasswords: 'com.atproto.server.listAppPasswords',
    ComAtprotoServerRefreshSession: 'com.atproto.server.refreshSession',
    ComAtprotoServerRequestAccountDelete: 'com.atproto.server.requestAccountDelete',
    ComAtprotoServerRequestEmailConfirmation: 'com.atproto.server.requestEmailConfirmation',
    ComAtprotoServerRequestEmailUpdate: 'com.atproto.server.requestEmailUpdate',
    ComAtprotoServerRequestPasswordReset: 'com.atproto.server.requestPasswordReset',
    ComAtprotoServerReserveSigningKey: 'com.atproto.server.reserveSigningKey',
    ComAtprotoServerResetPassword: 'com.atproto.server.resetPassword',
    ComAtprotoServerRevokeAppPassword: 'com.atproto.server.revokeAppPassword',
    ComAtprotoServerUpdateEmail: 'com.atproto.server.updateEmail',
    ComAtprotoSyncGetBlob: 'com.atproto.sync.getBlob',
    ComAtprotoSyncGetBlocks: 'com.atproto.sync.getBlocks',
    ComAtprotoSyncGetCheckout: 'com.atproto.sync.getCheckout',
    ComAtprotoSyncGetHead: 'com.atproto.sync.getHead',
    ComAtprotoSyncGetLatestCommit: 'com.atproto.sync.getLatestCommit',
    ComAtprotoSyncGetRecord: 'com.atproto.sync.getRecord',
    ComAtprotoSyncGetRepo: 'com.atproto.sync.getRepo',
    ComAtprotoSyncGetRepoStatus: 'com.atproto.sync.getRepoStatus',
    ComAtprotoSyncListBlobs: 'com.atproto.sync.listBlobs',
    ComAtprotoSyncListRepos: 'com.atproto.sync.listRepos',
    ComAtprotoSyncNotifyOfUpdate: 'com.atproto.sync.notifyOfUpdate',
    ComAtprotoSyncRequestCrawl: 'com.atproto.sync.requestCrawl',
    ComAtprotoSyncSubscribeRepos: 'com.atproto.sync.subscribeRepos',
    ComAtprotoTempAddReservedHandle: 'com.atproto.temp.addReservedHandle',
    ComAtprotoTempCheckSignupQueue: 'com.atproto.temp.checkSignupQueue',
    ComAtprotoTempFetchLabels: 'com.atproto.temp.fetchLabels',
    ComAtprotoTempRequestPhoneVerification: 'com.atproto.temp.requestPhoneVerification',
    AppBskyActorDefs: 'app.bsky.actor.defs',
    AppBskyActorGetPreferences: 'app.bsky.actor.getPreferences',
    AppBskyActorGetProfile: 'app.bsky.actor.getProfile',
    AppBskyActorGetProfiles: 'app.bsky.actor.getProfiles',
    AppBskyActorGetSuggestions: 'app.bsky.actor.getSuggestions',
    AppBskyActorProfile: 'app.bsky.actor.profile',
    AppBskyActorPutPreferences: 'app.bsky.actor.putPreferences',
    AppBskyActorSearchActors: 'app.bsky.actor.searchActors',
    AppBskyActorSearchActorsTypeahead: 'app.bsky.actor.searchActorsTypeahead',
    AppBskyEmbedDefs: 'app.bsky.embed.defs',
    AppBskyEmbedExternal: 'app.bsky.embed.external',
    AppBskyEmbedImages: 'app.bsky.embed.images',
    AppBskyEmbedRecord: 'app.bsky.embed.record',
    AppBskyEmbedRecordWithMedia: 'app.bsky.embed.recordWithMedia',
    AppBskyEmbedVideo: 'app.bsky.embed.video',
    AppBskyFeedDefs: 'app.bsky.feed.defs',
    AppBskyFeedDescribeFeedGenerator: 'app.bsky.feed.describeFeedGenerator',
    AppBskyFeedGenerator: 'app.bsky.feed.generator',
    AppBskyFeedGetActorFeeds: 'app.bsky.feed.getActorFeeds',
    AppBskyFeedGetActorLikes: 'app.bsky.feed.getActorLikes',
    AppBskyFeedGetAuthorFeed: 'app.bsky.feed.getAuthorFeed',
    AppBskyFeedGetFeed: 'app.bsky.feed.getFeed',
    AppBskyFeedGetFeedGenerator: 'app.bsky.feed.getFeedGenerator',
    AppBskyFeedGetFeedGenerators: 'app.bsky.feed.getFeedGenerators',
    AppBskyFeedGetFeedSkeleton: 'app.bsky.feed.getFeedSkeleton',
    AppBskyFeedGetLikes: 'app.bsky.feed.getLikes',
    AppBskyFeedGetListFeed: 'app.bsky.feed.getListFeed',
    AppBskyFeedGetPostThread: 'app.bsky.feed.getPostThread',
    AppBskyFeedGetPosts: 'app.bsky.feed.getPosts',
    AppBskyFeedGetQuotes: 'app.bsky.feed.getQuotes',
    AppBskyFeedGetRepostedBy: 'app.bsky.feed.getRepostedBy',
    AppBskyFeedGetSuggestedFeeds: 'app.bsky.feed.getSuggestedFeeds',
    AppBskyFeedGetTimeline: 'app.bsky.feed.getTimeline',
    AppBskyFeedLike: 'app.bsky.feed.like',
    AppBskyFeedPost: 'app.bsky.feed.post',
    AppBskyFeedPostgate: 'app.bsky.feed.postgate',
    AppBskyFeedRepost: 'app.bsky.feed.repost',
    AppBskyFeedSearchPosts: 'app.bsky.feed.searchPosts',
    AppBskyFeedSendInteractions: 'app.bsky.feed.sendInteractions',
    AppBskyFeedThreadgate: 'app.bsky.feed.threadgate',
    AppBskyGraphBlock: 'app.bsky.graph.block',
    AppBskyGraphDefs: 'app.bsky.graph.defs',
    AppBskyGraphFollow: 'app.bsky.graph.follow',
    AppBskyGraphGetActorStarterPacks: 'app.bsky.graph.getActorStarterPacks',
    AppBskyGraphGetBlocks: 'app.bsky.graph.getBlocks',
    AppBskyGraphGetFollowers: 'app.bsky.graph.getFollowers',
    AppBskyGraphGetFollows: 'app.bsky.graph.getFollows',
    AppBskyGraphGetKnownFollowers: 'app.bsky.graph.getKnownFollowers',
    AppBskyGraphGetList: 'app.bsky.graph.getList',
    AppBskyGraphGetListBlocks: 'app.bsky.graph.getListBlocks',
    AppBskyGraphGetListMutes: 'app.bsky.graph.getListMutes',
    AppBskyGraphGetLists: 'app.bsky.graph.getLists',
    AppBskyGraphGetMutes: 'app.bsky.graph.getMutes',
    AppBskyGraphGetRelationships: 'app.bsky.graph.getRelationships',
    AppBskyGraphGetStarterPack: 'app.bsky.graph.getStarterPack',
    AppBskyGraphGetStarterPacks: 'app.bsky.graph.getStarterPacks',
    AppBskyGraphGetSuggestedFollowsByActor: 'app.bsky.graph.getSuggestedFollowsByActor',
    AppBskyGraphList: 'app.bsky.graph.list',
    AppBskyGraphListblock: 'app.bsky.graph.listblock',
    AppBskyGraphListitem: 'app.bsky.graph.listitem',
    AppBskyGraphMuteActor: 'app.bsky.graph.muteActor',
    AppBskyGraphMuteActorList: 'app.bsky.graph.muteActorList',
    AppBskyGraphMuteThread: 'app.bsky.graph.muteThread',
    AppBskyGraphSearchStarterPacks: 'app.bsky.graph.searchStarterPacks',
    AppBskyGraphStarterpack: 'app.bsky.graph.starterpack',
    AppBskyGraphUnmuteActor: 'app.bsky.graph.unmuteActor',
    AppBskyGraphUnmuteActorList: 'app.bsky.graph.unmuteActorList',
    AppBskyGraphUnmuteThread: 'app.bsky.graph.unmuteThread',
    AppBskyLabelerDefs: 'app.bsky.labeler.defs',
    AppBskyLabelerGetServices: 'app.bsky.labeler.getServices',
    AppBskyLabelerService: 'app.bsky.labeler.service',
    AppBskyNotificationGetUnreadCount: 'app.bsky.notification.getUnreadCount',
    AppBskyNotificationListNotifications: 'app.bsky.notification.listNotifications',
    AppBskyNotificationPutPreferences: 'app.bsky.notification.putPreferences',
    AppBskyNotificationRegisterPush: 'app.bsky.notification.registerPush',
    AppBskyNotificationUpdateSeen: 'app.bsky.notification.updateSeen',
    AppBskyRichtextFacet: 'app.bsky.richtext.facet',
    AppBskyUnspeccedDefs: 'app.bsky.unspecced.defs',
    AppBskyUnspeccedGetConfig: 'app.bsky.unspecced.getConfig',
    AppBskyUnspeccedGetPopularFeedGenerators: 'app.bsky.unspecced.getPopularFeedGenerators',
    AppBskyUnspeccedGetSuggestionsSkeleton: 'app.bsky.unspecced.getSuggestionsSkeleton',
    AppBskyUnspeccedGetTaggedSuggestions: 'app.bsky.unspecced.getTaggedSuggestions',
    AppBskyUnspeccedGetTrendingTopics: 'app.bsky.unspecced.getTrendingTopics',
    AppBskyUnspeccedSearchActorsSkeleton: 'app.bsky.unspecced.searchActorsSkeleton',
    AppBskyUnspeccedSearchPostsSkeleton: 'app.bsky.unspecced.searchPostsSkeleton',
    AppBskyUnspeccedSearchStarterPacksSkeleton: 'app.bsky.unspecced.searchStarterPacksSkeleton',
    AppBskyVideoDefs: 'app.bsky.video.defs',
    AppBskyVideoGetJobStatus: 'app.bsky.video.getJobStatus',
    AppBskyVideoGetUploadLimits: 'app.bsky.video.getUploadLimits',
    AppBskyVideoUploadVideo: 'app.bsky.video.uploadVideo',
    ChatBskyActorDeclaration: 'chat.bsky.actor.declaration',
    ChatBskyActorDefs: 'chat.bsky.actor.defs',
    ChatBskyActorDeleteAccount: 'chat.bsky.actor.deleteAccount',
    ChatBskyActorExportAccountData: 'chat.bsky.actor.exportAccountData',
    ChatBskyConvoDefs: 'chat.bsky.convo.defs',
    ChatBskyConvoDeleteMessageForSelf: 'chat.bsky.convo.deleteMessageForSelf',
    ChatBskyConvoGetConvo: 'chat.bsky.convo.getConvo',
    ChatBskyConvoGetConvoForMembers: 'chat.bsky.convo.getConvoForMembers',
    ChatBskyConvoGetLog: 'chat.bsky.convo.getLog',
    ChatBskyConvoGetMessages: 'chat.bsky.convo.getMessages',
    ChatBskyConvoLeaveConvo: 'chat.bsky.convo.leaveConvo',
    ChatBskyConvoListConvos: 'chat.bsky.convo.listConvos',
    ChatBskyConvoMuteConvo: 'chat.bsky.convo.muteConvo',
    ChatBskyConvoSendMessage: 'chat.bsky.convo.sendMessage',
    ChatBskyConvoSendMessageBatch: 'chat.bsky.convo.sendMessageBatch',
    ChatBskyConvoUnmuteConvo: 'chat.bsky.convo.unmuteConvo',
    ChatBskyConvoUpdateRead: 'chat.bsky.convo.updateRead',
    ChatBskyModerationGetActorMetadata: 'chat.bsky.moderation.getActorMetadata',
    ChatBskyModerationGetMessageContext: 'chat.bsky.moderation.getMessageContext',
    ChatBskyModerationUpdateActorAccess: 'chat.bsky.moderation.updateActorAccess',
    ToolsOzoneCommunicationCreateTemplate: 'tools.ozone.communication.createTemplate',
    ToolsOzoneCommunicationDefs: 'tools.ozone.communication.defs',
    ToolsOzoneCommunicationDeleteTemplate: 'tools.ozone.communication.deleteTemplate',
    ToolsOzoneCommunicationListTemplates: 'tools.ozone.communication.listTemplates',
    ToolsOzoneCommunicationUpdateTemplate: 'tools.ozone.communication.updateTemplate',
    ToolsOzoneModerationDefs: 'tools.ozone.moderation.defs',
    ToolsOzoneModerationEmitEvent: 'tools.ozone.moderation.emitEvent',
    ToolsOzoneModerationGetEvent: 'tools.ozone.moderation.getEvent',
    ToolsOzoneModerationGetRecord: 'tools.ozone.moderation.getRecord',
    ToolsOzoneModerationGetRecords: 'tools.ozone.moderation.getRecords',
    ToolsOzoneModerationGetRepo: 'tools.ozone.moderation.getRepo',
    ToolsOzoneModerationGetRepos: 'tools.ozone.moderation.getRepos',
    ToolsOzoneModerationQueryEvents: 'tools.ozone.moderation.queryEvents',
    ToolsOzoneModerationQueryStatuses: 'tools.ozone.moderation.queryStatuses',
    ToolsOzoneModerationSearchRepos: 'tools.ozone.moderation.searchRepos',
    ToolsOzoneServerGetConfig: 'tools.ozone.server.getConfig',
    ToolsOzoneSetAddValues: 'tools.ozone.set.addValues',
    ToolsOzoneSetDefs: 'tools.ozone.set.defs',
    ToolsOzoneSetDeleteSet: 'tools.ozone.set.deleteSet',
    ToolsOzoneSetDeleteValues: 'tools.ozone.set.deleteValues',
    ToolsOzoneSetGetValues: 'tools.ozone.set.getValues',
    ToolsOzoneSetQuerySets: 'tools.ozone.set.querySets',
    ToolsOzoneSetUpsertSet: 'tools.ozone.set.upsertSet',
    ToolsOzoneSettingDefs: 'tools.ozone.setting.defs',
    ToolsOzoneSettingListOptions: 'tools.ozone.setting.listOptions',
    ToolsOzoneSettingRemoveOptions: 'tools.ozone.setting.removeOptions',
    ToolsOzoneSettingUpsertOption: 'tools.ozone.setting.upsertOption',
    ToolsOzoneSignatureDefs: 'tools.ozone.signature.defs',
    ToolsOzoneSignatureFindCorrelation: 'tools.ozone.signature.findCorrelation',
    ToolsOzoneSignatureFindRelatedAccounts: 'tools.ozone.signature.findRelatedAccounts',
    ToolsOzoneSignatureSearchAccounts: 'tools.ozone.signature.searchAccounts',
    ToolsOzoneTeamAddMember: 'tools.ozone.team.addMember',
    ToolsOzoneTeamDefs: 'tools.ozone.team.defs',
    ToolsOzoneTeamDeleteMember: 'tools.ozone.team.deleteMember',
    ToolsOzoneTeamListMembers: 'tools.ozone.team.listMembers',
    ToolsOzoneTeamUpdateMember: 'tools.ozone.team.updateMember'
}; //# sourceMappingURL=lexicons.js.map
}}),
"[project]/node_modules/@atproto/api/dist/types.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=types.js.map
}}),
"[project]/node_modules/@atproto/api/dist/const.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BSKY_LABELER_DID = void 0;
exports.BSKY_LABELER_DID = 'did:plc:ar7c4by46qjdydhdevvrndac'; //# sourceMappingURL=const.js.map
}}),
"[project]/node_modules/@atproto/api/dist/util.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.nuxSchema = exports.asDid = exports.isDid = void 0;
exports.sanitizeMutedWordValue = sanitizeMutedWordValue;
exports.savedFeedsToUriArrays = savedFeedsToUriArrays;
exports.getSavedFeedType = getSavedFeedType;
exports.validateSavedFeed = validateSavedFeed;
exports.validateNux = validateNux;
const syntax_1 = __turbopack_require__("[project]/node_modules/@atproto/syntax/dist/index.js [app-client] (ecmascript)");
const common_web_1 = __turbopack_require__("[project]/node_modules/@atproto/common-web/dist/index.js [app-client] (ecmascript)");
const zod_1 = __importDefault(__turbopack_require__("[project]/node_modules/zod/lib/index.js [app-client] (ecmascript)"));
function sanitizeMutedWordValue(value) {
    return value.trim().replace(/^#(?!\ufe0f)/, '')// eslint-disable-next-line no-misleading-character-class
    .replace(/[\r\n\u00AD\u2060\u200D\u200C\u200B]+/, '');
}
function savedFeedsToUriArrays(savedFeeds) {
    const pinned = [];
    const saved = [];
    for (const feed of savedFeeds){
        if (feed.pinned) {
            pinned.push(feed.value);
            // saved in v1 includes pinned
            saved.push(feed.value);
        } else {
            saved.push(feed.value);
        }
    }
    return {
        pinned,
        saved
    };
}
/**
 * Get the type of a saved feed, used by deprecated methods for backwards
 * compat. Should not be used moving forward. *Invalid URIs will throw.*
 *
 * @param uri - The AT URI of the saved feed
 */ function getSavedFeedType(uri) {
    const urip = new syntax_1.AtUri(uri);
    switch(urip.collection){
        case 'app.bsky.feed.generator':
            return 'feed';
        case 'app.bsky.graph.list':
            return 'list';
        default:
            return 'unknown';
    }
}
function validateSavedFeed(savedFeed) {
    new common_web_1.TID(savedFeed.id);
    if ([
        'feed',
        'list'
    ].includes(savedFeed.type)) {
        const uri = new syntax_1.AtUri(savedFeed.value);
        const isFeed = uri.collection === 'app.bsky.feed.generator';
        const isList = uri.collection === 'app.bsky.graph.list';
        if (savedFeed.type === 'feed' && !isFeed) {
            throw new Error(`Saved feed of type 'feed' must be a feed, got ${uri.collection}`);
        }
        if (savedFeed.type === 'list' && !isList) {
            throw new Error(`Saved feed of type 'list' must be a list, got ${uri.collection}`);
        }
    }
}
// @TODO use tools from @atproto/did
const isDid = (str)=>typeof str === 'string' && str.startsWith('did:') && str.includes(':', 4) && str.length > 8 && str.length <= 2048;
exports.isDid = isDid;
const asDid = (value)=>{
    if ((0, exports.isDid)(value)) return value;
    throw new TypeError(`Invalid DID: ${value}`);
};
exports.asDid = asDid;
exports.nuxSchema = zod_1.default.object({
    id: zod_1.default.string().max(64),
    completed: zod_1.default.boolean(),
    data: zod_1.default.string().max(300).optional(),
    expiresAt: zod_1.default.string().datetime().optional()
}).strict();
function validateNux(nux) {
    exports.nuxSchema.parse(nux);
} //# sourceMappingURL=util.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isObj = isObj;
exports.hasProp = hasProp;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ function isObj(v) {
    return typeof v === 'object' && v !== null;
}
function hasProp(data, prop) {
    return prop in data;
} //# sourceMappingURL=util.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/applyWrites.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidSwapError = void 0;
exports.toKnownErr = toKnownErr;
exports.isCreate = isCreate;
exports.validateCreate = validateCreate;
exports.isUpdate = isUpdate;
exports.validateUpdate = validateUpdate;
exports.isDelete = isDelete;
exports.validateDelete = validateDelete;
exports.isCreateResult = isCreateResult;
exports.validateCreateResult = validateCreateResult;
exports.isUpdateResult = isUpdateResult;
exports.validateUpdateResult = validateUpdateResult;
exports.isDeleteResult = isDeleteResult;
exports.validateDeleteResult = validateDeleteResult;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
class InvalidSwapError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidSwapError = InvalidSwapError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'InvalidSwap') return new InvalidSwapError(e);
    }
    return e;
}
function isCreate(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.applyWrites#create';
}
function validateCreate(v) {
    return lexicons_1.lexicons.validate('com.atproto.repo.applyWrites#create', v);
}
function isUpdate(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.applyWrites#update';
}
function validateUpdate(v) {
    return lexicons_1.lexicons.validate('com.atproto.repo.applyWrites#update', v);
}
function isDelete(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.applyWrites#delete';
}
function validateDelete(v) {
    return lexicons_1.lexicons.validate('com.atproto.repo.applyWrites#delete', v);
}
function isCreateResult(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.applyWrites#createResult';
}
function validateCreateResult(v) {
    return lexicons_1.lexicons.validate('com.atproto.repo.applyWrites#createResult', v);
}
function isUpdateResult(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.applyWrites#updateResult';
}
function validateUpdateResult(v) {
    return lexicons_1.lexicons.validate('com.atproto.repo.applyWrites#updateResult', v);
}
function isDeleteResult(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.applyWrites#deleteResult';
}
function validateDeleteResult(v) {
    return lexicons_1.lexicons.validate('com.atproto.repo.applyWrites#deleteResult', v);
} //# sourceMappingURL=applyWrites.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/createRecord.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidSwapError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class InvalidSwapError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidSwapError = InvalidSwapError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'InvalidSwap') return new InvalidSwapError(e);
    }
    return e;
} //# sourceMappingURL=createRecord.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/deleteRecord.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidSwapError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class InvalidSwapError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidSwapError = InvalidSwapError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'InvalidSwap') return new InvalidSwapError(e);
    }
    return e;
} //# sourceMappingURL=deleteRecord.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/getRecord.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RecordNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class RecordNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RecordNotFoundError = RecordNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'RecordNotFound') return new RecordNotFoundError(e);
    }
    return e;
} //# sourceMappingURL=getRecord.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/putRecord.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidSwapError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class InvalidSwapError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidSwapError = InvalidSwapError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'InvalidSwap') return new InvalidSwapError(e);
    }
    return e;
} //# sourceMappingURL=putRecord.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/confirmEmail.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidEmailError = exports.InvalidTokenError = exports.ExpiredTokenError = exports.AccountNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class AccountNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.AccountNotFoundError = AccountNotFoundError;
class ExpiredTokenError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.ExpiredTokenError = ExpiredTokenError;
class InvalidTokenError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidTokenError = InvalidTokenError;
class InvalidEmailError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidEmailError = InvalidEmailError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'AccountNotFound') return new AccountNotFoundError(e);
        if (e.error === 'ExpiredToken') return new ExpiredTokenError(e);
        if (e.error === 'InvalidToken') return new InvalidTokenError(e);
        if (e.error === 'InvalidEmail') return new InvalidEmailError(e);
    }
    return e;
} //# sourceMappingURL=confirmEmail.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/createAccount.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IncompatibleDidDocError = exports.UnresolvableDidError = exports.UnsupportedDomainError = exports.HandleNotAvailableError = exports.InvalidInviteCodeError = exports.InvalidPasswordError = exports.InvalidHandleError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class InvalidHandleError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidHandleError = InvalidHandleError;
class InvalidPasswordError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidPasswordError = InvalidPasswordError;
class InvalidInviteCodeError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidInviteCodeError = InvalidInviteCodeError;
class HandleNotAvailableError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.HandleNotAvailableError = HandleNotAvailableError;
class UnsupportedDomainError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.UnsupportedDomainError = UnsupportedDomainError;
class UnresolvableDidError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.UnresolvableDidError = UnresolvableDidError;
class IncompatibleDidDocError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.IncompatibleDidDocError = IncompatibleDidDocError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'InvalidHandle') return new InvalidHandleError(e);
        if (e.error === 'InvalidPassword') return new InvalidPasswordError(e);
        if (e.error === 'InvalidInviteCode') return new InvalidInviteCodeError(e);
        if (e.error === 'HandleNotAvailable') return new HandleNotAvailableError(e);
        if (e.error === 'UnsupportedDomain') return new UnsupportedDomainError(e);
        if (e.error === 'UnresolvableDid') return new UnresolvableDidError(e);
        if (e.error === 'IncompatibleDidDoc') return new IncompatibleDidDocError(e);
    }
    return e;
} //# sourceMappingURL=createAccount.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/createAppPassword.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AccountTakedownError = void 0;
exports.toKnownErr = toKnownErr;
exports.isAppPassword = isAppPassword;
exports.validateAppPassword = validateAppPassword;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
class AccountTakedownError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.AccountTakedownError = AccountTakedownError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'AccountTakedown') return new AccountTakedownError(e);
    }
    return e;
}
function isAppPassword(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.server.createAppPassword#appPassword';
}
function validateAppPassword(v) {
    return lexicons_1.lexicons.validate('com.atproto.server.createAppPassword#appPassword', v);
} //# sourceMappingURL=createAppPassword.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/createSession.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AuthFactorTokenRequiredError = exports.AccountTakedownError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class AccountTakedownError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.AccountTakedownError = AccountTakedownError;
class AuthFactorTokenRequiredError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.AuthFactorTokenRequiredError = AuthFactorTokenRequiredError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'AccountTakedown') return new AccountTakedownError(e);
        if (e.error === 'AuthFactorTokenRequired') return new AuthFactorTokenRequiredError(e);
    }
    return e;
} //# sourceMappingURL=createSession.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteAccount.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidTokenError = exports.ExpiredTokenError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class ExpiredTokenError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.ExpiredTokenError = ExpiredTokenError;
class InvalidTokenError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidTokenError = InvalidTokenError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'ExpiredToken') return new ExpiredTokenError(e);
        if (e.error === 'InvalidToken') return new InvalidTokenError(e);
    }
    return e;
} //# sourceMappingURL=deleteAccount.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/getAccountInviteCodes.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DuplicateCreateError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class DuplicateCreateError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.DuplicateCreateError = DuplicateCreateError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'DuplicateCreate') return new DuplicateCreateError(e);
    }
    return e;
} //# sourceMappingURL=getAccountInviteCodes.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/getServiceAuth.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BadExpirationError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class BadExpirationError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BadExpirationError = BadExpirationError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'BadExpiration') return new BadExpirationError(e);
    }
    return e;
} //# sourceMappingURL=getServiceAuth.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/listAppPasswords.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AccountTakedownError = void 0;
exports.toKnownErr = toKnownErr;
exports.isAppPassword = isAppPassword;
exports.validateAppPassword = validateAppPassword;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
class AccountTakedownError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.AccountTakedownError = AccountTakedownError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'AccountTakedown') return new AccountTakedownError(e);
    }
    return e;
}
function isAppPassword(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.server.listAppPasswords#appPassword';
}
function validateAppPassword(v) {
    return lexicons_1.lexicons.validate('com.atproto.server.listAppPasswords#appPassword', v);
} //# sourceMappingURL=listAppPasswords.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/refreshSession.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AccountTakedownError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class AccountTakedownError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.AccountTakedownError = AccountTakedownError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'AccountTakedown') return new AccountTakedownError(e);
    }
    return e;
} //# sourceMappingURL=refreshSession.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/resetPassword.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidTokenError = exports.ExpiredTokenError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class ExpiredTokenError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.ExpiredTokenError = ExpiredTokenError;
class InvalidTokenError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidTokenError = InvalidTokenError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'ExpiredToken') return new ExpiredTokenError(e);
        if (e.error === 'InvalidToken') return new InvalidTokenError(e);
    }
    return e;
} //# sourceMappingURL=resetPassword.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/updateEmail.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TokenRequiredError = exports.InvalidTokenError = exports.ExpiredTokenError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class ExpiredTokenError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.ExpiredTokenError = ExpiredTokenError;
class InvalidTokenError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidTokenError = InvalidTokenError;
class TokenRequiredError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.TokenRequiredError = TokenRequiredError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'ExpiredToken') return new ExpiredTokenError(e);
        if (e.error === 'InvalidToken') return new InvalidTokenError(e);
        if (e.error === 'TokenRequired') return new TokenRequiredError(e);
    }
    return e;
} //# sourceMappingURL=updateEmail.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlob.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = exports.BlobNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class BlobNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BlobNotFoundError = BlobNotFoundError;
class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoNotFoundError = RepoNotFoundError;
class RepoTakendownError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoTakendownError = RepoTakendownError;
class RepoSuspendedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoSuspendedError = RepoSuspendedError;
class RepoDeactivatedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoDeactivatedError = RepoDeactivatedError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'BlobNotFound') return new BlobNotFoundError(e);
        if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
        if (e.error === 'RepoTakendown') return new RepoTakendownError(e);
        if (e.error === 'RepoSuspended') return new RepoSuspendedError(e);
        if (e.error === 'RepoDeactivated') return new RepoDeactivatedError(e);
    }
    return e;
} //# sourceMappingURL=getBlob.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlocks.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = exports.BlockNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class BlockNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BlockNotFoundError = BlockNotFoundError;
class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoNotFoundError = RepoNotFoundError;
class RepoTakendownError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoTakendownError = RepoTakendownError;
class RepoSuspendedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoSuspendedError = RepoSuspendedError;
class RepoDeactivatedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoDeactivatedError = RepoDeactivatedError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'BlockNotFound') return new BlockNotFoundError(e);
        if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
        if (e.error === 'RepoTakendown') return new RepoTakendownError(e);
        if (e.error === 'RepoSuspended') return new RepoSuspendedError(e);
        if (e.error === 'RepoDeactivated') return new RepoDeactivatedError(e);
    }
    return e;
} //# sourceMappingURL=getBlocks.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getHead.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.HeadNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class HeadNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.HeadNotFoundError = HeadNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'HeadNotFound') return new HeadNotFoundError(e);
    }
    return e;
} //# sourceMappingURL=getHead.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getLatestCommit.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoNotFoundError = RepoNotFoundError;
class RepoTakendownError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoTakendownError = RepoTakendownError;
class RepoSuspendedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoSuspendedError = RepoSuspendedError;
class RepoDeactivatedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoDeactivatedError = RepoDeactivatedError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
        if (e.error === 'RepoTakendown') return new RepoTakendownError(e);
        if (e.error === 'RepoSuspended') return new RepoSuspendedError(e);
        if (e.error === 'RepoDeactivated') return new RepoDeactivatedError(e);
    }
    return e;
} //# sourceMappingURL=getLatestCommit.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRecord.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = exports.RecordNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class RecordNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RecordNotFoundError = RecordNotFoundError;
class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoNotFoundError = RepoNotFoundError;
class RepoTakendownError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoTakendownError = RepoTakendownError;
class RepoSuspendedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoSuspendedError = RepoSuspendedError;
class RepoDeactivatedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoDeactivatedError = RepoDeactivatedError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'RecordNotFound') return new RecordNotFoundError(e);
        if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
        if (e.error === 'RepoTakendown') return new RepoTakendownError(e);
        if (e.error === 'RepoSuspended') return new RepoSuspendedError(e);
        if (e.error === 'RepoDeactivated') return new RepoDeactivatedError(e);
    }
    return e;
} //# sourceMappingURL=getRecord.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRepo.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoNotFoundError = RepoNotFoundError;
class RepoTakendownError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoTakendownError = RepoTakendownError;
class RepoSuspendedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoSuspendedError = RepoSuspendedError;
class RepoDeactivatedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoDeactivatedError = RepoDeactivatedError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
        if (e.error === 'RepoTakendown') return new RepoTakendownError(e);
        if (e.error === 'RepoSuspended') return new RepoSuspendedError(e);
        if (e.error === 'RepoDeactivated') return new RepoDeactivatedError(e);
    }
    return e;
} //# sourceMappingURL=getRepo.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRepoStatus.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RepoNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoNotFoundError = RepoNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
    }
    return e;
} //# sourceMappingURL=getRepoStatus.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/listBlobs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoNotFoundError = RepoNotFoundError;
class RepoTakendownError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoTakendownError = RepoTakendownError;
class RepoSuspendedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoSuspendedError = RepoSuspendedError;
class RepoDeactivatedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoDeactivatedError = RepoDeactivatedError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
        if (e.error === 'RepoTakendown') return new RepoTakendownError(e);
        if (e.error === 'RepoSuspended') return new RepoSuspendedError(e);
        if (e.error === 'RepoDeactivated') return new RepoDeactivatedError(e);
    }
    return e;
} //# sourceMappingURL=listBlobs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorLikes.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BlockedByActorError = exports.BlockedActorError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class BlockedActorError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BlockedActorError = BlockedActorError;
class BlockedByActorError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BlockedByActorError = BlockedByActorError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'BlockedActor') return new BlockedActorError(e);
        if (e.error === 'BlockedByActor') return new BlockedByActorError(e);
    }
    return e;
} //# sourceMappingURL=getActorLikes.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getAuthorFeed.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BlockedByActorError = exports.BlockedActorError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class BlockedActorError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BlockedActorError = BlockedActorError;
class BlockedByActorError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BlockedByActorError = BlockedByActorError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'BlockedActor') return new BlockedActorError(e);
        if (e.error === 'BlockedByActor') return new BlockedByActorError(e);
    }
    return e;
} //# sourceMappingURL=getAuthorFeed.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeed.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UnknownFeedError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class UnknownFeedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.UnknownFeedError = UnknownFeedError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'UnknownFeed') return new UnknownFeedError(e);
    }
    return e;
} //# sourceMappingURL=getFeed.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedSkeleton.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UnknownFeedError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class UnknownFeedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.UnknownFeedError = UnknownFeedError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'UnknownFeed') return new UnknownFeedError(e);
    }
    return e;
} //# sourceMappingURL=getFeedSkeleton.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getListFeed.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UnknownListError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class UnknownListError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.UnknownListError = UnknownListError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'UnknownList') return new UnknownListError(e);
    }
    return e;
} //# sourceMappingURL=getListFeed.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPostThread.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class NotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.NotFoundError = NotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'NotFound') return new NotFoundError(e);
    }
    return e;
} //# sourceMappingURL=getPostThread.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/searchPosts.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BadQueryStringError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class BadQueryStringError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BadQueryStringError = BadQueryStringError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'BadQueryString') return new BadQueryStringError(e);
    }
    return e;
} //# sourceMappingURL=searchPosts.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getRelationships.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ActorNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class ActorNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.ActorNotFoundError = ActorNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'ActorNotFound') return new ActorNotFoundError(e);
    }
    return e;
} //# sourceMappingURL=getRelationships.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchActorsSkeleton.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BadQueryStringError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class BadQueryStringError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BadQueryStringError = BadQueryStringError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'BadQueryString') return new BadQueryStringError(e);
    }
    return e;
} //# sourceMappingURL=searchActorsSkeleton.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchPostsSkeleton.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BadQueryStringError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class BadQueryStringError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BadQueryStringError = BadQueryStringError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'BadQueryString') return new BadQueryStringError(e);
    }
    return e;
} //# sourceMappingURL=searchPostsSkeleton.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchStarterPacksSkeleton.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BadQueryStringError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class BadQueryStringError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BadQueryStringError = BadQueryStringError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'BadQueryString') return new BadQueryStringError(e);
    }
    return e;
} //# sourceMappingURL=searchStarterPacksSkeleton.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/createTemplate.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DuplicateTemplateNameError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class DuplicateTemplateNameError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.DuplicateTemplateNameError = DuplicateTemplateNameError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'DuplicateTemplateName') return new DuplicateTemplateNameError(e);
    }
    return e;
} //# sourceMappingURL=createTemplate.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/updateTemplate.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DuplicateTemplateNameError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class DuplicateTemplateNameError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.DuplicateTemplateNameError = DuplicateTemplateNameError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'DuplicateTemplateName') return new DuplicateTemplateNameError(e);
    }
    return e;
} //# sourceMappingURL=updateTemplate.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/emitEvent.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SubjectHasActionError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class SubjectHasActionError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.SubjectHasActionError = SubjectHasActionError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'SubjectHasAction') return new SubjectHasActionError(e);
    }
    return e;
} //# sourceMappingURL=emitEvent.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRecord.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RecordNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class RecordNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RecordNotFoundError = RecordNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'RecordNotFound') return new RecordNotFoundError(e);
    }
    return e;
} //# sourceMappingURL=getRecord.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRepo.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RepoNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoNotFoundError = RepoNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
    }
    return e;
} //# sourceMappingURL=getRepo.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/set/deleteSet.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SetNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class SetNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.SetNotFoundError = SetNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'SetNotFound') return new SetNotFoundError(e);
    }
    return e;
} //# sourceMappingURL=deleteSet.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/set/deleteValues.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SetNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class SetNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.SetNotFoundError = SetNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'SetNotFound') return new SetNotFoundError(e);
    }
    return e;
} //# sourceMappingURL=deleteValues.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/set/getValues.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SetNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class SetNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.SetNotFoundError = SetNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'SetNotFound') return new SetNotFoundError(e);
    }
    return e;
} //# sourceMappingURL=getValues.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/team/addMember.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MemberAlreadyExistsError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class MemberAlreadyExistsError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.MemberAlreadyExistsError = MemberAlreadyExistsError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'MemberAlreadyExists') return new MemberAlreadyExistsError(e);
    }
    return e;
} //# sourceMappingURL=addMember.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/team/deleteMember.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CannotDeleteSelfError = exports.MemberNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class MemberNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.MemberNotFoundError = MemberNotFoundError;
class CannotDeleteSelfError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.CannotDeleteSelfError = CannotDeleteSelfError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'MemberNotFound') return new MemberNotFoundError(e);
        if (e.error === 'CannotDeleteSelf') return new CannotDeleteSelfError(e);
    }
    return e;
} //# sourceMappingURL=deleteMember.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/team/updateMember.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MemberNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
class MemberNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.MemberNotFoundError = MemberNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'MemberNotFound') return new MemberNotFoundError(e);
    }
    return e;
} //# sourceMappingURL=updateMember.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/defs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isStatusAttr = isStatusAttr;
exports.validateStatusAttr = validateStatusAttr;
exports.isAccountView = isAccountView;
exports.validateAccountView = validateAccountView;
exports.isRepoRef = isRepoRef;
exports.validateRepoRef = validateRepoRef;
exports.isRepoBlobRef = isRepoBlobRef;
exports.validateRepoBlobRef = validateRepoBlobRef;
exports.isThreatSignature = isThreatSignature;
exports.validateThreatSignature = validateThreatSignature;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isStatusAttr(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.admin.defs#statusAttr';
}
function validateStatusAttr(v) {
    return lexicons_1.lexicons.validate('com.atproto.admin.defs#statusAttr', v);
}
function isAccountView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.admin.defs#accountView';
}
function validateAccountView(v) {
    return lexicons_1.lexicons.validate('com.atproto.admin.defs#accountView', v);
}
function isRepoRef(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.admin.defs#repoRef';
}
function validateRepoRef(v) {
    return lexicons_1.lexicons.validate('com.atproto.admin.defs#repoRef', v);
}
function isRepoBlobRef(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.admin.defs#repoBlobRef';
}
function validateRepoBlobRef(v) {
    return lexicons_1.lexicons.validate('com.atproto.admin.defs#repoBlobRef', v);
}
function isThreatSignature(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.admin.defs#threatSignature';
}
function validateThreatSignature(v) {
    return lexicons_1.lexicons.validate('com.atproto.admin.defs#threatSignature', v);
} //# sourceMappingURL=defs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/deleteAccount.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=deleteAccount.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/disableAccountInvites.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=disableAccountInvites.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/disableInviteCodes.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=disableInviteCodes.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/enableAccountInvites.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=enableAccountInvites.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getAccountInfo.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getAccountInfo.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getAccountInfos.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getAccountInfos.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getInviteCodes.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getInviteCodes.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getSubjectStatus.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getSubjectStatus.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/searchAccounts.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=searchAccounts.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/sendEmail.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=sendEmail.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountEmail.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=updateAccountEmail.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountHandle.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=updateAccountHandle.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountPassword.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=updateAccountPassword.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateSubjectStatus.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=updateSubjectStatus.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/identity/getRecommendedDidCredentials.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getRecommendedDidCredentials.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/identity/requestPlcOperationSignature.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=requestPlcOperationSignature.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/identity/resolveHandle.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=resolveHandle.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/identity/signPlcOperation.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=signPlcOperation.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/identity/submitPlcOperation.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=submitPlcOperation.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/identity/updateHandle.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=updateHandle.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/label/defs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isLabel = isLabel;
exports.validateLabel = validateLabel;
exports.isSelfLabels = isSelfLabels;
exports.validateSelfLabels = validateSelfLabels;
exports.isSelfLabel = isSelfLabel;
exports.validateSelfLabel = validateSelfLabel;
exports.isLabelValueDefinition = isLabelValueDefinition;
exports.validateLabelValueDefinition = validateLabelValueDefinition;
exports.isLabelValueDefinitionStrings = isLabelValueDefinitionStrings;
exports.validateLabelValueDefinitionStrings = validateLabelValueDefinitionStrings;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isLabel(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.label.defs#label';
}
function validateLabel(v) {
    return lexicons_1.lexicons.validate('com.atproto.label.defs#label', v);
}
function isSelfLabels(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.label.defs#selfLabels';
}
function validateSelfLabels(v) {
    return lexicons_1.lexicons.validate('com.atproto.label.defs#selfLabels', v);
}
function isSelfLabel(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.label.defs#selfLabel';
}
function validateSelfLabel(v) {
    return lexicons_1.lexicons.validate('com.atproto.label.defs#selfLabel', v);
}
function isLabelValueDefinition(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.label.defs#labelValueDefinition';
}
function validateLabelValueDefinition(v) {
    return lexicons_1.lexicons.validate('com.atproto.label.defs#labelValueDefinition', v);
}
function isLabelValueDefinitionStrings(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.label.defs#labelValueDefinitionStrings';
}
function validateLabelValueDefinitionStrings(v) {
    return lexicons_1.lexicons.validate('com.atproto.label.defs#labelValueDefinitionStrings', v);
} //# sourceMappingURL=defs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/label/queryLabels.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=queryLabels.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/label/subscribeLabels.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isLabels = isLabels;
exports.validateLabels = validateLabels;
exports.isInfo = isInfo;
exports.validateInfo = validateInfo;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isLabels(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.label.subscribeLabels#labels';
}
function validateLabels(v) {
    return lexicons_1.lexicons.validate('com.atproto.label.subscribeLabels#labels', v);
}
function isInfo(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.label.subscribeLabels#info';
}
function validateInfo(v) {
    return lexicons_1.lexicons.validate('com.atproto.label.subscribeLabels#info', v);
} //# sourceMappingURL=subscribeLabels.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/lexicon/schema.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'com.atproto.lexicon.schema#main' || v.$type === 'com.atproto.lexicon.schema');
}
function validateRecord(v) {
    return lexicons_1.lexicons.validate('com.atproto.lexicon.schema#main', v);
} //# sourceMappingURL=schema.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/moderation/createReport.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=createReport.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/moderation/defs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.REASONAPPEAL = exports.REASONOTHER = exports.REASONRUDE = exports.REASONSEXUAL = exports.REASONMISLEADING = exports.REASONVIOLATION = exports.REASONSPAM = void 0;
/** Spam: frequent unwanted promotion, replies, mentions */ exports.REASONSPAM = 'com.atproto.moderation.defs#reasonSpam';
/** Direct violation of server rules, laws, terms of service */ exports.REASONVIOLATION = 'com.atproto.moderation.defs#reasonViolation';
/** Misleading identity, affiliation, or content */ exports.REASONMISLEADING = 'com.atproto.moderation.defs#reasonMisleading';
/** Unwanted or mislabeled sexual content */ exports.REASONSEXUAL = 'com.atproto.moderation.defs#reasonSexual';
/** Rude, harassing, explicit, or otherwise unwelcoming behavior */ exports.REASONRUDE = 'com.atproto.moderation.defs#reasonRude';
/** Other: reports not falling under another report category */ exports.REASONOTHER = 'com.atproto.moderation.defs#reasonOther';
/** Appeal: appeal a previously taken moderation action */ exports.REASONAPPEAL = 'com.atproto.moderation.defs#reasonAppeal'; //# sourceMappingURL=defs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/defs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isCommitMeta = isCommitMeta;
exports.validateCommitMeta = validateCommitMeta;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isCommitMeta(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.defs#commitMeta';
}
function validateCommitMeta(v) {
    return lexicons_1.lexicons.validate('com.atproto.repo.defs#commitMeta', v);
} //# sourceMappingURL=defs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/describeRepo.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=describeRepo.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/importRepo.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=importRepo.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/listMissingBlobs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isRecordBlob = isRecordBlob;
exports.validateRecordBlob = validateRecordBlob;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function toKnownErr(e) {
    return e;
}
function isRecordBlob(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.listMissingBlobs#recordBlob';
}
function validateRecordBlob(v) {
    return lexicons_1.lexicons.validate('com.atproto.repo.listMissingBlobs#recordBlob', v);
} //# sourceMappingURL=listMissingBlobs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/listRecords.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function toKnownErr(e) {
    return e;
}
function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.listRecords#record';
}
function validateRecord(v) {
    return lexicons_1.lexicons.validate('com.atproto.repo.listRecords#record', v);
} //# sourceMappingURL=listRecords.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/strongRef.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMain = isMain;
exports.validateMain = validateMain;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isMain(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'com.atproto.repo.strongRef#main' || v.$type === 'com.atproto.repo.strongRef');
}
function validateMain(v) {
    return lexicons_1.lexicons.validate('com.atproto.repo.strongRef#main', v);
} //# sourceMappingURL=strongRef.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/uploadBlob.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=uploadBlob.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/activateAccount.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=activateAccount.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/checkAccountStatus.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=checkAccountStatus.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/createInviteCode.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=createInviteCode.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/createInviteCodes.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isAccountCodes = isAccountCodes;
exports.validateAccountCodes = validateAccountCodes;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function toKnownErr(e) {
    return e;
}
function isAccountCodes(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.server.createInviteCodes#accountCodes';
}
function validateAccountCodes(v) {
    return lexicons_1.lexicons.validate('com.atproto.server.createInviteCodes#accountCodes', v);
} //# sourceMappingURL=createInviteCodes.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/deactivateAccount.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=deactivateAccount.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/defs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isInviteCode = isInviteCode;
exports.validateInviteCode = validateInviteCode;
exports.isInviteCodeUse = isInviteCodeUse;
exports.validateInviteCodeUse = validateInviteCodeUse;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isInviteCode(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.server.defs#inviteCode';
}
function validateInviteCode(v) {
    return lexicons_1.lexicons.validate('com.atproto.server.defs#inviteCode', v);
}
function isInviteCodeUse(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.server.defs#inviteCodeUse';
}
function validateInviteCodeUse(v) {
    return lexicons_1.lexicons.validate('com.atproto.server.defs#inviteCodeUse', v);
} //# sourceMappingURL=defs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteSession.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=deleteSession.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/describeServer.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isLinks = isLinks;
exports.validateLinks = validateLinks;
exports.isContact = isContact;
exports.validateContact = validateContact;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function toKnownErr(e) {
    return e;
}
function isLinks(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.server.describeServer#links';
}
function validateLinks(v) {
    return lexicons_1.lexicons.validate('com.atproto.server.describeServer#links', v);
}
function isContact(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.server.describeServer#contact';
}
function validateContact(v) {
    return lexicons_1.lexicons.validate('com.atproto.server.describeServer#contact', v);
} //# sourceMappingURL=describeServer.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/getSession.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getSession.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestAccountDelete.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=requestAccountDelete.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestEmailConfirmation.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=requestEmailConfirmation.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestEmailUpdate.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=requestEmailUpdate.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestPasswordReset.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=requestPasswordReset.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/reserveSigningKey.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=reserveSigningKey.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/revokeAppPassword.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=revokeAppPassword.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getCheckout.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getCheckout.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/listRepos.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isRepo = isRepo;
exports.validateRepo = validateRepo;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function toKnownErr(e) {
    return e;
}
function isRepo(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.listRepos#repo';
}
function validateRepo(v) {
    return lexicons_1.lexicons.validate('com.atproto.sync.listRepos#repo', v);
} //# sourceMappingURL=listRepos.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/notifyOfUpdate.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=notifyOfUpdate.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/requestCrawl.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=requestCrawl.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/subscribeRepos.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isCommit = isCommit;
exports.validateCommit = validateCommit;
exports.isIdentity = isIdentity;
exports.validateIdentity = validateIdentity;
exports.isAccount = isAccount;
exports.validateAccount = validateAccount;
exports.isHandle = isHandle;
exports.validateHandle = validateHandle;
exports.isMigrate = isMigrate;
exports.validateMigrate = validateMigrate;
exports.isTombstone = isTombstone;
exports.validateTombstone = validateTombstone;
exports.isInfo = isInfo;
exports.validateInfo = validateInfo;
exports.isRepoOp = isRepoOp;
exports.validateRepoOp = validateRepoOp;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isCommit(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#commit';
}
function validateCommit(v) {
    return lexicons_1.lexicons.validate('com.atproto.sync.subscribeRepos#commit', v);
}
function isIdentity(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#identity';
}
function validateIdentity(v) {
    return lexicons_1.lexicons.validate('com.atproto.sync.subscribeRepos#identity', v);
}
function isAccount(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#account';
}
function validateAccount(v) {
    return lexicons_1.lexicons.validate('com.atproto.sync.subscribeRepos#account', v);
}
function isHandle(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#handle';
}
function validateHandle(v) {
    return lexicons_1.lexicons.validate('com.atproto.sync.subscribeRepos#handle', v);
}
function isMigrate(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#migrate';
}
function validateMigrate(v) {
    return lexicons_1.lexicons.validate('com.atproto.sync.subscribeRepos#migrate', v);
}
function isTombstone(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#tombstone';
}
function validateTombstone(v) {
    return lexicons_1.lexicons.validate('com.atproto.sync.subscribeRepos#tombstone', v);
}
function isInfo(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#info';
}
function validateInfo(v) {
    return lexicons_1.lexicons.validate('com.atproto.sync.subscribeRepos#info', v);
}
function isRepoOp(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#repoOp';
}
function validateRepoOp(v) {
    return lexicons_1.lexicons.validate('com.atproto.sync.subscribeRepos#repoOp', v);
} //# sourceMappingURL=subscribeRepos.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/temp/addReservedHandle.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=addReservedHandle.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/temp/checkSignupQueue.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=checkSignupQueue.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/temp/fetchLabels.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=fetchLabels.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/com/atproto/temp/requestPhoneVerification.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=requestPhoneVerification.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/actor/defs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isProfileViewBasic = isProfileViewBasic;
exports.validateProfileViewBasic = validateProfileViewBasic;
exports.isProfileView = isProfileView;
exports.validateProfileView = validateProfileView;
exports.isProfileViewDetailed = isProfileViewDetailed;
exports.validateProfileViewDetailed = validateProfileViewDetailed;
exports.isProfileAssociated = isProfileAssociated;
exports.validateProfileAssociated = validateProfileAssociated;
exports.isProfileAssociatedChat = isProfileAssociatedChat;
exports.validateProfileAssociatedChat = validateProfileAssociatedChat;
exports.isViewerState = isViewerState;
exports.validateViewerState = validateViewerState;
exports.isKnownFollowers = isKnownFollowers;
exports.validateKnownFollowers = validateKnownFollowers;
exports.isAdultContentPref = isAdultContentPref;
exports.validateAdultContentPref = validateAdultContentPref;
exports.isContentLabelPref = isContentLabelPref;
exports.validateContentLabelPref = validateContentLabelPref;
exports.isSavedFeed = isSavedFeed;
exports.validateSavedFeed = validateSavedFeed;
exports.isSavedFeedsPrefV2 = isSavedFeedsPrefV2;
exports.validateSavedFeedsPrefV2 = validateSavedFeedsPrefV2;
exports.isSavedFeedsPref = isSavedFeedsPref;
exports.validateSavedFeedsPref = validateSavedFeedsPref;
exports.isPersonalDetailsPref = isPersonalDetailsPref;
exports.validatePersonalDetailsPref = validatePersonalDetailsPref;
exports.isFeedViewPref = isFeedViewPref;
exports.validateFeedViewPref = validateFeedViewPref;
exports.isThreadViewPref = isThreadViewPref;
exports.validateThreadViewPref = validateThreadViewPref;
exports.isInterestsPref = isInterestsPref;
exports.validateInterestsPref = validateInterestsPref;
exports.isMutedWord = isMutedWord;
exports.validateMutedWord = validateMutedWord;
exports.isMutedWordsPref = isMutedWordsPref;
exports.validateMutedWordsPref = validateMutedWordsPref;
exports.isHiddenPostsPref = isHiddenPostsPref;
exports.validateHiddenPostsPref = validateHiddenPostsPref;
exports.isLabelersPref = isLabelersPref;
exports.validateLabelersPref = validateLabelersPref;
exports.isLabelerPrefItem = isLabelerPrefItem;
exports.validateLabelerPrefItem = validateLabelerPrefItem;
exports.isBskyAppStatePref = isBskyAppStatePref;
exports.validateBskyAppStatePref = validateBskyAppStatePref;
exports.isBskyAppProgressGuide = isBskyAppProgressGuide;
exports.validateBskyAppProgressGuide = validateBskyAppProgressGuide;
exports.isNux = isNux;
exports.validateNux = validateNux;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isProfileViewBasic(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#profileViewBasic';
}
function validateProfileViewBasic(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#profileViewBasic', v);
}
function isProfileView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#profileView';
}
function validateProfileView(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#profileView', v);
}
function isProfileViewDetailed(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#profileViewDetailed';
}
function validateProfileViewDetailed(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#profileViewDetailed', v);
}
function isProfileAssociated(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#profileAssociated';
}
function validateProfileAssociated(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#profileAssociated', v);
}
function isProfileAssociatedChat(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#profileAssociatedChat';
}
function validateProfileAssociatedChat(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#profileAssociatedChat', v);
}
function isViewerState(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#viewerState';
}
function validateViewerState(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#viewerState', v);
}
function isKnownFollowers(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#knownFollowers';
}
function validateKnownFollowers(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#knownFollowers', v);
}
function isAdultContentPref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#adultContentPref';
}
function validateAdultContentPref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#adultContentPref', v);
}
function isContentLabelPref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#contentLabelPref';
}
function validateContentLabelPref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#contentLabelPref', v);
}
function isSavedFeed(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#savedFeed';
}
function validateSavedFeed(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#savedFeed', v);
}
function isSavedFeedsPrefV2(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#savedFeedsPrefV2';
}
function validateSavedFeedsPrefV2(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#savedFeedsPrefV2', v);
}
function isSavedFeedsPref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#savedFeedsPref';
}
function validateSavedFeedsPref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#savedFeedsPref', v);
}
function isPersonalDetailsPref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#personalDetailsPref';
}
function validatePersonalDetailsPref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#personalDetailsPref', v);
}
function isFeedViewPref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#feedViewPref';
}
function validateFeedViewPref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#feedViewPref', v);
}
function isThreadViewPref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#threadViewPref';
}
function validateThreadViewPref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#threadViewPref', v);
}
function isInterestsPref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#interestsPref';
}
function validateInterestsPref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#interestsPref', v);
}
function isMutedWord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#mutedWord';
}
function validateMutedWord(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#mutedWord', v);
}
function isMutedWordsPref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#mutedWordsPref';
}
function validateMutedWordsPref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#mutedWordsPref', v);
}
function isHiddenPostsPref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#hiddenPostsPref';
}
function validateHiddenPostsPref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#hiddenPostsPref', v);
}
function isLabelersPref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#labelersPref';
}
function validateLabelersPref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#labelersPref', v);
}
function isLabelerPrefItem(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#labelerPrefItem';
}
function validateLabelerPrefItem(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#labelerPrefItem', v);
}
function isBskyAppStatePref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#bskyAppStatePref';
}
function validateBskyAppStatePref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#bskyAppStatePref', v);
}
function isBskyAppProgressGuide(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#bskyAppProgressGuide';
}
function validateBskyAppProgressGuide(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#bskyAppProgressGuide', v);
}
function isNux(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#nux';
}
function validateNux(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#nux', v);
} //# sourceMappingURL=defs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getPreferences.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getPreferences.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getProfile.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getProfile.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getProfiles.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getProfiles.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getSuggestions.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getSuggestions.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/actor/profile.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.actor.profile#main' || v.$type === 'app.bsky.actor.profile');
}
function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.profile#main', v);
} //# sourceMappingURL=profile.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/actor/putPreferences.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=putPreferences.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/actor/searchActors.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=searchActors.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/actor/searchActorsTypeahead.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=searchActorsTypeahead.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/embed/defs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isAspectRatio = isAspectRatio;
exports.validateAspectRatio = validateAspectRatio;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isAspectRatio(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.defs#aspectRatio';
}
function validateAspectRatio(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.defs#aspectRatio', v);
} //# sourceMappingURL=defs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/embed/external.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMain = isMain;
exports.validateMain = validateMain;
exports.isExternal = isExternal;
exports.validateExternal = validateExternal;
exports.isView = isView;
exports.validateView = validateView;
exports.isViewExternal = isViewExternal;
exports.validateViewExternal = validateViewExternal;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isMain(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.embed.external#main' || v.$type === 'app.bsky.embed.external');
}
function validateMain(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.external#main', v);
}
function isExternal(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.external#external';
}
function validateExternal(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.external#external', v);
}
function isView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.external#view';
}
function validateView(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.external#view', v);
}
function isViewExternal(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.external#viewExternal';
}
function validateViewExternal(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.external#viewExternal', v);
} //# sourceMappingURL=external.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/embed/images.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMain = isMain;
exports.validateMain = validateMain;
exports.isImage = isImage;
exports.validateImage = validateImage;
exports.isView = isView;
exports.validateView = validateView;
exports.isViewImage = isViewImage;
exports.validateViewImage = validateViewImage;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isMain(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.embed.images#main' || v.$type === 'app.bsky.embed.images');
}
function validateMain(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.images#main', v);
}
function isImage(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.images#image';
}
function validateImage(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.images#image', v);
}
function isView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.images#view';
}
function validateView(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.images#view', v);
}
function isViewImage(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.images#viewImage';
}
function validateViewImage(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.images#viewImage', v);
} //# sourceMappingURL=images.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/embed/record.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMain = isMain;
exports.validateMain = validateMain;
exports.isView = isView;
exports.validateView = validateView;
exports.isViewRecord = isViewRecord;
exports.validateViewRecord = validateViewRecord;
exports.isViewNotFound = isViewNotFound;
exports.validateViewNotFound = validateViewNotFound;
exports.isViewBlocked = isViewBlocked;
exports.validateViewBlocked = validateViewBlocked;
exports.isViewDetached = isViewDetached;
exports.validateViewDetached = validateViewDetached;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isMain(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.embed.record#main' || v.$type === 'app.bsky.embed.record');
}
function validateMain(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.record#main', v);
}
function isView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.record#view';
}
function validateView(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.record#view', v);
}
function isViewRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.record#viewRecord';
}
function validateViewRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.record#viewRecord', v);
}
function isViewNotFound(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.record#viewNotFound';
}
function validateViewNotFound(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.record#viewNotFound', v);
}
function isViewBlocked(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.record#viewBlocked';
}
function validateViewBlocked(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.record#viewBlocked', v);
}
function isViewDetached(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.record#viewDetached';
}
function validateViewDetached(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.record#viewDetached', v);
} //# sourceMappingURL=record.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/embed/recordWithMedia.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMain = isMain;
exports.validateMain = validateMain;
exports.isView = isView;
exports.validateView = validateView;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isMain(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.embed.recordWithMedia#main' || v.$type === 'app.bsky.embed.recordWithMedia');
}
function validateMain(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.recordWithMedia#main', v);
}
function isView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.recordWithMedia#view';
}
function validateView(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.recordWithMedia#view', v);
} //# sourceMappingURL=recordWithMedia.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/embed/video.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMain = isMain;
exports.validateMain = validateMain;
exports.isCaption = isCaption;
exports.validateCaption = validateCaption;
exports.isView = isView;
exports.validateView = validateView;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isMain(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.embed.video#main' || v.$type === 'app.bsky.embed.video');
}
function validateMain(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.video#main', v);
}
function isCaption(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.video#caption';
}
function validateCaption(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.video#caption', v);
}
function isView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.video#view';
}
function validateView(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.video#view', v);
} //# sourceMappingURL=video.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/defs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.INTERACTIONSHARE = exports.INTERACTIONQUOTE = exports.INTERACTIONREPLY = exports.INTERACTIONREPOST = exports.INTERACTIONLIKE = exports.INTERACTIONSEEN = exports.CONTENTMODEVIDEO = exports.CONTENTMODEUNSPECIFIED = exports.CLICKTHROUGHEMBED = exports.CLICKTHROUGHREPOSTER = exports.CLICKTHROUGHAUTHOR = exports.CLICKTHROUGHITEM = exports.REQUESTMORE = exports.REQUESTLESS = void 0;
exports.isPostView = isPostView;
exports.validatePostView = validatePostView;
exports.isViewerState = isViewerState;
exports.validateViewerState = validateViewerState;
exports.isFeedViewPost = isFeedViewPost;
exports.validateFeedViewPost = validateFeedViewPost;
exports.isReplyRef = isReplyRef;
exports.validateReplyRef = validateReplyRef;
exports.isReasonRepost = isReasonRepost;
exports.validateReasonRepost = validateReasonRepost;
exports.isReasonPin = isReasonPin;
exports.validateReasonPin = validateReasonPin;
exports.isThreadViewPost = isThreadViewPost;
exports.validateThreadViewPost = validateThreadViewPost;
exports.isNotFoundPost = isNotFoundPost;
exports.validateNotFoundPost = validateNotFoundPost;
exports.isBlockedPost = isBlockedPost;
exports.validateBlockedPost = validateBlockedPost;
exports.isBlockedAuthor = isBlockedAuthor;
exports.validateBlockedAuthor = validateBlockedAuthor;
exports.isGeneratorView = isGeneratorView;
exports.validateGeneratorView = validateGeneratorView;
exports.isGeneratorViewerState = isGeneratorViewerState;
exports.validateGeneratorViewerState = validateGeneratorViewerState;
exports.isSkeletonFeedPost = isSkeletonFeedPost;
exports.validateSkeletonFeedPost = validateSkeletonFeedPost;
exports.isSkeletonReasonRepost = isSkeletonReasonRepost;
exports.validateSkeletonReasonRepost = validateSkeletonReasonRepost;
exports.isSkeletonReasonPin = isSkeletonReasonPin;
exports.validateSkeletonReasonPin = validateSkeletonReasonPin;
exports.isThreadgateView = isThreadgateView;
exports.validateThreadgateView = validateThreadgateView;
exports.isInteraction = isInteraction;
exports.validateInteraction = validateInteraction;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isPostView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#postView';
}
function validatePostView(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#postView', v);
}
function isViewerState(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#viewerState';
}
function validateViewerState(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#viewerState', v);
}
function isFeedViewPost(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#feedViewPost';
}
function validateFeedViewPost(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#feedViewPost', v);
}
function isReplyRef(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#replyRef';
}
function validateReplyRef(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#replyRef', v);
}
function isReasonRepost(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#reasonRepost';
}
function validateReasonRepost(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#reasonRepost', v);
}
function isReasonPin(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#reasonPin';
}
function validateReasonPin(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#reasonPin', v);
}
function isThreadViewPost(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#threadViewPost';
}
function validateThreadViewPost(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#threadViewPost', v);
}
function isNotFoundPost(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#notFoundPost';
}
function validateNotFoundPost(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#notFoundPost', v);
}
function isBlockedPost(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#blockedPost';
}
function validateBlockedPost(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#blockedPost', v);
}
function isBlockedAuthor(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#blockedAuthor';
}
function validateBlockedAuthor(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#blockedAuthor', v);
}
function isGeneratorView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#generatorView';
}
function validateGeneratorView(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#generatorView', v);
}
function isGeneratorViewerState(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#generatorViewerState';
}
function validateGeneratorViewerState(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#generatorViewerState', v);
}
function isSkeletonFeedPost(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#skeletonFeedPost';
}
function validateSkeletonFeedPost(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#skeletonFeedPost', v);
}
function isSkeletonReasonRepost(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#skeletonReasonRepost';
}
function validateSkeletonReasonRepost(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#skeletonReasonRepost', v);
}
function isSkeletonReasonPin(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#skeletonReasonPin';
}
function validateSkeletonReasonPin(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#skeletonReasonPin', v);
}
function isThreadgateView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#threadgateView';
}
function validateThreadgateView(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#threadgateView', v);
}
function isInteraction(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#interaction';
}
function validateInteraction(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#interaction', v);
}
/** Request that less content like the given feed item be shown in the feed */ exports.REQUESTLESS = 'app.bsky.feed.defs#requestLess';
/** Request that more content like the given feed item be shown in the feed */ exports.REQUESTMORE = 'app.bsky.feed.defs#requestMore';
/** User clicked through to the feed item */ exports.CLICKTHROUGHITEM = 'app.bsky.feed.defs#clickthroughItem';
/** User clicked through to the author of the feed item */ exports.CLICKTHROUGHAUTHOR = 'app.bsky.feed.defs#clickthroughAuthor';
/** User clicked through to the reposter of the feed item */ exports.CLICKTHROUGHREPOSTER = 'app.bsky.feed.defs#clickthroughReposter';
/** User clicked through to the embedded content of the feed item */ exports.CLICKTHROUGHEMBED = 'app.bsky.feed.defs#clickthroughEmbed';
/** Declares the feed generator returns any types of posts. */ exports.CONTENTMODEUNSPECIFIED = 'app.bsky.feed.defs#contentModeUnspecified';
/** Declares the feed generator returns posts containing app.bsky.embed.video embeds. */ exports.CONTENTMODEVIDEO = 'app.bsky.feed.defs#contentModeVideo';
/** Feed item was seen by user */ exports.INTERACTIONSEEN = 'app.bsky.feed.defs#interactionSeen';
/** User liked the feed item */ exports.INTERACTIONLIKE = 'app.bsky.feed.defs#interactionLike';
/** User reposted the feed item */ exports.INTERACTIONREPOST = 'app.bsky.feed.defs#interactionRepost';
/** User replied to the feed item */ exports.INTERACTIONREPLY = 'app.bsky.feed.defs#interactionReply';
/** User quoted the feed item */ exports.INTERACTIONQUOTE = 'app.bsky.feed.defs#interactionQuote';
/** User shared the feed item */ exports.INTERACTIONSHARE = 'app.bsky.feed.defs#interactionShare'; //# sourceMappingURL=defs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/describeFeedGenerator.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isFeed = isFeed;
exports.validateFeed = validateFeed;
exports.isLinks = isLinks;
exports.validateLinks = validateLinks;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function toKnownErr(e) {
    return e;
}
function isFeed(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.describeFeedGenerator#feed';
}
function validateFeed(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.describeFeedGenerator#feed', v);
}
function isLinks(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.describeFeedGenerator#links';
}
function validateLinks(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.describeFeedGenerator#links', v);
} //# sourceMappingURL=describeFeedGenerator.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/generator.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.feed.generator#main' || v.$type === 'app.bsky.feed.generator');
}
function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.generator#main', v);
} //# sourceMappingURL=generator.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorFeeds.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getActorFeeds.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedGenerator.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getFeedGenerator.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedGenerators.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getFeedGenerators.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getLikes.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isLike = isLike;
exports.validateLike = validateLike;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function toKnownErr(e) {
    return e;
}
function isLike(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.getLikes#like';
}
function validateLike(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.getLikes#like', v);
} //# sourceMappingURL=getLikes.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPosts.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getPosts.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getQuotes.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getQuotes.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getRepostedBy.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getRepostedBy.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getSuggestedFeeds.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getSuggestedFeeds.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getTimeline.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getTimeline.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/like.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.feed.like#main' || v.$type === 'app.bsky.feed.like');
}
function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.like#main', v);
} //# sourceMappingURL=like.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/post.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
exports.isReplyRef = isReplyRef;
exports.validateReplyRef = validateReplyRef;
exports.isEntity = isEntity;
exports.validateEntity = validateEntity;
exports.isTextSlice = isTextSlice;
exports.validateTextSlice = validateTextSlice;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.feed.post#main' || v.$type === 'app.bsky.feed.post');
}
function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.post#main', v);
}
function isReplyRef(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.post#replyRef';
}
function validateReplyRef(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.post#replyRef', v);
}
function isEntity(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.post#entity';
}
function validateEntity(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.post#entity', v);
}
function isTextSlice(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.post#textSlice';
}
function validateTextSlice(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.post#textSlice', v);
} //# sourceMappingURL=post.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/postgate.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
exports.isDisableRule = isDisableRule;
exports.validateDisableRule = validateDisableRule;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.feed.postgate#main' || v.$type === 'app.bsky.feed.postgate');
}
function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.postgate#main', v);
}
function isDisableRule(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.postgate#disableRule';
}
function validateDisableRule(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.postgate#disableRule', v);
} //# sourceMappingURL=postgate.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/repost.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.feed.repost#main' || v.$type === 'app.bsky.feed.repost');
}
function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.repost#main', v);
} //# sourceMappingURL=repost.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/sendInteractions.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=sendInteractions.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/threadgate.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
exports.isMentionRule = isMentionRule;
exports.validateMentionRule = validateMentionRule;
exports.isFollowingRule = isFollowingRule;
exports.validateFollowingRule = validateFollowingRule;
exports.isListRule = isListRule;
exports.validateListRule = validateListRule;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.feed.threadgate#main' || v.$type === 'app.bsky.feed.threadgate');
}
function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.threadgate#main', v);
}
function isMentionRule(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.threadgate#mentionRule';
}
function validateMentionRule(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.threadgate#mentionRule', v);
}
function isFollowingRule(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.threadgate#followingRule';
}
function validateFollowingRule(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.threadgate#followingRule', v);
}
function isListRule(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.threadgate#listRule';
}
function validateListRule(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.threadgate#listRule', v);
} //# sourceMappingURL=threadgate.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/block.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.graph.block#main' || v.$type === 'app.bsky.graph.block');
}
function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.block#main', v);
} //# sourceMappingURL=block.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/defs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.REFERENCELIST = exports.CURATELIST = exports.MODLIST = void 0;
exports.isListViewBasic = isListViewBasic;
exports.validateListViewBasic = validateListViewBasic;
exports.isListView = isListView;
exports.validateListView = validateListView;
exports.isListItemView = isListItemView;
exports.validateListItemView = validateListItemView;
exports.isStarterPackView = isStarterPackView;
exports.validateStarterPackView = validateStarterPackView;
exports.isStarterPackViewBasic = isStarterPackViewBasic;
exports.validateStarterPackViewBasic = validateStarterPackViewBasic;
exports.isListViewerState = isListViewerState;
exports.validateListViewerState = validateListViewerState;
exports.isNotFoundActor = isNotFoundActor;
exports.validateNotFoundActor = validateNotFoundActor;
exports.isRelationship = isRelationship;
exports.validateRelationship = validateRelationship;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isListViewBasic(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#listViewBasic';
}
function validateListViewBasic(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.defs#listViewBasic', v);
}
function isListView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#listView';
}
function validateListView(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.defs#listView', v);
}
function isListItemView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#listItemView';
}
function validateListItemView(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.defs#listItemView', v);
}
function isStarterPackView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#starterPackView';
}
function validateStarterPackView(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.defs#starterPackView', v);
}
function isStarterPackViewBasic(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#starterPackViewBasic';
}
function validateStarterPackViewBasic(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.defs#starterPackViewBasic', v);
}
/** A list of actors to apply an aggregate moderation action (mute/block) on. */ exports.MODLIST = 'app.bsky.graph.defs#modlist';
/** A list of actors used for curation purposes such as list feeds or interaction gating. */ exports.CURATELIST = 'app.bsky.graph.defs#curatelist';
/** A list of actors used for only for reference purposes such as within a starter pack. */ exports.REFERENCELIST = 'app.bsky.graph.defs#referencelist';
function isListViewerState(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#listViewerState';
}
function validateListViewerState(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.defs#listViewerState', v);
}
function isNotFoundActor(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#notFoundActor';
}
function validateNotFoundActor(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.defs#notFoundActor', v);
}
function isRelationship(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#relationship';
}
function validateRelationship(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.defs#relationship', v);
} //# sourceMappingURL=defs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/follow.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.graph.follow#main' || v.$type === 'app.bsky.graph.follow');
}
function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.follow#main', v);
} //# sourceMappingURL=follow.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getActorStarterPacks.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getActorStarterPacks.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getBlocks.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getBlocks.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getFollowers.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getFollowers.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getFollows.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getFollows.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getKnownFollowers.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getKnownFollowers.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getList.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getList.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getListBlocks.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getListBlocks.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getListMutes.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getListMutes.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getLists.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getLists.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getMutes.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getMutes.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getStarterPack.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getStarterPack.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getStarterPacks.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getStarterPacks.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getSuggestedFollowsByActor.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getSuggestedFollowsByActor.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/list.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.graph.list#main' || v.$type === 'app.bsky.graph.list');
}
function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.list#main', v);
} //# sourceMappingURL=list.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/listblock.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.graph.listblock#main' || v.$type === 'app.bsky.graph.listblock');
}
function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.listblock#main', v);
} //# sourceMappingURL=listblock.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/listitem.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.graph.listitem#main' || v.$type === 'app.bsky.graph.listitem');
}
function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.listitem#main', v);
} //# sourceMappingURL=listitem.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteActor.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=muteActor.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteActorList.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=muteActorList.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteThread.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=muteThread.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/searchStarterPacks.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=searchStarterPacks.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/starterpack.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
exports.isFeedItem = isFeedItem;
exports.validateFeedItem = validateFeedItem;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.graph.starterpack#main' || v.$type === 'app.bsky.graph.starterpack');
}
function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.starterpack#main', v);
}
function isFeedItem(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.starterpack#feedItem';
}
function validateFeedItem(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.starterpack#feedItem', v);
} //# sourceMappingURL=starterpack.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteActor.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=unmuteActor.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteActorList.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=unmuteActorList.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteThread.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=unmuteThread.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/labeler/defs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isLabelerView = isLabelerView;
exports.validateLabelerView = validateLabelerView;
exports.isLabelerViewDetailed = isLabelerViewDetailed;
exports.validateLabelerViewDetailed = validateLabelerViewDetailed;
exports.isLabelerViewerState = isLabelerViewerState;
exports.validateLabelerViewerState = validateLabelerViewerState;
exports.isLabelerPolicies = isLabelerPolicies;
exports.validateLabelerPolicies = validateLabelerPolicies;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isLabelerView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.labeler.defs#labelerView';
}
function validateLabelerView(v) {
    return lexicons_1.lexicons.validate('app.bsky.labeler.defs#labelerView', v);
}
function isLabelerViewDetailed(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.labeler.defs#labelerViewDetailed';
}
function validateLabelerViewDetailed(v) {
    return lexicons_1.lexicons.validate('app.bsky.labeler.defs#labelerViewDetailed', v);
}
function isLabelerViewerState(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.labeler.defs#labelerViewerState';
}
function validateLabelerViewerState(v) {
    return lexicons_1.lexicons.validate('app.bsky.labeler.defs#labelerViewerState', v);
}
function isLabelerPolicies(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.labeler.defs#labelerPolicies';
}
function validateLabelerPolicies(v) {
    return lexicons_1.lexicons.validate('app.bsky.labeler.defs#labelerPolicies', v);
} //# sourceMappingURL=defs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/labeler/getServices.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getServices.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/labeler/service.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.labeler.service#main' || v.$type === 'app.bsky.labeler.service');
}
function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.labeler.service#main', v);
} //# sourceMappingURL=service.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/notification/getUnreadCount.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getUnreadCount.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/notification/listNotifications.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isNotification = isNotification;
exports.validateNotification = validateNotification;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function toKnownErr(e) {
    return e;
}
function isNotification(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.notification.listNotifications#notification';
}
function validateNotification(v) {
    return lexicons_1.lexicons.validate('app.bsky.notification.listNotifications#notification', v);
} //# sourceMappingURL=listNotifications.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/notification/putPreferences.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=putPreferences.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/notification/registerPush.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=registerPush.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/notification/updateSeen.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=updateSeen.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/richtext/facet.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMain = isMain;
exports.validateMain = validateMain;
exports.isMention = isMention;
exports.validateMention = validateMention;
exports.isLink = isLink;
exports.validateLink = validateLink;
exports.isTag = isTag;
exports.validateTag = validateTag;
exports.isByteSlice = isByteSlice;
exports.validateByteSlice = validateByteSlice;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isMain(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.richtext.facet#main' || v.$type === 'app.bsky.richtext.facet');
}
function validateMain(v) {
    return lexicons_1.lexicons.validate('app.bsky.richtext.facet#main', v);
}
function isMention(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.richtext.facet#mention';
}
function validateMention(v) {
    return lexicons_1.lexicons.validate('app.bsky.richtext.facet#mention', v);
}
function isLink(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.richtext.facet#link';
}
function validateLink(v) {
    return lexicons_1.lexicons.validate('app.bsky.richtext.facet#link', v);
}
function isTag(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.richtext.facet#tag';
}
function validateTag(v) {
    return lexicons_1.lexicons.validate('app.bsky.richtext.facet#tag', v);
}
function isByteSlice(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.richtext.facet#byteSlice';
}
function validateByteSlice(v) {
    return lexicons_1.lexicons.validate('app.bsky.richtext.facet#byteSlice', v);
} //# sourceMappingURL=facet.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/defs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isSkeletonSearchPost = isSkeletonSearchPost;
exports.validateSkeletonSearchPost = validateSkeletonSearchPost;
exports.isSkeletonSearchActor = isSkeletonSearchActor;
exports.validateSkeletonSearchActor = validateSkeletonSearchActor;
exports.isSkeletonSearchStarterPack = isSkeletonSearchStarterPack;
exports.validateSkeletonSearchStarterPack = validateSkeletonSearchStarterPack;
exports.isTrendingTopic = isTrendingTopic;
exports.validateTrendingTopic = validateTrendingTopic;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isSkeletonSearchPost(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.unspecced.defs#skeletonSearchPost';
}
function validateSkeletonSearchPost(v) {
    return lexicons_1.lexicons.validate('app.bsky.unspecced.defs#skeletonSearchPost', v);
}
function isSkeletonSearchActor(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.unspecced.defs#skeletonSearchActor';
}
function validateSkeletonSearchActor(v) {
    return lexicons_1.lexicons.validate('app.bsky.unspecced.defs#skeletonSearchActor', v);
}
function isSkeletonSearchStarterPack(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.unspecced.defs#skeletonSearchStarterPack';
}
function validateSkeletonSearchStarterPack(v) {
    return lexicons_1.lexicons.validate('app.bsky.unspecced.defs#skeletonSearchStarterPack', v);
}
function isTrendingTopic(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.unspecced.defs#trendingTopic';
}
function validateTrendingTopic(v) {
    return lexicons_1.lexicons.validate('app.bsky.unspecced.defs#trendingTopic', v);
} //# sourceMappingURL=defs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getConfig.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getConfig.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getPopularFeedGenerators.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getPopularFeedGenerators.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getSuggestionsSkeleton.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getSuggestionsSkeleton.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getTaggedSuggestions.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isSuggestion = isSuggestion;
exports.validateSuggestion = validateSuggestion;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function toKnownErr(e) {
    return e;
}
function isSuggestion(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.unspecced.getTaggedSuggestions#suggestion';
}
function validateSuggestion(v) {
    return lexicons_1.lexicons.validate('app.bsky.unspecced.getTaggedSuggestions#suggestion', v);
} //# sourceMappingURL=getTaggedSuggestions.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getTrendingTopics.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getTrendingTopics.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/video/defs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isJobStatus = isJobStatus;
exports.validateJobStatus = validateJobStatus;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isJobStatus(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.video.defs#jobStatus';
}
function validateJobStatus(v) {
    return lexicons_1.lexicons.validate('app.bsky.video.defs#jobStatus', v);
} //# sourceMappingURL=defs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/video/getJobStatus.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getJobStatus.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/video/getUploadLimits.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getUploadLimits.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/app/bsky/video/uploadVideo.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=uploadVideo.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/actor/declaration.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'chat.bsky.actor.declaration#main' || v.$type === 'chat.bsky.actor.declaration');
}
function validateRecord(v) {
    return lexicons_1.lexicons.validate('chat.bsky.actor.declaration#main', v);
} //# sourceMappingURL=declaration.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/actor/defs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isProfileViewBasic = isProfileViewBasic;
exports.validateProfileViewBasic = validateProfileViewBasic;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isProfileViewBasic(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.actor.defs#profileViewBasic';
}
function validateProfileViewBasic(v) {
    return lexicons_1.lexicons.validate('chat.bsky.actor.defs#profileViewBasic', v);
} //# sourceMappingURL=defs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/actor/deleteAccount.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=deleteAccount.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/actor/exportAccountData.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=exportAccountData.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/defs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMessageRef = isMessageRef;
exports.validateMessageRef = validateMessageRef;
exports.isMessageInput = isMessageInput;
exports.validateMessageInput = validateMessageInput;
exports.isMessageView = isMessageView;
exports.validateMessageView = validateMessageView;
exports.isDeletedMessageView = isDeletedMessageView;
exports.validateDeletedMessageView = validateDeletedMessageView;
exports.isMessageViewSender = isMessageViewSender;
exports.validateMessageViewSender = validateMessageViewSender;
exports.isConvoView = isConvoView;
exports.validateConvoView = validateConvoView;
exports.isLogBeginConvo = isLogBeginConvo;
exports.validateLogBeginConvo = validateLogBeginConvo;
exports.isLogLeaveConvo = isLogLeaveConvo;
exports.validateLogLeaveConvo = validateLogLeaveConvo;
exports.isLogCreateMessage = isLogCreateMessage;
exports.validateLogCreateMessage = validateLogCreateMessage;
exports.isLogDeleteMessage = isLogDeleteMessage;
exports.validateLogDeleteMessage = validateLogDeleteMessage;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isMessageRef(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.defs#messageRef';
}
function validateMessageRef(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.defs#messageRef', v);
}
function isMessageInput(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.defs#messageInput';
}
function validateMessageInput(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.defs#messageInput', v);
}
function isMessageView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.defs#messageView';
}
function validateMessageView(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.defs#messageView', v);
}
function isDeletedMessageView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.defs#deletedMessageView';
}
function validateDeletedMessageView(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.defs#deletedMessageView', v);
}
function isMessageViewSender(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.defs#messageViewSender';
}
function validateMessageViewSender(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.defs#messageViewSender', v);
}
function isConvoView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.defs#convoView';
}
function validateConvoView(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.defs#convoView', v);
}
function isLogBeginConvo(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.defs#logBeginConvo';
}
function validateLogBeginConvo(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.defs#logBeginConvo', v);
}
function isLogLeaveConvo(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.defs#logLeaveConvo';
}
function validateLogLeaveConvo(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.defs#logLeaveConvo', v);
}
function isLogCreateMessage(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.defs#logCreateMessage';
}
function validateLogCreateMessage(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.defs#logCreateMessage', v);
}
function isLogDeleteMessage(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.defs#logDeleteMessage';
}
function validateLogDeleteMessage(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.defs#logDeleteMessage', v);
} //# sourceMappingURL=defs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/deleteMessageForSelf.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=deleteMessageForSelf.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getConvo.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getConvo.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getConvoForMembers.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getConvoForMembers.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getLog.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getLog.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getMessages.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getMessages.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/leaveConvo.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=leaveConvo.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/listConvos.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=listConvos.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/muteConvo.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=muteConvo.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/sendMessage.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=sendMessage.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/sendMessageBatch.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isBatchItem = isBatchItem;
exports.validateBatchItem = validateBatchItem;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function toKnownErr(e) {
    return e;
}
function isBatchItem(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.sendMessageBatch#batchItem';
}
function validateBatchItem(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.sendMessageBatch#batchItem', v);
} //# sourceMappingURL=sendMessageBatch.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/unmuteConvo.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=unmuteConvo.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/updateRead.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=updateRead.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/moderation/getActorMetadata.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isMetadata = isMetadata;
exports.validateMetadata = validateMetadata;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function toKnownErr(e) {
    return e;
}
function isMetadata(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.moderation.getActorMetadata#metadata';
}
function validateMetadata(v) {
    return lexicons_1.lexicons.validate('chat.bsky.moderation.getActorMetadata#metadata', v);
} //# sourceMappingURL=getActorMetadata.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/moderation/getMessageContext.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getMessageContext.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/moderation/updateActorAccess.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=updateActorAccess.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/defs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isTemplateView = isTemplateView;
exports.validateTemplateView = validateTemplateView;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isTemplateView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.communication.defs#templateView';
}
function validateTemplateView(v) {
    return lexicons_1.lexicons.validate('tools.ozone.communication.defs#templateView', v);
} //# sourceMappingURL=defs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/deleteTemplate.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=deleteTemplate.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/listTemplates.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=listTemplates.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/defs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.REVIEWNONE = exports.REVIEWCLOSED = exports.REVIEWESCALATED = exports.REVIEWOPEN = void 0;
exports.isModEventView = isModEventView;
exports.validateModEventView = validateModEventView;
exports.isModEventViewDetail = isModEventViewDetail;
exports.validateModEventViewDetail = validateModEventViewDetail;
exports.isSubjectStatusView = isSubjectStatusView;
exports.validateSubjectStatusView = validateSubjectStatusView;
exports.isModEventTakedown = isModEventTakedown;
exports.validateModEventTakedown = validateModEventTakedown;
exports.isModEventReverseTakedown = isModEventReverseTakedown;
exports.validateModEventReverseTakedown = validateModEventReverseTakedown;
exports.isModEventResolveAppeal = isModEventResolveAppeal;
exports.validateModEventResolveAppeal = validateModEventResolveAppeal;
exports.isModEventComment = isModEventComment;
exports.validateModEventComment = validateModEventComment;
exports.isModEventReport = isModEventReport;
exports.validateModEventReport = validateModEventReport;
exports.isModEventLabel = isModEventLabel;
exports.validateModEventLabel = validateModEventLabel;
exports.isModEventAcknowledge = isModEventAcknowledge;
exports.validateModEventAcknowledge = validateModEventAcknowledge;
exports.isModEventEscalate = isModEventEscalate;
exports.validateModEventEscalate = validateModEventEscalate;
exports.isModEventMute = isModEventMute;
exports.validateModEventMute = validateModEventMute;
exports.isModEventUnmute = isModEventUnmute;
exports.validateModEventUnmute = validateModEventUnmute;
exports.isModEventMuteReporter = isModEventMuteReporter;
exports.validateModEventMuteReporter = validateModEventMuteReporter;
exports.isModEventUnmuteReporter = isModEventUnmuteReporter;
exports.validateModEventUnmuteReporter = validateModEventUnmuteReporter;
exports.isModEventEmail = isModEventEmail;
exports.validateModEventEmail = validateModEventEmail;
exports.isModEventDivert = isModEventDivert;
exports.validateModEventDivert = validateModEventDivert;
exports.isModEventTag = isModEventTag;
exports.validateModEventTag = validateModEventTag;
exports.isAccountEvent = isAccountEvent;
exports.validateAccountEvent = validateAccountEvent;
exports.isIdentityEvent = isIdentityEvent;
exports.validateIdentityEvent = validateIdentityEvent;
exports.isRecordEvent = isRecordEvent;
exports.validateRecordEvent = validateRecordEvent;
exports.isRepoView = isRepoView;
exports.validateRepoView = validateRepoView;
exports.isRepoViewDetail = isRepoViewDetail;
exports.validateRepoViewDetail = validateRepoViewDetail;
exports.isRepoViewNotFound = isRepoViewNotFound;
exports.validateRepoViewNotFound = validateRepoViewNotFound;
exports.isRecordView = isRecordView;
exports.validateRecordView = validateRecordView;
exports.isRecordViewDetail = isRecordViewDetail;
exports.validateRecordViewDetail = validateRecordViewDetail;
exports.isRecordViewNotFound = isRecordViewNotFound;
exports.validateRecordViewNotFound = validateRecordViewNotFound;
exports.isModeration = isModeration;
exports.validateModeration = validateModeration;
exports.isModerationDetail = isModerationDetail;
exports.validateModerationDetail = validateModerationDetail;
exports.isBlobView = isBlobView;
exports.validateBlobView = validateBlobView;
exports.isImageDetails = isImageDetails;
exports.validateImageDetails = validateImageDetails;
exports.isVideoDetails = isVideoDetails;
exports.validateVideoDetails = validateVideoDetails;
exports.isAccountHosting = isAccountHosting;
exports.validateAccountHosting = validateAccountHosting;
exports.isRecordHosting = isRecordHosting;
exports.validateRecordHosting = validateRecordHosting;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isModEventView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventView';
}
function validateModEventView(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventView', v);
}
function isModEventViewDetail(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventViewDetail';
}
function validateModEventViewDetail(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventViewDetail', v);
}
function isSubjectStatusView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#subjectStatusView';
}
function validateSubjectStatusView(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#subjectStatusView', v);
}
/** Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator */ exports.REVIEWOPEN = 'tools.ozone.moderation.defs#reviewOpen';
/** Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator */ exports.REVIEWESCALATED = 'tools.ozone.moderation.defs#reviewEscalated';
/** Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator */ exports.REVIEWCLOSED = 'tools.ozone.moderation.defs#reviewClosed';
/** Moderator review status of a subject: Unnecessary. Indicates that the subject does not need a review at the moment but there is probably some moderation related metadata available for it */ exports.REVIEWNONE = 'tools.ozone.moderation.defs#reviewNone';
function isModEventTakedown(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventTakedown';
}
function validateModEventTakedown(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventTakedown', v);
}
function isModEventReverseTakedown(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventReverseTakedown';
}
function validateModEventReverseTakedown(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventReverseTakedown', v);
}
function isModEventResolveAppeal(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventResolveAppeal';
}
function validateModEventResolveAppeal(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventResolveAppeal', v);
}
function isModEventComment(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventComment';
}
function validateModEventComment(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventComment', v);
}
function isModEventReport(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventReport';
}
function validateModEventReport(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventReport', v);
}
function isModEventLabel(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventLabel';
}
function validateModEventLabel(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventLabel', v);
}
function isModEventAcknowledge(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventAcknowledge';
}
function validateModEventAcknowledge(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventAcknowledge', v);
}
function isModEventEscalate(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventEscalate';
}
function validateModEventEscalate(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventEscalate', v);
}
function isModEventMute(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventMute';
}
function validateModEventMute(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventMute', v);
}
function isModEventUnmute(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventUnmute';
}
function validateModEventUnmute(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventUnmute', v);
}
function isModEventMuteReporter(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventMuteReporter';
}
function validateModEventMuteReporter(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventMuteReporter', v);
}
function isModEventUnmuteReporter(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventUnmuteReporter';
}
function validateModEventUnmuteReporter(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventUnmuteReporter', v);
}
function isModEventEmail(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventEmail';
}
function validateModEventEmail(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventEmail', v);
}
function isModEventDivert(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventDivert';
}
function validateModEventDivert(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventDivert', v);
}
function isModEventTag(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventTag';
}
function validateModEventTag(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventTag', v);
}
function isAccountEvent(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#accountEvent';
}
function validateAccountEvent(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#accountEvent', v);
}
function isIdentityEvent(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#identityEvent';
}
function validateIdentityEvent(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#identityEvent', v);
}
function isRecordEvent(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#recordEvent';
}
function validateRecordEvent(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#recordEvent', v);
}
function isRepoView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#repoView';
}
function validateRepoView(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#repoView', v);
}
function isRepoViewDetail(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#repoViewDetail';
}
function validateRepoViewDetail(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#repoViewDetail', v);
}
function isRepoViewNotFound(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#repoViewNotFound';
}
function validateRepoViewNotFound(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#repoViewNotFound', v);
}
function isRecordView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#recordView';
}
function validateRecordView(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#recordView', v);
}
function isRecordViewDetail(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#recordViewDetail';
}
function validateRecordViewDetail(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#recordViewDetail', v);
}
function isRecordViewNotFound(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#recordViewNotFound';
}
function validateRecordViewNotFound(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#recordViewNotFound', v);
}
function isModeration(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#moderation';
}
function validateModeration(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#moderation', v);
}
function isModerationDetail(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#moderationDetail';
}
function validateModerationDetail(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#moderationDetail', v);
}
function isBlobView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#blobView';
}
function validateBlobView(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#blobView', v);
}
function isImageDetails(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#imageDetails';
}
function validateImageDetails(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#imageDetails', v);
}
function isVideoDetails(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#videoDetails';
}
function validateVideoDetails(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#videoDetails', v);
}
function isAccountHosting(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#accountHosting';
}
function validateAccountHosting(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#accountHosting', v);
}
function isRecordHosting(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#recordHosting';
}
function validateRecordHosting(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#recordHosting', v);
} //# sourceMappingURL=defs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getEvent.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getEvent.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRecords.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getRecords.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRepos.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=getRepos.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/queryEvents.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=queryEvents.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/queryStatuses.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=queryStatuses.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/searchRepos.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=searchRepos.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/server/getConfig.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isServiceConfig = isServiceConfig;
exports.validateServiceConfig = validateServiceConfig;
exports.isViewerConfig = isViewerConfig;
exports.validateViewerConfig = validateViewerConfig;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function toKnownErr(e) {
    return e;
}
function isServiceConfig(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.server.getConfig#serviceConfig';
}
function validateServiceConfig(v) {
    return lexicons_1.lexicons.validate('tools.ozone.server.getConfig#serviceConfig', v);
}
function isViewerConfig(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.server.getConfig#viewerConfig';
}
function validateViewerConfig(v) {
    return lexicons_1.lexicons.validate('tools.ozone.server.getConfig#viewerConfig', v);
} //# sourceMappingURL=getConfig.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/set/addValues.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=addValues.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/set/defs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isSet = isSet;
exports.validateSet = validateSet;
exports.isSetView = isSetView;
exports.validateSetView = validateSetView;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isSet(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.set.defs#set';
}
function validateSet(v) {
    return lexicons_1.lexicons.validate('tools.ozone.set.defs#set', v);
}
function isSetView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.set.defs#setView';
}
function validateSetView(v) {
    return lexicons_1.lexicons.validate('tools.ozone.set.defs#setView', v);
} //# sourceMappingURL=defs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/set/querySets.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=querySets.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/set/upsertSet.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=upsertSet.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/setting/defs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isOption = isOption;
exports.validateOption = validateOption;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isOption(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.setting.defs#option';
}
function validateOption(v) {
    return lexicons_1.lexicons.validate('tools.ozone.setting.defs#option', v);
} //# sourceMappingURL=defs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/setting/listOptions.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=listOptions.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/setting/removeOptions.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=removeOptions.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/setting/upsertOption.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=upsertOption.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/signature/defs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isSigDetail = isSigDetail;
exports.validateSigDetail = validateSigDetail;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isSigDetail(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.signature.defs#sigDetail';
}
function validateSigDetail(v) {
    return lexicons_1.lexicons.validate('tools.ozone.signature.defs#sigDetail', v);
} //# sourceMappingURL=defs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/signature/findCorrelation.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=findCorrelation.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/signature/findRelatedAccounts.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isRelatedAccount = isRelatedAccount;
exports.validateRelatedAccount = validateRelatedAccount;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function toKnownErr(e) {
    return e;
}
function isRelatedAccount(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.signature.findRelatedAccounts#relatedAccount';
}
function validateRelatedAccount(v) {
    return lexicons_1.lexicons.validate('tools.ozone.signature.findRelatedAccounts#relatedAccount', v);
} //# sourceMappingURL=findRelatedAccounts.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/signature/searchAccounts.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=searchAccounts.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/team/defs.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ROLETRIAGE = exports.ROLEMODERATOR = exports.ROLEADMIN = void 0;
exports.isMember = isMember;
exports.validateMember = validateMember;
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/util.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
function isMember(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.team.defs#member';
}
function validateMember(v) {
    return lexicons_1.lexicons.validate('tools.ozone.team.defs#member', v);
}
/** Admin role. Highest level of access, can perform all actions. */ exports.ROLEADMIN = 'tools.ozone.team.defs#roleAdmin';
/** Moderator role. Can perform most actions. */ exports.ROLEMODERATOR = 'tools.ozone.team.defs#roleModerator';
/** Triage role. Mostly intended for monitoring and escalating issues. */ exports.ROLETRIAGE = 'tools.ozone.team.defs#roleTriage'; //# sourceMappingURL=defs.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/team/listMembers.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
function toKnownErr(e) {
    return e;
} //# sourceMappingURL=listMembers.js.map
}}),
"[project]/node_modules/@atproto/api/dist/client/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ComAtprotoServerDeleteAccount = exports.ComAtprotoServerDefs = exports.ComAtprotoServerDeactivateAccount = exports.ComAtprotoServerCreateSession = exports.ComAtprotoServerCreateInviteCodes = exports.ComAtprotoServerCreateInviteCode = exports.ComAtprotoServerCreateAppPassword = exports.ComAtprotoServerCreateAccount = exports.ComAtprotoServerConfirmEmail = exports.ComAtprotoServerCheckAccountStatus = exports.ComAtprotoServerActivateAccount = exports.ComAtprotoRepoUploadBlob = exports.ComAtprotoRepoStrongRef = exports.ComAtprotoRepoPutRecord = exports.ComAtprotoRepoListRecords = exports.ComAtprotoRepoListMissingBlobs = exports.ComAtprotoRepoImportRepo = exports.ComAtprotoRepoGetRecord = exports.ComAtprotoRepoDescribeRepo = exports.ComAtprotoRepoDeleteRecord = exports.ComAtprotoRepoDefs = exports.ComAtprotoRepoCreateRecord = exports.ComAtprotoRepoApplyWrites = exports.ComAtprotoModerationDefs = exports.ComAtprotoModerationCreateReport = exports.ComAtprotoLexiconSchema = exports.ComAtprotoLabelSubscribeLabels = exports.ComAtprotoLabelQueryLabels = exports.ComAtprotoLabelDefs = exports.ComAtprotoIdentityUpdateHandle = exports.ComAtprotoIdentitySubmitPlcOperation = exports.ComAtprotoIdentitySignPlcOperation = exports.ComAtprotoIdentityResolveHandle = exports.ComAtprotoIdentityRequestPlcOperationSignature = exports.ComAtprotoIdentityGetRecommendedDidCredentials = exports.ComAtprotoAdminUpdateSubjectStatus = exports.ComAtprotoAdminUpdateAccountPassword = exports.ComAtprotoAdminUpdateAccountHandle = exports.ComAtprotoAdminUpdateAccountEmail = exports.ComAtprotoAdminSendEmail = exports.ComAtprotoAdminSearchAccounts = exports.ComAtprotoAdminGetSubjectStatus = exports.ComAtprotoAdminGetInviteCodes = exports.ComAtprotoAdminGetAccountInfos = exports.ComAtprotoAdminGetAccountInfo = exports.ComAtprotoAdminEnableAccountInvites = exports.ComAtprotoAdminDisableInviteCodes = exports.ComAtprotoAdminDisableAccountInvites = exports.ComAtprotoAdminDeleteAccount = exports.ComAtprotoAdminDefs = void 0;
exports.AppBskyFeedGenerator = exports.AppBskyFeedDescribeFeedGenerator = exports.AppBskyFeedDefs = exports.AppBskyEmbedVideo = exports.AppBskyEmbedRecordWithMedia = exports.AppBskyEmbedRecord = exports.AppBskyEmbedImages = exports.AppBskyEmbedExternal = exports.AppBskyEmbedDefs = exports.AppBskyActorSearchActorsTypeahead = exports.AppBskyActorSearchActors = exports.AppBskyActorPutPreferences = exports.AppBskyActorProfile = exports.AppBskyActorGetSuggestions = exports.AppBskyActorGetProfiles = exports.AppBskyActorGetProfile = exports.AppBskyActorGetPreferences = exports.AppBskyActorDefs = exports.ComAtprotoTempRequestPhoneVerification = exports.ComAtprotoTempFetchLabels = exports.ComAtprotoTempCheckSignupQueue = exports.ComAtprotoTempAddReservedHandle = exports.ComAtprotoSyncSubscribeRepos = exports.ComAtprotoSyncRequestCrawl = exports.ComAtprotoSyncNotifyOfUpdate = exports.ComAtprotoSyncListRepos = exports.ComAtprotoSyncListBlobs = exports.ComAtprotoSyncGetRepoStatus = exports.ComAtprotoSyncGetRepo = exports.ComAtprotoSyncGetRecord = exports.ComAtprotoSyncGetLatestCommit = exports.ComAtprotoSyncGetHead = exports.ComAtprotoSyncGetCheckout = exports.ComAtprotoSyncGetBlocks = exports.ComAtprotoSyncGetBlob = exports.ComAtprotoServerUpdateEmail = exports.ComAtprotoServerRevokeAppPassword = exports.ComAtprotoServerResetPassword = exports.ComAtprotoServerReserveSigningKey = exports.ComAtprotoServerRequestPasswordReset = exports.ComAtprotoServerRequestEmailUpdate = exports.ComAtprotoServerRequestEmailConfirmation = exports.ComAtprotoServerRequestAccountDelete = exports.ComAtprotoServerRefreshSession = exports.ComAtprotoServerListAppPasswords = exports.ComAtprotoServerGetSession = exports.ComAtprotoServerGetServiceAuth = exports.ComAtprotoServerGetAccountInviteCodes = exports.ComAtprotoServerDescribeServer = exports.ComAtprotoServerDeleteSession = void 0;
exports.AppBskyGraphUnmuteThread = exports.AppBskyGraphUnmuteActorList = exports.AppBskyGraphUnmuteActor = exports.AppBskyGraphStarterpack = exports.AppBskyGraphSearchStarterPacks = exports.AppBskyGraphMuteThread = exports.AppBskyGraphMuteActorList = exports.AppBskyGraphMuteActor = exports.AppBskyGraphListitem = exports.AppBskyGraphListblock = exports.AppBskyGraphList = exports.AppBskyGraphGetSuggestedFollowsByActor = exports.AppBskyGraphGetStarterPacks = exports.AppBskyGraphGetStarterPack = exports.AppBskyGraphGetRelationships = exports.AppBskyGraphGetMutes = exports.AppBskyGraphGetLists = exports.AppBskyGraphGetListMutes = exports.AppBskyGraphGetListBlocks = exports.AppBskyGraphGetList = exports.AppBskyGraphGetKnownFollowers = exports.AppBskyGraphGetFollows = exports.AppBskyGraphGetFollowers = exports.AppBskyGraphGetBlocks = exports.AppBskyGraphGetActorStarterPacks = exports.AppBskyGraphFollow = exports.AppBskyGraphDefs = exports.AppBskyGraphBlock = exports.AppBskyFeedThreadgate = exports.AppBskyFeedSendInteractions = exports.AppBskyFeedSearchPosts = exports.AppBskyFeedRepost = exports.AppBskyFeedPostgate = exports.AppBskyFeedPost = exports.AppBskyFeedLike = exports.AppBskyFeedGetTimeline = exports.AppBskyFeedGetSuggestedFeeds = exports.AppBskyFeedGetRepostedBy = exports.AppBskyFeedGetQuotes = exports.AppBskyFeedGetPosts = exports.AppBskyFeedGetPostThread = exports.AppBskyFeedGetListFeed = exports.AppBskyFeedGetLikes = exports.AppBskyFeedGetFeedSkeleton = exports.AppBskyFeedGetFeedGenerators = exports.AppBskyFeedGetFeedGenerator = exports.AppBskyFeedGetFeed = exports.AppBskyFeedGetAuthorFeed = exports.AppBskyFeedGetActorLikes = exports.AppBskyFeedGetActorFeeds = void 0;
exports.ToolsOzoneModerationGetEvent = exports.ToolsOzoneModerationEmitEvent = exports.ToolsOzoneModerationDefs = exports.ToolsOzoneCommunicationUpdateTemplate = exports.ToolsOzoneCommunicationListTemplates = exports.ToolsOzoneCommunicationDeleteTemplate = exports.ToolsOzoneCommunicationDefs = exports.ToolsOzoneCommunicationCreateTemplate = exports.ChatBskyModerationUpdateActorAccess = exports.ChatBskyModerationGetMessageContext = exports.ChatBskyModerationGetActorMetadata = exports.ChatBskyConvoUpdateRead = exports.ChatBskyConvoUnmuteConvo = exports.ChatBskyConvoSendMessageBatch = exports.ChatBskyConvoSendMessage = exports.ChatBskyConvoMuteConvo = exports.ChatBskyConvoListConvos = exports.ChatBskyConvoLeaveConvo = exports.ChatBskyConvoGetMessages = exports.ChatBskyConvoGetLog = exports.ChatBskyConvoGetConvoForMembers = exports.ChatBskyConvoGetConvo = exports.ChatBskyConvoDeleteMessageForSelf = exports.ChatBskyConvoDefs = exports.ChatBskyActorExportAccountData = exports.ChatBskyActorDeleteAccount = exports.ChatBskyActorDefs = exports.ChatBskyActorDeclaration = exports.AppBskyVideoUploadVideo = exports.AppBskyVideoGetUploadLimits = exports.AppBskyVideoGetJobStatus = exports.AppBskyVideoDefs = exports.AppBskyUnspeccedSearchStarterPacksSkeleton = exports.AppBskyUnspeccedSearchPostsSkeleton = exports.AppBskyUnspeccedSearchActorsSkeleton = exports.AppBskyUnspeccedGetTrendingTopics = exports.AppBskyUnspeccedGetTaggedSuggestions = exports.AppBskyUnspeccedGetSuggestionsSkeleton = exports.AppBskyUnspeccedGetPopularFeedGenerators = exports.AppBskyUnspeccedGetConfig = exports.AppBskyUnspeccedDefs = exports.AppBskyRichtextFacet = exports.AppBskyNotificationUpdateSeen = exports.AppBskyNotificationRegisterPush = exports.AppBskyNotificationPutPreferences = exports.AppBskyNotificationListNotifications = exports.AppBskyNotificationGetUnreadCount = exports.AppBskyLabelerService = exports.AppBskyLabelerGetServices = exports.AppBskyLabelerDefs = void 0;
exports.ProfileRecord = exports.AppBskyActorNS = exports.AppBskyNS = exports.AppNS = exports.ComAtprotoTempNS = exports.ComAtprotoSyncNS = exports.ComAtprotoServerNS = exports.ComAtprotoRepoNS = exports.ComAtprotoModerationNS = exports.SchemaRecord = exports.ComAtprotoLexiconNS = exports.ComAtprotoLabelNS = exports.ComAtprotoIdentityNS = exports.ComAtprotoAdminNS = exports.ComAtprotoNS = exports.ComNS = exports.AtpBaseClient = exports.TOOLS_OZONE_TEAM = exports.TOOLS_OZONE_MODERATION = exports.APP_BSKY_GRAPH = exports.APP_BSKY_FEED = exports.COM_ATPROTO_MODERATION = exports.ToolsOzoneTeamUpdateMember = exports.ToolsOzoneTeamListMembers = exports.ToolsOzoneTeamDeleteMember = exports.ToolsOzoneTeamDefs = exports.ToolsOzoneTeamAddMember = exports.ToolsOzoneSignatureSearchAccounts = exports.ToolsOzoneSignatureFindRelatedAccounts = exports.ToolsOzoneSignatureFindCorrelation = exports.ToolsOzoneSignatureDefs = exports.ToolsOzoneSettingUpsertOption = exports.ToolsOzoneSettingRemoveOptions = exports.ToolsOzoneSettingListOptions = exports.ToolsOzoneSettingDefs = exports.ToolsOzoneSetUpsertSet = exports.ToolsOzoneSetQuerySets = exports.ToolsOzoneSetGetValues = exports.ToolsOzoneSetDeleteValues = exports.ToolsOzoneSetDeleteSet = exports.ToolsOzoneSetDefs = exports.ToolsOzoneSetAddValues = exports.ToolsOzoneServerGetConfig = exports.ToolsOzoneModerationSearchRepos = exports.ToolsOzoneModerationQueryStatuses = exports.ToolsOzoneModerationQueryEvents = exports.ToolsOzoneModerationGetRepos = exports.ToolsOzoneModerationGetRepo = exports.ToolsOzoneModerationGetRecords = exports.ToolsOzoneModerationGetRecord = void 0;
exports.ToolsOzoneTeamNS = exports.ToolsOzoneSignatureNS = exports.ToolsOzoneSettingNS = exports.ToolsOzoneSetNS = exports.ToolsOzoneServerNS = exports.ToolsOzoneModerationNS = exports.ToolsOzoneCommunicationNS = exports.ToolsOzoneNS = exports.ToolsNS = exports.ChatBskyModerationNS = exports.ChatBskyConvoNS = exports.DeclarationRecord = exports.ChatBskyActorNS = exports.ChatBskyNS = exports.ChatNS = exports.AppBskyVideoNS = exports.AppBskyUnspeccedNS = exports.AppBskyRichtextNS = exports.AppBskyNotificationNS = exports.ServiceRecord = exports.AppBskyLabelerNS = exports.StarterpackRecord = exports.ListitemRecord = exports.ListblockRecord = exports.ListRecord = exports.FollowRecord = exports.BlockRecord = exports.AppBskyGraphNS = exports.ThreadgateRecord = exports.RepostRecord = exports.PostgateRecord = exports.PostRecord = exports.LikeRecord = exports.GeneratorRecord = exports.AppBskyFeedNS = exports.AppBskyEmbedNS = void 0;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
const ComAtprotoRepoApplyWrites = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/applyWrites.js [app-client] (ecmascript)"));
const ComAtprotoRepoCreateRecord = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/createRecord.js [app-client] (ecmascript)"));
const ComAtprotoRepoDeleteRecord = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/deleteRecord.js [app-client] (ecmascript)"));
const ComAtprotoRepoGetRecord = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/getRecord.js [app-client] (ecmascript)"));
const ComAtprotoRepoPutRecord = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/putRecord.js [app-client] (ecmascript)"));
const ComAtprotoServerConfirmEmail = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/confirmEmail.js [app-client] (ecmascript)"));
const ComAtprotoServerCreateAccount = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/createAccount.js [app-client] (ecmascript)"));
const ComAtprotoServerCreateAppPassword = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/createAppPassword.js [app-client] (ecmascript)"));
const ComAtprotoServerCreateSession = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/createSession.js [app-client] (ecmascript)"));
const ComAtprotoServerDeleteAccount = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteAccount.js [app-client] (ecmascript)"));
const ComAtprotoServerGetAccountInviteCodes = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/getAccountInviteCodes.js [app-client] (ecmascript)"));
const ComAtprotoServerGetServiceAuth = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/getServiceAuth.js [app-client] (ecmascript)"));
const ComAtprotoServerListAppPasswords = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/listAppPasswords.js [app-client] (ecmascript)"));
const ComAtprotoServerRefreshSession = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/refreshSession.js [app-client] (ecmascript)"));
const ComAtprotoServerResetPassword = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/resetPassword.js [app-client] (ecmascript)"));
const ComAtprotoServerUpdateEmail = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/updateEmail.js [app-client] (ecmascript)"));
const ComAtprotoSyncGetBlob = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlob.js [app-client] (ecmascript)"));
const ComAtprotoSyncGetBlocks = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlocks.js [app-client] (ecmascript)"));
const ComAtprotoSyncGetHead = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getHead.js [app-client] (ecmascript)"));
const ComAtprotoSyncGetLatestCommit = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getLatestCommit.js [app-client] (ecmascript)"));
const ComAtprotoSyncGetRecord = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRecord.js [app-client] (ecmascript)"));
const ComAtprotoSyncGetRepo = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRepo.js [app-client] (ecmascript)"));
const ComAtprotoSyncGetRepoStatus = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRepoStatus.js [app-client] (ecmascript)"));
const ComAtprotoSyncListBlobs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/listBlobs.js [app-client] (ecmascript)"));
const AppBskyFeedGetActorLikes = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorLikes.js [app-client] (ecmascript)"));
const AppBskyFeedGetAuthorFeed = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getAuthorFeed.js [app-client] (ecmascript)"));
const AppBskyFeedGetFeed = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeed.js [app-client] (ecmascript)"));
const AppBskyFeedGetFeedSkeleton = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedSkeleton.js [app-client] (ecmascript)"));
const AppBskyFeedGetListFeed = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getListFeed.js [app-client] (ecmascript)"));
const AppBskyFeedGetPostThread = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPostThread.js [app-client] (ecmascript)"));
const AppBskyFeedSearchPosts = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/searchPosts.js [app-client] (ecmascript)"));
const AppBskyGraphGetRelationships = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getRelationships.js [app-client] (ecmascript)"));
const AppBskyUnspeccedSearchActorsSkeleton = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchActorsSkeleton.js [app-client] (ecmascript)"));
const AppBskyUnspeccedSearchPostsSkeleton = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchPostsSkeleton.js [app-client] (ecmascript)"));
const AppBskyUnspeccedSearchStarterPacksSkeleton = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchStarterPacksSkeleton.js [app-client] (ecmascript)"));
const ToolsOzoneCommunicationCreateTemplate = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/createTemplate.js [app-client] (ecmascript)"));
const ToolsOzoneCommunicationUpdateTemplate = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/updateTemplate.js [app-client] (ecmascript)"));
const ToolsOzoneModerationEmitEvent = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/emitEvent.js [app-client] (ecmascript)"));
const ToolsOzoneModerationGetRecord = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRecord.js [app-client] (ecmascript)"));
const ToolsOzoneModerationGetRepo = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRepo.js [app-client] (ecmascript)"));
const ToolsOzoneSetDeleteSet = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/set/deleteSet.js [app-client] (ecmascript)"));
const ToolsOzoneSetDeleteValues = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/set/deleteValues.js [app-client] (ecmascript)"));
const ToolsOzoneSetGetValues = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/set/getValues.js [app-client] (ecmascript)"));
const ToolsOzoneTeamAddMember = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/team/addMember.js [app-client] (ecmascript)"));
const ToolsOzoneTeamDeleteMember = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/team/deleteMember.js [app-client] (ecmascript)"));
const ToolsOzoneTeamUpdateMember = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/team/updateMember.js [app-client] (ecmascript)"));
exports.ComAtprotoAdminDefs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/defs.js [app-client] (ecmascript)"));
exports.ComAtprotoAdminDeleteAccount = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/deleteAccount.js [app-client] (ecmascript)"));
exports.ComAtprotoAdminDisableAccountInvites = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/disableAccountInvites.js [app-client] (ecmascript)"));
exports.ComAtprotoAdminDisableInviteCodes = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/disableInviteCodes.js [app-client] (ecmascript)"));
exports.ComAtprotoAdminEnableAccountInvites = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/enableAccountInvites.js [app-client] (ecmascript)"));
exports.ComAtprotoAdminGetAccountInfo = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getAccountInfo.js [app-client] (ecmascript)"));
exports.ComAtprotoAdminGetAccountInfos = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getAccountInfos.js [app-client] (ecmascript)"));
exports.ComAtprotoAdminGetInviteCodes = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getInviteCodes.js [app-client] (ecmascript)"));
exports.ComAtprotoAdminGetSubjectStatus = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getSubjectStatus.js [app-client] (ecmascript)"));
exports.ComAtprotoAdminSearchAccounts = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/searchAccounts.js [app-client] (ecmascript)"));
exports.ComAtprotoAdminSendEmail = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/sendEmail.js [app-client] (ecmascript)"));
exports.ComAtprotoAdminUpdateAccountEmail = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountEmail.js [app-client] (ecmascript)"));
exports.ComAtprotoAdminUpdateAccountHandle = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountHandle.js [app-client] (ecmascript)"));
exports.ComAtprotoAdminUpdateAccountPassword = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountPassword.js [app-client] (ecmascript)"));
exports.ComAtprotoAdminUpdateSubjectStatus = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateSubjectStatus.js [app-client] (ecmascript)"));
exports.ComAtprotoIdentityGetRecommendedDidCredentials = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/identity/getRecommendedDidCredentials.js [app-client] (ecmascript)"));
exports.ComAtprotoIdentityRequestPlcOperationSignature = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/identity/requestPlcOperationSignature.js [app-client] (ecmascript)"));
exports.ComAtprotoIdentityResolveHandle = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/identity/resolveHandle.js [app-client] (ecmascript)"));
exports.ComAtprotoIdentitySignPlcOperation = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/identity/signPlcOperation.js [app-client] (ecmascript)"));
exports.ComAtprotoIdentitySubmitPlcOperation = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/identity/submitPlcOperation.js [app-client] (ecmascript)"));
exports.ComAtprotoIdentityUpdateHandle = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/identity/updateHandle.js [app-client] (ecmascript)"));
exports.ComAtprotoLabelDefs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/label/defs.js [app-client] (ecmascript)"));
exports.ComAtprotoLabelQueryLabels = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/label/queryLabels.js [app-client] (ecmascript)"));
exports.ComAtprotoLabelSubscribeLabels = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/label/subscribeLabels.js [app-client] (ecmascript)"));
exports.ComAtprotoLexiconSchema = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/lexicon/schema.js [app-client] (ecmascript)"));
exports.ComAtprotoModerationCreateReport = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/moderation/createReport.js [app-client] (ecmascript)"));
exports.ComAtprotoModerationDefs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/moderation/defs.js [app-client] (ecmascript)"));
exports.ComAtprotoRepoApplyWrites = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/applyWrites.js [app-client] (ecmascript)"));
exports.ComAtprotoRepoCreateRecord = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/createRecord.js [app-client] (ecmascript)"));
exports.ComAtprotoRepoDefs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/defs.js [app-client] (ecmascript)"));
exports.ComAtprotoRepoDeleteRecord = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/deleteRecord.js [app-client] (ecmascript)"));
exports.ComAtprotoRepoDescribeRepo = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/describeRepo.js [app-client] (ecmascript)"));
exports.ComAtprotoRepoGetRecord = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/getRecord.js [app-client] (ecmascript)"));
exports.ComAtprotoRepoImportRepo = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/importRepo.js [app-client] (ecmascript)"));
exports.ComAtprotoRepoListMissingBlobs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/listMissingBlobs.js [app-client] (ecmascript)"));
exports.ComAtprotoRepoListRecords = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/listRecords.js [app-client] (ecmascript)"));
exports.ComAtprotoRepoPutRecord = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/putRecord.js [app-client] (ecmascript)"));
exports.ComAtprotoRepoStrongRef = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/strongRef.js [app-client] (ecmascript)"));
exports.ComAtprotoRepoUploadBlob = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/repo/uploadBlob.js [app-client] (ecmascript)"));
exports.ComAtprotoServerActivateAccount = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/activateAccount.js [app-client] (ecmascript)"));
exports.ComAtprotoServerCheckAccountStatus = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/checkAccountStatus.js [app-client] (ecmascript)"));
exports.ComAtprotoServerConfirmEmail = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/confirmEmail.js [app-client] (ecmascript)"));
exports.ComAtprotoServerCreateAccount = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/createAccount.js [app-client] (ecmascript)"));
exports.ComAtprotoServerCreateAppPassword = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/createAppPassword.js [app-client] (ecmascript)"));
exports.ComAtprotoServerCreateInviteCode = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/createInviteCode.js [app-client] (ecmascript)"));
exports.ComAtprotoServerCreateInviteCodes = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/createInviteCodes.js [app-client] (ecmascript)"));
exports.ComAtprotoServerCreateSession = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/createSession.js [app-client] (ecmascript)"));
exports.ComAtprotoServerDeactivateAccount = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/deactivateAccount.js [app-client] (ecmascript)"));
exports.ComAtprotoServerDefs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/defs.js [app-client] (ecmascript)"));
exports.ComAtprotoServerDeleteAccount = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteAccount.js [app-client] (ecmascript)"));
exports.ComAtprotoServerDeleteSession = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteSession.js [app-client] (ecmascript)"));
exports.ComAtprotoServerDescribeServer = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/describeServer.js [app-client] (ecmascript)"));
exports.ComAtprotoServerGetAccountInviteCodes = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/getAccountInviteCodes.js [app-client] (ecmascript)"));
exports.ComAtprotoServerGetServiceAuth = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/getServiceAuth.js [app-client] (ecmascript)"));
exports.ComAtprotoServerGetSession = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/getSession.js [app-client] (ecmascript)"));
exports.ComAtprotoServerListAppPasswords = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/listAppPasswords.js [app-client] (ecmascript)"));
exports.ComAtprotoServerRefreshSession = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/refreshSession.js [app-client] (ecmascript)"));
exports.ComAtprotoServerRequestAccountDelete = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestAccountDelete.js [app-client] (ecmascript)"));
exports.ComAtprotoServerRequestEmailConfirmation = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestEmailConfirmation.js [app-client] (ecmascript)"));
exports.ComAtprotoServerRequestEmailUpdate = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestEmailUpdate.js [app-client] (ecmascript)"));
exports.ComAtprotoServerRequestPasswordReset = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestPasswordReset.js [app-client] (ecmascript)"));
exports.ComAtprotoServerReserveSigningKey = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/reserveSigningKey.js [app-client] (ecmascript)"));
exports.ComAtprotoServerResetPassword = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/resetPassword.js [app-client] (ecmascript)"));
exports.ComAtprotoServerRevokeAppPassword = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/revokeAppPassword.js [app-client] (ecmascript)"));
exports.ComAtprotoServerUpdateEmail = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/server/updateEmail.js [app-client] (ecmascript)"));
exports.ComAtprotoSyncGetBlob = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlob.js [app-client] (ecmascript)"));
exports.ComAtprotoSyncGetBlocks = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlocks.js [app-client] (ecmascript)"));
exports.ComAtprotoSyncGetCheckout = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getCheckout.js [app-client] (ecmascript)"));
exports.ComAtprotoSyncGetHead = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getHead.js [app-client] (ecmascript)"));
exports.ComAtprotoSyncGetLatestCommit = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getLatestCommit.js [app-client] (ecmascript)"));
exports.ComAtprotoSyncGetRecord = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRecord.js [app-client] (ecmascript)"));
exports.ComAtprotoSyncGetRepo = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRepo.js [app-client] (ecmascript)"));
exports.ComAtprotoSyncGetRepoStatus = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRepoStatus.js [app-client] (ecmascript)"));
exports.ComAtprotoSyncListBlobs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/listBlobs.js [app-client] (ecmascript)"));
exports.ComAtprotoSyncListRepos = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/listRepos.js [app-client] (ecmascript)"));
exports.ComAtprotoSyncNotifyOfUpdate = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/notifyOfUpdate.js [app-client] (ecmascript)"));
exports.ComAtprotoSyncRequestCrawl = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/requestCrawl.js [app-client] (ecmascript)"));
exports.ComAtprotoSyncSubscribeRepos = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/sync/subscribeRepos.js [app-client] (ecmascript)"));
exports.ComAtprotoTempAddReservedHandle = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/temp/addReservedHandle.js [app-client] (ecmascript)"));
exports.ComAtprotoTempCheckSignupQueue = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/temp/checkSignupQueue.js [app-client] (ecmascript)"));
exports.ComAtprotoTempFetchLabels = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/temp/fetchLabels.js [app-client] (ecmascript)"));
exports.ComAtprotoTempRequestPhoneVerification = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/com/atproto/temp/requestPhoneVerification.js [app-client] (ecmascript)"));
exports.AppBskyActorDefs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/actor/defs.js [app-client] (ecmascript)"));
exports.AppBskyActorGetPreferences = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getPreferences.js [app-client] (ecmascript)"));
exports.AppBskyActorGetProfile = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getProfile.js [app-client] (ecmascript)"));
exports.AppBskyActorGetProfiles = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getProfiles.js [app-client] (ecmascript)"));
exports.AppBskyActorGetSuggestions = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getSuggestions.js [app-client] (ecmascript)"));
exports.AppBskyActorProfile = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/actor/profile.js [app-client] (ecmascript)"));
exports.AppBskyActorPutPreferences = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/actor/putPreferences.js [app-client] (ecmascript)"));
exports.AppBskyActorSearchActors = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/actor/searchActors.js [app-client] (ecmascript)"));
exports.AppBskyActorSearchActorsTypeahead = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/actor/searchActorsTypeahead.js [app-client] (ecmascript)"));
exports.AppBskyEmbedDefs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/embed/defs.js [app-client] (ecmascript)"));
exports.AppBskyEmbedExternal = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/embed/external.js [app-client] (ecmascript)"));
exports.AppBskyEmbedImages = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/embed/images.js [app-client] (ecmascript)"));
exports.AppBskyEmbedRecord = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/embed/record.js [app-client] (ecmascript)"));
exports.AppBskyEmbedRecordWithMedia = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/embed/recordWithMedia.js [app-client] (ecmascript)"));
exports.AppBskyEmbedVideo = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/embed/video.js [app-client] (ecmascript)"));
exports.AppBskyFeedDefs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/defs.js [app-client] (ecmascript)"));
exports.AppBskyFeedDescribeFeedGenerator = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/describeFeedGenerator.js [app-client] (ecmascript)"));
exports.AppBskyFeedGenerator = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/generator.js [app-client] (ecmascript)"));
exports.AppBskyFeedGetActorFeeds = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorFeeds.js [app-client] (ecmascript)"));
exports.AppBskyFeedGetActorLikes = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorLikes.js [app-client] (ecmascript)"));
exports.AppBskyFeedGetAuthorFeed = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getAuthorFeed.js [app-client] (ecmascript)"));
exports.AppBskyFeedGetFeed = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeed.js [app-client] (ecmascript)"));
exports.AppBskyFeedGetFeedGenerator = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedGenerator.js [app-client] (ecmascript)"));
exports.AppBskyFeedGetFeedGenerators = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedGenerators.js [app-client] (ecmascript)"));
exports.AppBskyFeedGetFeedSkeleton = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedSkeleton.js [app-client] (ecmascript)"));
exports.AppBskyFeedGetLikes = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getLikes.js [app-client] (ecmascript)"));
exports.AppBskyFeedGetListFeed = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getListFeed.js [app-client] (ecmascript)"));
exports.AppBskyFeedGetPostThread = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPostThread.js [app-client] (ecmascript)"));
exports.AppBskyFeedGetPosts = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPosts.js [app-client] (ecmascript)"));
exports.AppBskyFeedGetQuotes = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getQuotes.js [app-client] (ecmascript)"));
exports.AppBskyFeedGetRepostedBy = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getRepostedBy.js [app-client] (ecmascript)"));
exports.AppBskyFeedGetSuggestedFeeds = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getSuggestedFeeds.js [app-client] (ecmascript)"));
exports.AppBskyFeedGetTimeline = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getTimeline.js [app-client] (ecmascript)"));
exports.AppBskyFeedLike = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/like.js [app-client] (ecmascript)"));
exports.AppBskyFeedPost = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/post.js [app-client] (ecmascript)"));
exports.AppBskyFeedPostgate = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/postgate.js [app-client] (ecmascript)"));
exports.AppBskyFeedRepost = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/repost.js [app-client] (ecmascript)"));
exports.AppBskyFeedSearchPosts = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/searchPosts.js [app-client] (ecmascript)"));
exports.AppBskyFeedSendInteractions = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/sendInteractions.js [app-client] (ecmascript)"));
exports.AppBskyFeedThreadgate = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/feed/threadgate.js [app-client] (ecmascript)"));
exports.AppBskyGraphBlock = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/block.js [app-client] (ecmascript)"));
exports.AppBskyGraphDefs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/defs.js [app-client] (ecmascript)"));
exports.AppBskyGraphFollow = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/follow.js [app-client] (ecmascript)"));
exports.AppBskyGraphGetActorStarterPacks = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getActorStarterPacks.js [app-client] (ecmascript)"));
exports.AppBskyGraphGetBlocks = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getBlocks.js [app-client] (ecmascript)"));
exports.AppBskyGraphGetFollowers = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getFollowers.js [app-client] (ecmascript)"));
exports.AppBskyGraphGetFollows = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getFollows.js [app-client] (ecmascript)"));
exports.AppBskyGraphGetKnownFollowers = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getKnownFollowers.js [app-client] (ecmascript)"));
exports.AppBskyGraphGetList = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getList.js [app-client] (ecmascript)"));
exports.AppBskyGraphGetListBlocks = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getListBlocks.js [app-client] (ecmascript)"));
exports.AppBskyGraphGetListMutes = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getListMutes.js [app-client] (ecmascript)"));
exports.AppBskyGraphGetLists = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getLists.js [app-client] (ecmascript)"));
exports.AppBskyGraphGetMutes = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getMutes.js [app-client] (ecmascript)"));
exports.AppBskyGraphGetRelationships = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getRelationships.js [app-client] (ecmascript)"));
exports.AppBskyGraphGetStarterPack = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getStarterPack.js [app-client] (ecmascript)"));
exports.AppBskyGraphGetStarterPacks = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getStarterPacks.js [app-client] (ecmascript)"));
exports.AppBskyGraphGetSuggestedFollowsByActor = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getSuggestedFollowsByActor.js [app-client] (ecmascript)"));
exports.AppBskyGraphList = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/list.js [app-client] (ecmascript)"));
exports.AppBskyGraphListblock = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/listblock.js [app-client] (ecmascript)"));
exports.AppBskyGraphListitem = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/listitem.js [app-client] (ecmascript)"));
exports.AppBskyGraphMuteActor = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteActor.js [app-client] (ecmascript)"));
exports.AppBskyGraphMuteActorList = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteActorList.js [app-client] (ecmascript)"));
exports.AppBskyGraphMuteThread = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteThread.js [app-client] (ecmascript)"));
exports.AppBskyGraphSearchStarterPacks = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/searchStarterPacks.js [app-client] (ecmascript)"));
exports.AppBskyGraphStarterpack = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/starterpack.js [app-client] (ecmascript)"));
exports.AppBskyGraphUnmuteActor = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteActor.js [app-client] (ecmascript)"));
exports.AppBskyGraphUnmuteActorList = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteActorList.js [app-client] (ecmascript)"));
exports.AppBskyGraphUnmuteThread = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteThread.js [app-client] (ecmascript)"));
exports.AppBskyLabelerDefs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/labeler/defs.js [app-client] (ecmascript)"));
exports.AppBskyLabelerGetServices = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/labeler/getServices.js [app-client] (ecmascript)"));
exports.AppBskyLabelerService = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/labeler/service.js [app-client] (ecmascript)"));
exports.AppBskyNotificationGetUnreadCount = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/notification/getUnreadCount.js [app-client] (ecmascript)"));
exports.AppBskyNotificationListNotifications = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/notification/listNotifications.js [app-client] (ecmascript)"));
exports.AppBskyNotificationPutPreferences = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/notification/putPreferences.js [app-client] (ecmascript)"));
exports.AppBskyNotificationRegisterPush = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/notification/registerPush.js [app-client] (ecmascript)"));
exports.AppBskyNotificationUpdateSeen = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/notification/updateSeen.js [app-client] (ecmascript)"));
exports.AppBskyRichtextFacet = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/richtext/facet.js [app-client] (ecmascript)"));
exports.AppBskyUnspeccedDefs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/defs.js [app-client] (ecmascript)"));
exports.AppBskyUnspeccedGetConfig = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getConfig.js [app-client] (ecmascript)"));
exports.AppBskyUnspeccedGetPopularFeedGenerators = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getPopularFeedGenerators.js [app-client] (ecmascript)"));
exports.AppBskyUnspeccedGetSuggestionsSkeleton = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getSuggestionsSkeleton.js [app-client] (ecmascript)"));
exports.AppBskyUnspeccedGetTaggedSuggestions = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getTaggedSuggestions.js [app-client] (ecmascript)"));
exports.AppBskyUnspeccedGetTrendingTopics = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getTrendingTopics.js [app-client] (ecmascript)"));
exports.AppBskyUnspeccedSearchActorsSkeleton = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchActorsSkeleton.js [app-client] (ecmascript)"));
exports.AppBskyUnspeccedSearchPostsSkeleton = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchPostsSkeleton.js [app-client] (ecmascript)"));
exports.AppBskyUnspeccedSearchStarterPacksSkeleton = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchStarterPacksSkeleton.js [app-client] (ecmascript)"));
exports.AppBskyVideoDefs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/video/defs.js [app-client] (ecmascript)"));
exports.AppBskyVideoGetJobStatus = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/video/getJobStatus.js [app-client] (ecmascript)"));
exports.AppBskyVideoGetUploadLimits = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/video/getUploadLimits.js [app-client] (ecmascript)"));
exports.AppBskyVideoUploadVideo = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/app/bsky/video/uploadVideo.js [app-client] (ecmascript)"));
exports.ChatBskyActorDeclaration = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/actor/declaration.js [app-client] (ecmascript)"));
exports.ChatBskyActorDefs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/actor/defs.js [app-client] (ecmascript)"));
exports.ChatBskyActorDeleteAccount = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/actor/deleteAccount.js [app-client] (ecmascript)"));
exports.ChatBskyActorExportAccountData = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/actor/exportAccountData.js [app-client] (ecmascript)"));
exports.ChatBskyConvoDefs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/defs.js [app-client] (ecmascript)"));
exports.ChatBskyConvoDeleteMessageForSelf = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/deleteMessageForSelf.js [app-client] (ecmascript)"));
exports.ChatBskyConvoGetConvo = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getConvo.js [app-client] (ecmascript)"));
exports.ChatBskyConvoGetConvoForMembers = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getConvoForMembers.js [app-client] (ecmascript)"));
exports.ChatBskyConvoGetLog = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getLog.js [app-client] (ecmascript)"));
exports.ChatBskyConvoGetMessages = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getMessages.js [app-client] (ecmascript)"));
exports.ChatBskyConvoLeaveConvo = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/leaveConvo.js [app-client] (ecmascript)"));
exports.ChatBskyConvoListConvos = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/listConvos.js [app-client] (ecmascript)"));
exports.ChatBskyConvoMuteConvo = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/muteConvo.js [app-client] (ecmascript)"));
exports.ChatBskyConvoSendMessage = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/sendMessage.js [app-client] (ecmascript)"));
exports.ChatBskyConvoSendMessageBatch = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/sendMessageBatch.js [app-client] (ecmascript)"));
exports.ChatBskyConvoUnmuteConvo = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/unmuteConvo.js [app-client] (ecmascript)"));
exports.ChatBskyConvoUpdateRead = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/updateRead.js [app-client] (ecmascript)"));
exports.ChatBskyModerationGetActorMetadata = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/moderation/getActorMetadata.js [app-client] (ecmascript)"));
exports.ChatBskyModerationGetMessageContext = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/moderation/getMessageContext.js [app-client] (ecmascript)"));
exports.ChatBskyModerationUpdateActorAccess = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/chat/bsky/moderation/updateActorAccess.js [app-client] (ecmascript)"));
exports.ToolsOzoneCommunicationCreateTemplate = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/createTemplate.js [app-client] (ecmascript)"));
exports.ToolsOzoneCommunicationDefs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/defs.js [app-client] (ecmascript)"));
exports.ToolsOzoneCommunicationDeleteTemplate = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/deleteTemplate.js [app-client] (ecmascript)"));
exports.ToolsOzoneCommunicationListTemplates = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/listTemplates.js [app-client] (ecmascript)"));
exports.ToolsOzoneCommunicationUpdateTemplate = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/updateTemplate.js [app-client] (ecmascript)"));
exports.ToolsOzoneModerationDefs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/defs.js [app-client] (ecmascript)"));
exports.ToolsOzoneModerationEmitEvent = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/emitEvent.js [app-client] (ecmascript)"));
exports.ToolsOzoneModerationGetEvent = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getEvent.js [app-client] (ecmascript)"));
exports.ToolsOzoneModerationGetRecord = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRecord.js [app-client] (ecmascript)"));
exports.ToolsOzoneModerationGetRecords = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRecords.js [app-client] (ecmascript)"));
exports.ToolsOzoneModerationGetRepo = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRepo.js [app-client] (ecmascript)"));
exports.ToolsOzoneModerationGetRepos = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRepos.js [app-client] (ecmascript)"));
exports.ToolsOzoneModerationQueryEvents = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/queryEvents.js [app-client] (ecmascript)"));
exports.ToolsOzoneModerationQueryStatuses = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/queryStatuses.js [app-client] (ecmascript)"));
exports.ToolsOzoneModerationSearchRepos = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/searchRepos.js [app-client] (ecmascript)"));
exports.ToolsOzoneServerGetConfig = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/server/getConfig.js [app-client] (ecmascript)"));
exports.ToolsOzoneSetAddValues = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/set/addValues.js [app-client] (ecmascript)"));
exports.ToolsOzoneSetDefs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/set/defs.js [app-client] (ecmascript)"));
exports.ToolsOzoneSetDeleteSet = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/set/deleteSet.js [app-client] (ecmascript)"));
exports.ToolsOzoneSetDeleteValues = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/set/deleteValues.js [app-client] (ecmascript)"));
exports.ToolsOzoneSetGetValues = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/set/getValues.js [app-client] (ecmascript)"));
exports.ToolsOzoneSetQuerySets = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/set/querySets.js [app-client] (ecmascript)"));
exports.ToolsOzoneSetUpsertSet = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/set/upsertSet.js [app-client] (ecmascript)"));
exports.ToolsOzoneSettingDefs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/setting/defs.js [app-client] (ecmascript)"));
exports.ToolsOzoneSettingListOptions = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/setting/listOptions.js [app-client] (ecmascript)"));
exports.ToolsOzoneSettingRemoveOptions = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/setting/removeOptions.js [app-client] (ecmascript)"));
exports.ToolsOzoneSettingUpsertOption = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/setting/upsertOption.js [app-client] (ecmascript)"));
exports.ToolsOzoneSignatureDefs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/signature/defs.js [app-client] (ecmascript)"));
exports.ToolsOzoneSignatureFindCorrelation = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/signature/findCorrelation.js [app-client] (ecmascript)"));
exports.ToolsOzoneSignatureFindRelatedAccounts = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/signature/findRelatedAccounts.js [app-client] (ecmascript)"));
exports.ToolsOzoneSignatureSearchAccounts = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/signature/searchAccounts.js [app-client] (ecmascript)"));
exports.ToolsOzoneTeamAddMember = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/team/addMember.js [app-client] (ecmascript)"));
exports.ToolsOzoneTeamDefs = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/team/defs.js [app-client] (ecmascript)"));
exports.ToolsOzoneTeamDeleteMember = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/team/deleteMember.js [app-client] (ecmascript)"));
exports.ToolsOzoneTeamListMembers = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/team/listMembers.js [app-client] (ecmascript)"));
exports.ToolsOzoneTeamUpdateMember = __importStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/types/tools/ozone/team/updateMember.js [app-client] (ecmascript)"));
exports.COM_ATPROTO_MODERATION = {
    DefsReasonSpam: 'com.atproto.moderation.defs#reasonSpam',
    DefsReasonViolation: 'com.atproto.moderation.defs#reasonViolation',
    DefsReasonMisleading: 'com.atproto.moderation.defs#reasonMisleading',
    DefsReasonSexual: 'com.atproto.moderation.defs#reasonSexual',
    DefsReasonRude: 'com.atproto.moderation.defs#reasonRude',
    DefsReasonOther: 'com.atproto.moderation.defs#reasonOther',
    DefsReasonAppeal: 'com.atproto.moderation.defs#reasonAppeal'
};
exports.APP_BSKY_FEED = {
    DefsRequestLess: 'app.bsky.feed.defs#requestLess',
    DefsRequestMore: 'app.bsky.feed.defs#requestMore',
    DefsClickthroughItem: 'app.bsky.feed.defs#clickthroughItem',
    DefsClickthroughAuthor: 'app.bsky.feed.defs#clickthroughAuthor',
    DefsClickthroughReposter: 'app.bsky.feed.defs#clickthroughReposter',
    DefsClickthroughEmbed: 'app.bsky.feed.defs#clickthroughEmbed',
    DefsContentModeUnspecified: 'app.bsky.feed.defs#contentModeUnspecified',
    DefsContentModeVideo: 'app.bsky.feed.defs#contentModeVideo',
    DefsInteractionSeen: 'app.bsky.feed.defs#interactionSeen',
    DefsInteractionLike: 'app.bsky.feed.defs#interactionLike',
    DefsInteractionRepost: 'app.bsky.feed.defs#interactionRepost',
    DefsInteractionReply: 'app.bsky.feed.defs#interactionReply',
    DefsInteractionQuote: 'app.bsky.feed.defs#interactionQuote',
    DefsInteractionShare: 'app.bsky.feed.defs#interactionShare'
};
exports.APP_BSKY_GRAPH = {
    DefsModlist: 'app.bsky.graph.defs#modlist',
    DefsCuratelist: 'app.bsky.graph.defs#curatelist',
    DefsReferencelist: 'app.bsky.graph.defs#referencelist'
};
exports.TOOLS_OZONE_MODERATION = {
    DefsReviewOpen: 'tools.ozone.moderation.defs#reviewOpen',
    DefsReviewEscalated: 'tools.ozone.moderation.defs#reviewEscalated',
    DefsReviewClosed: 'tools.ozone.moderation.defs#reviewClosed',
    DefsReviewNone: 'tools.ozone.moderation.defs#reviewNone'
};
exports.TOOLS_OZONE_TEAM = {
    DefsRoleAdmin: 'tools.ozone.team.defs#roleAdmin',
    DefsRoleModerator: 'tools.ozone.team.defs#roleModerator',
    DefsRoleTriage: 'tools.ozone.team.defs#roleTriage'
};
class AtpBaseClient extends xrpc_1.XrpcClient {
    constructor(options){
        super(options, lexicons_1.schemas);
        Object.defineProperty(this, "com", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "app", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "chat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "tools", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.com = new ComNS(this);
        this.app = new AppNS(this);
        this.chat = new ChatNS(this);
        this.tools = new ToolsNS(this);
    }
    /** @deprecated use `this` instead */ get xrpc() {
        return this;
    }
}
exports.AtpBaseClient = AtpBaseClient;
class ComNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "atproto", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.atproto = new ComAtprotoNS(client);
    }
}
exports.ComNS = ComNS;
class ComAtprotoNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "admin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "identity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "label", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "lexicon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "moderation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "repo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "server", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "sync", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "temp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.admin = new ComAtprotoAdminNS(client);
        this.identity = new ComAtprotoIdentityNS(client);
        this.label = new ComAtprotoLabelNS(client);
        this.lexicon = new ComAtprotoLexiconNS(client);
        this.moderation = new ComAtprotoModerationNS(client);
        this.repo = new ComAtprotoRepoNS(client);
        this.server = new ComAtprotoServerNS(client);
        this.sync = new ComAtprotoSyncNS(client);
        this.temp = new ComAtprotoTempNS(client);
    }
}
exports.ComAtprotoNS = ComAtprotoNS;
class ComAtprotoAdminNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    deleteAccount(data, opts) {
        return this._client.call('com.atproto.admin.deleteAccount', opts?.qp, data, opts);
    }
    disableAccountInvites(data, opts) {
        return this._client.call('com.atproto.admin.disableAccountInvites', opts?.qp, data, opts);
    }
    disableInviteCodes(data, opts) {
        return this._client.call('com.atproto.admin.disableInviteCodes', opts?.qp, data, opts);
    }
    enableAccountInvites(data, opts) {
        return this._client.call('com.atproto.admin.enableAccountInvites', opts?.qp, data, opts);
    }
    getAccountInfo(params, opts) {
        return this._client.call('com.atproto.admin.getAccountInfo', params, undefined, opts);
    }
    getAccountInfos(params, opts) {
        return this._client.call('com.atproto.admin.getAccountInfos', params, undefined, opts);
    }
    getInviteCodes(params, opts) {
        return this._client.call('com.atproto.admin.getInviteCodes', params, undefined, opts);
    }
    getSubjectStatus(params, opts) {
        return this._client.call('com.atproto.admin.getSubjectStatus', params, undefined, opts);
    }
    searchAccounts(params, opts) {
        return this._client.call('com.atproto.admin.searchAccounts', params, undefined, opts);
    }
    sendEmail(data, opts) {
        return this._client.call('com.atproto.admin.sendEmail', opts?.qp, data, opts);
    }
    updateAccountEmail(data, opts) {
        return this._client.call('com.atproto.admin.updateAccountEmail', opts?.qp, data, opts);
    }
    updateAccountHandle(data, opts) {
        return this._client.call('com.atproto.admin.updateAccountHandle', opts?.qp, data, opts);
    }
    updateAccountPassword(data, opts) {
        return this._client.call('com.atproto.admin.updateAccountPassword', opts?.qp, data, opts);
    }
    updateSubjectStatus(data, opts) {
        return this._client.call('com.atproto.admin.updateSubjectStatus', opts?.qp, data, opts);
    }
}
exports.ComAtprotoAdminNS = ComAtprotoAdminNS;
class ComAtprotoIdentityNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    getRecommendedDidCredentials(params, opts) {
        return this._client.call('com.atproto.identity.getRecommendedDidCredentials', params, undefined, opts);
    }
    requestPlcOperationSignature(data, opts) {
        return this._client.call('com.atproto.identity.requestPlcOperationSignature', opts?.qp, data, opts);
    }
    resolveHandle(params, opts) {
        return this._client.call('com.atproto.identity.resolveHandle', params, undefined, opts);
    }
    signPlcOperation(data, opts) {
        return this._client.call('com.atproto.identity.signPlcOperation', opts?.qp, data, opts);
    }
    submitPlcOperation(data, opts) {
        return this._client.call('com.atproto.identity.submitPlcOperation', opts?.qp, data, opts);
    }
    updateHandle(data, opts) {
        return this._client.call('com.atproto.identity.updateHandle', opts?.qp, data, opts);
    }
}
exports.ComAtprotoIdentityNS = ComAtprotoIdentityNS;
class ComAtprotoLabelNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    queryLabels(params, opts) {
        return this._client.call('com.atproto.label.queryLabels', params, undefined, opts);
    }
}
exports.ComAtprotoLabelNS = ComAtprotoLabelNS;
class ComAtprotoLexiconNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "schema", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.schema = new SchemaRecord(client);
    }
}
exports.ComAtprotoLexiconNS = ComAtprotoLexiconNS;
class SchemaRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'com.atproto.lexicon.schema',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'com.atproto.lexicon.schema',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        record.$type = 'com.atproto.lexicon.schema';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection: 'com.atproto.lexicon.schema',
            ...params,
            record
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'com.atproto.lexicon.schema',
            ...params
        }, {
            headers
        });
    }
}
exports.SchemaRecord = SchemaRecord;
class ComAtprotoModerationNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    createReport(data, opts) {
        return this._client.call('com.atproto.moderation.createReport', opts?.qp, data, opts);
    }
}
exports.ComAtprotoModerationNS = ComAtprotoModerationNS;
class ComAtprotoRepoNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    applyWrites(data, opts) {
        return this._client.call('com.atproto.repo.applyWrites', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoRepoApplyWrites.toKnownErr(e);
        });
    }
    createRecord(data, opts) {
        return this._client.call('com.atproto.repo.createRecord', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoRepoCreateRecord.toKnownErr(e);
        });
    }
    deleteRecord(data, opts) {
        return this._client.call('com.atproto.repo.deleteRecord', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoRepoDeleteRecord.toKnownErr(e);
        });
    }
    describeRepo(params, opts) {
        return this._client.call('com.atproto.repo.describeRepo', params, undefined, opts);
    }
    getRecord(params, opts) {
        return this._client.call('com.atproto.repo.getRecord', params, undefined, opts).catch((e)=>{
            throw ComAtprotoRepoGetRecord.toKnownErr(e);
        });
    }
    importRepo(data, opts) {
        return this._client.call('com.atproto.repo.importRepo', opts?.qp, data, opts);
    }
    listMissingBlobs(params, opts) {
        return this._client.call('com.atproto.repo.listMissingBlobs', params, undefined, opts);
    }
    listRecords(params, opts) {
        return this._client.call('com.atproto.repo.listRecords', params, undefined, opts);
    }
    putRecord(data, opts) {
        return this._client.call('com.atproto.repo.putRecord', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoRepoPutRecord.toKnownErr(e);
        });
    }
    uploadBlob(data, opts) {
        return this._client.call('com.atproto.repo.uploadBlob', opts?.qp, data, opts);
    }
}
exports.ComAtprotoRepoNS = ComAtprotoRepoNS;
class ComAtprotoServerNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    activateAccount(data, opts) {
        return this._client.call('com.atproto.server.activateAccount', opts?.qp, data, opts);
    }
    checkAccountStatus(params, opts) {
        return this._client.call('com.atproto.server.checkAccountStatus', params, undefined, opts);
    }
    confirmEmail(data, opts) {
        return this._client.call('com.atproto.server.confirmEmail', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoServerConfirmEmail.toKnownErr(e);
        });
    }
    createAccount(data, opts) {
        return this._client.call('com.atproto.server.createAccount', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoServerCreateAccount.toKnownErr(e);
        });
    }
    createAppPassword(data, opts) {
        return this._client.call('com.atproto.server.createAppPassword', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoServerCreateAppPassword.toKnownErr(e);
        });
    }
    createInviteCode(data, opts) {
        return this._client.call('com.atproto.server.createInviteCode', opts?.qp, data, opts);
    }
    createInviteCodes(data, opts) {
        return this._client.call('com.atproto.server.createInviteCodes', opts?.qp, data, opts);
    }
    createSession(data, opts) {
        return this._client.call('com.atproto.server.createSession', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoServerCreateSession.toKnownErr(e);
        });
    }
    deactivateAccount(data, opts) {
        return this._client.call('com.atproto.server.deactivateAccount', opts?.qp, data, opts);
    }
    deleteAccount(data, opts) {
        return this._client.call('com.atproto.server.deleteAccount', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoServerDeleteAccount.toKnownErr(e);
        });
    }
    deleteSession(data, opts) {
        return this._client.call('com.atproto.server.deleteSession', opts?.qp, data, opts);
    }
    describeServer(params, opts) {
        return this._client.call('com.atproto.server.describeServer', params, undefined, opts);
    }
    getAccountInviteCodes(params, opts) {
        return this._client.call('com.atproto.server.getAccountInviteCodes', params, undefined, opts).catch((e)=>{
            throw ComAtprotoServerGetAccountInviteCodes.toKnownErr(e);
        });
    }
    getServiceAuth(params, opts) {
        return this._client.call('com.atproto.server.getServiceAuth', params, undefined, opts).catch((e)=>{
            throw ComAtprotoServerGetServiceAuth.toKnownErr(e);
        });
    }
    getSession(params, opts) {
        return this._client.call('com.atproto.server.getSession', params, undefined, opts);
    }
    listAppPasswords(params, opts) {
        return this._client.call('com.atproto.server.listAppPasswords', params, undefined, opts).catch((e)=>{
            throw ComAtprotoServerListAppPasswords.toKnownErr(e);
        });
    }
    refreshSession(data, opts) {
        return this._client.call('com.atproto.server.refreshSession', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoServerRefreshSession.toKnownErr(e);
        });
    }
    requestAccountDelete(data, opts) {
        return this._client.call('com.atproto.server.requestAccountDelete', opts?.qp, data, opts);
    }
    requestEmailConfirmation(data, opts) {
        return this._client.call('com.atproto.server.requestEmailConfirmation', opts?.qp, data, opts);
    }
    requestEmailUpdate(data, opts) {
        return this._client.call('com.atproto.server.requestEmailUpdate', opts?.qp, data, opts);
    }
    requestPasswordReset(data, opts) {
        return this._client.call('com.atproto.server.requestPasswordReset', opts?.qp, data, opts);
    }
    reserveSigningKey(data, opts) {
        return this._client.call('com.atproto.server.reserveSigningKey', opts?.qp, data, opts);
    }
    resetPassword(data, opts) {
        return this._client.call('com.atproto.server.resetPassword', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoServerResetPassword.toKnownErr(e);
        });
    }
    revokeAppPassword(data, opts) {
        return this._client.call('com.atproto.server.revokeAppPassword', opts?.qp, data, opts);
    }
    updateEmail(data, opts) {
        return this._client.call('com.atproto.server.updateEmail', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoServerUpdateEmail.toKnownErr(e);
        });
    }
}
exports.ComAtprotoServerNS = ComAtprotoServerNS;
class ComAtprotoSyncNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    getBlob(params, opts) {
        return this._client.call('com.atproto.sync.getBlob', params, undefined, opts).catch((e)=>{
            throw ComAtprotoSyncGetBlob.toKnownErr(e);
        });
    }
    getBlocks(params, opts) {
        return this._client.call('com.atproto.sync.getBlocks', params, undefined, opts).catch((e)=>{
            throw ComAtprotoSyncGetBlocks.toKnownErr(e);
        });
    }
    getCheckout(params, opts) {
        return this._client.call('com.atproto.sync.getCheckout', params, undefined, opts);
    }
    getHead(params, opts) {
        return this._client.call('com.atproto.sync.getHead', params, undefined, opts).catch((e)=>{
            throw ComAtprotoSyncGetHead.toKnownErr(e);
        });
    }
    getLatestCommit(params, opts) {
        return this._client.call('com.atproto.sync.getLatestCommit', params, undefined, opts).catch((e)=>{
            throw ComAtprotoSyncGetLatestCommit.toKnownErr(e);
        });
    }
    getRecord(params, opts) {
        return this._client.call('com.atproto.sync.getRecord', params, undefined, opts).catch((e)=>{
            throw ComAtprotoSyncGetRecord.toKnownErr(e);
        });
    }
    getRepo(params, opts) {
        return this._client.call('com.atproto.sync.getRepo', params, undefined, opts).catch((e)=>{
            throw ComAtprotoSyncGetRepo.toKnownErr(e);
        });
    }
    getRepoStatus(params, opts) {
        return this._client.call('com.atproto.sync.getRepoStatus', params, undefined, opts).catch((e)=>{
            throw ComAtprotoSyncGetRepoStatus.toKnownErr(e);
        });
    }
    listBlobs(params, opts) {
        return this._client.call('com.atproto.sync.listBlobs', params, undefined, opts).catch((e)=>{
            throw ComAtprotoSyncListBlobs.toKnownErr(e);
        });
    }
    listRepos(params, opts) {
        return this._client.call('com.atproto.sync.listRepos', params, undefined, opts);
    }
    notifyOfUpdate(data, opts) {
        return this._client.call('com.atproto.sync.notifyOfUpdate', opts?.qp, data, opts);
    }
    requestCrawl(data, opts) {
        return this._client.call('com.atproto.sync.requestCrawl', opts?.qp, data, opts);
    }
}
exports.ComAtprotoSyncNS = ComAtprotoSyncNS;
class ComAtprotoTempNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    addReservedHandle(data, opts) {
        return this._client.call('com.atproto.temp.addReservedHandle', opts?.qp, data, opts);
    }
    checkSignupQueue(params, opts) {
        return this._client.call('com.atproto.temp.checkSignupQueue', params, undefined, opts);
    }
    fetchLabels(params, opts) {
        return this._client.call('com.atproto.temp.fetchLabels', params, undefined, opts);
    }
    requestPhoneVerification(data, opts) {
        return this._client.call('com.atproto.temp.requestPhoneVerification', opts?.qp, data, opts);
    }
}
exports.ComAtprotoTempNS = ComAtprotoTempNS;
class AppNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "bsky", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.bsky = new AppBskyNS(client);
    }
}
exports.AppNS = AppNS;
class AppBskyNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "actor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "embed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "feed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "labeler", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "notification", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "richtext", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "unspecced", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "video", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.actor = new AppBskyActorNS(client);
        this.embed = new AppBskyEmbedNS(client);
        this.feed = new AppBskyFeedNS(client);
        this.graph = new AppBskyGraphNS(client);
        this.labeler = new AppBskyLabelerNS(client);
        this.notification = new AppBskyNotificationNS(client);
        this.richtext = new AppBskyRichtextNS(client);
        this.unspecced = new AppBskyUnspeccedNS(client);
        this.video = new AppBskyVideoNS(client);
    }
}
exports.AppBskyNS = AppBskyNS;
class AppBskyActorNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "profile", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.profile = new ProfileRecord(client);
    }
    getPreferences(params, opts) {
        return this._client.call('app.bsky.actor.getPreferences', params, undefined, opts);
    }
    getProfile(params, opts) {
        return this._client.call('app.bsky.actor.getProfile', params, undefined, opts);
    }
    getProfiles(params, opts) {
        return this._client.call('app.bsky.actor.getProfiles', params, undefined, opts);
    }
    getSuggestions(params, opts) {
        return this._client.call('app.bsky.actor.getSuggestions', params, undefined, opts);
    }
    putPreferences(data, opts) {
        return this._client.call('app.bsky.actor.putPreferences', opts?.qp, data, opts);
    }
    searchActors(params, opts) {
        return this._client.call('app.bsky.actor.searchActors', params, undefined, opts);
    }
    searchActorsTypeahead(params, opts) {
        return this._client.call('app.bsky.actor.searchActorsTypeahead', params, undefined, opts);
    }
}
exports.AppBskyActorNS = AppBskyActorNS;
class ProfileRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.actor.profile',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.actor.profile',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        record.$type = 'app.bsky.actor.profile';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection: 'app.bsky.actor.profile',
            rkey: 'self',
            ...params,
            record
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.actor.profile',
            ...params
        }, {
            headers
        });
    }
}
exports.ProfileRecord = ProfileRecord;
class AppBskyEmbedNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
}
exports.AppBskyEmbedNS = AppBskyEmbedNS;
class AppBskyFeedNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "generator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "like", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "post", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "postgate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "repost", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "threadgate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.generator = new GeneratorRecord(client);
        this.like = new LikeRecord(client);
        this.post = new PostRecord(client);
        this.postgate = new PostgateRecord(client);
        this.repost = new RepostRecord(client);
        this.threadgate = new ThreadgateRecord(client);
    }
    describeFeedGenerator(params, opts) {
        return this._client.call('app.bsky.feed.describeFeedGenerator', params, undefined, opts);
    }
    getActorFeeds(params, opts) {
        return this._client.call('app.bsky.feed.getActorFeeds', params, undefined, opts);
    }
    getActorLikes(params, opts) {
        return this._client.call('app.bsky.feed.getActorLikes', params, undefined, opts).catch((e)=>{
            throw AppBskyFeedGetActorLikes.toKnownErr(e);
        });
    }
    getAuthorFeed(params, opts) {
        return this._client.call('app.bsky.feed.getAuthorFeed', params, undefined, opts).catch((e)=>{
            throw AppBskyFeedGetAuthorFeed.toKnownErr(e);
        });
    }
    getFeed(params, opts) {
        return this._client.call('app.bsky.feed.getFeed', params, undefined, opts).catch((e)=>{
            throw AppBskyFeedGetFeed.toKnownErr(e);
        });
    }
    getFeedGenerator(params, opts) {
        return this._client.call('app.bsky.feed.getFeedGenerator', params, undefined, opts);
    }
    getFeedGenerators(params, opts) {
        return this._client.call('app.bsky.feed.getFeedGenerators', params, undefined, opts);
    }
    getFeedSkeleton(params, opts) {
        return this._client.call('app.bsky.feed.getFeedSkeleton', params, undefined, opts).catch((e)=>{
            throw AppBskyFeedGetFeedSkeleton.toKnownErr(e);
        });
    }
    getLikes(params, opts) {
        return this._client.call('app.bsky.feed.getLikes', params, undefined, opts);
    }
    getListFeed(params, opts) {
        return this._client.call('app.bsky.feed.getListFeed', params, undefined, opts).catch((e)=>{
            throw AppBskyFeedGetListFeed.toKnownErr(e);
        });
    }
    getPostThread(params, opts) {
        return this._client.call('app.bsky.feed.getPostThread', params, undefined, opts).catch((e)=>{
            throw AppBskyFeedGetPostThread.toKnownErr(e);
        });
    }
    getPosts(params, opts) {
        return this._client.call('app.bsky.feed.getPosts', params, undefined, opts);
    }
    getQuotes(params, opts) {
        return this._client.call('app.bsky.feed.getQuotes', params, undefined, opts);
    }
    getRepostedBy(params, opts) {
        return this._client.call('app.bsky.feed.getRepostedBy', params, undefined, opts);
    }
    getSuggestedFeeds(params, opts) {
        return this._client.call('app.bsky.feed.getSuggestedFeeds', params, undefined, opts);
    }
    getTimeline(params, opts) {
        return this._client.call('app.bsky.feed.getTimeline', params, undefined, opts);
    }
    searchPosts(params, opts) {
        return this._client.call('app.bsky.feed.searchPosts', params, undefined, opts).catch((e)=>{
            throw AppBskyFeedSearchPosts.toKnownErr(e);
        });
    }
    sendInteractions(data, opts) {
        return this._client.call('app.bsky.feed.sendInteractions', opts?.qp, data, opts);
    }
}
exports.AppBskyFeedNS = AppBskyFeedNS;
class GeneratorRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.feed.generator',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.feed.generator',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        record.$type = 'app.bsky.feed.generator';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection: 'app.bsky.feed.generator',
            ...params,
            record
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.feed.generator',
            ...params
        }, {
            headers
        });
    }
}
exports.GeneratorRecord = GeneratorRecord;
class LikeRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.feed.like',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.feed.like',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        record.$type = 'app.bsky.feed.like';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection: 'app.bsky.feed.like',
            ...params,
            record
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.feed.like',
            ...params
        }, {
            headers
        });
    }
}
exports.LikeRecord = LikeRecord;
class PostRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.feed.post',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.feed.post',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        record.$type = 'app.bsky.feed.post';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection: 'app.bsky.feed.post',
            ...params,
            record
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.feed.post',
            ...params
        }, {
            headers
        });
    }
}
exports.PostRecord = PostRecord;
class PostgateRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.feed.postgate',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.feed.postgate',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        record.$type = 'app.bsky.feed.postgate';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection: 'app.bsky.feed.postgate',
            ...params,
            record
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.feed.postgate',
            ...params
        }, {
            headers
        });
    }
}
exports.PostgateRecord = PostgateRecord;
class RepostRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.feed.repost',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.feed.repost',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        record.$type = 'app.bsky.feed.repost';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection: 'app.bsky.feed.repost',
            ...params,
            record
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.feed.repost',
            ...params
        }, {
            headers
        });
    }
}
exports.RepostRecord = RepostRecord;
class ThreadgateRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.feed.threadgate',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.feed.threadgate',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        record.$type = 'app.bsky.feed.threadgate';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection: 'app.bsky.feed.threadgate',
            ...params,
            record
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.feed.threadgate',
            ...params
        }, {
            headers
        });
    }
}
exports.ThreadgateRecord = ThreadgateRecord;
class AppBskyGraphNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "block", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "follow", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "list", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "listblock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "listitem", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "starterpack", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.block = new BlockRecord(client);
        this.follow = new FollowRecord(client);
        this.list = new ListRecord(client);
        this.listblock = new ListblockRecord(client);
        this.listitem = new ListitemRecord(client);
        this.starterpack = new StarterpackRecord(client);
    }
    getActorStarterPacks(params, opts) {
        return this._client.call('app.bsky.graph.getActorStarterPacks', params, undefined, opts);
    }
    getBlocks(params, opts) {
        return this._client.call('app.bsky.graph.getBlocks', params, undefined, opts);
    }
    getFollowers(params, opts) {
        return this._client.call('app.bsky.graph.getFollowers', params, undefined, opts);
    }
    getFollows(params, opts) {
        return this._client.call('app.bsky.graph.getFollows', params, undefined, opts);
    }
    getKnownFollowers(params, opts) {
        return this._client.call('app.bsky.graph.getKnownFollowers', params, undefined, opts);
    }
    getList(params, opts) {
        return this._client.call('app.bsky.graph.getList', params, undefined, opts);
    }
    getListBlocks(params, opts) {
        return this._client.call('app.bsky.graph.getListBlocks', params, undefined, opts);
    }
    getListMutes(params, opts) {
        return this._client.call('app.bsky.graph.getListMutes', params, undefined, opts);
    }
    getLists(params, opts) {
        return this._client.call('app.bsky.graph.getLists', params, undefined, opts);
    }
    getMutes(params, opts) {
        return this._client.call('app.bsky.graph.getMutes', params, undefined, opts);
    }
    getRelationships(params, opts) {
        return this._client.call('app.bsky.graph.getRelationships', params, undefined, opts).catch((e)=>{
            throw AppBskyGraphGetRelationships.toKnownErr(e);
        });
    }
    getStarterPack(params, opts) {
        return this._client.call('app.bsky.graph.getStarterPack', params, undefined, opts);
    }
    getStarterPacks(params, opts) {
        return this._client.call('app.bsky.graph.getStarterPacks', params, undefined, opts);
    }
    getSuggestedFollowsByActor(params, opts) {
        return this._client.call('app.bsky.graph.getSuggestedFollowsByActor', params, undefined, opts);
    }
    muteActor(data, opts) {
        return this._client.call('app.bsky.graph.muteActor', opts?.qp, data, opts);
    }
    muteActorList(data, opts) {
        return this._client.call('app.bsky.graph.muteActorList', opts?.qp, data, opts);
    }
    muteThread(data, opts) {
        return this._client.call('app.bsky.graph.muteThread', opts?.qp, data, opts);
    }
    searchStarterPacks(params, opts) {
        return this._client.call('app.bsky.graph.searchStarterPacks', params, undefined, opts);
    }
    unmuteActor(data, opts) {
        return this._client.call('app.bsky.graph.unmuteActor', opts?.qp, data, opts);
    }
    unmuteActorList(data, opts) {
        return this._client.call('app.bsky.graph.unmuteActorList', opts?.qp, data, opts);
    }
    unmuteThread(data, opts) {
        return this._client.call('app.bsky.graph.unmuteThread', opts?.qp, data, opts);
    }
}
exports.AppBskyGraphNS = AppBskyGraphNS;
class BlockRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.graph.block',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.graph.block',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        record.$type = 'app.bsky.graph.block';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection: 'app.bsky.graph.block',
            ...params,
            record
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.graph.block',
            ...params
        }, {
            headers
        });
    }
}
exports.BlockRecord = BlockRecord;
class FollowRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.graph.follow',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.graph.follow',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        record.$type = 'app.bsky.graph.follow';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection: 'app.bsky.graph.follow',
            ...params,
            record
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.graph.follow',
            ...params
        }, {
            headers
        });
    }
}
exports.FollowRecord = FollowRecord;
class ListRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.graph.list',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.graph.list',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        record.$type = 'app.bsky.graph.list';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection: 'app.bsky.graph.list',
            ...params,
            record
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.graph.list',
            ...params
        }, {
            headers
        });
    }
}
exports.ListRecord = ListRecord;
class ListblockRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.graph.listblock',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.graph.listblock',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        record.$type = 'app.bsky.graph.listblock';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection: 'app.bsky.graph.listblock',
            ...params,
            record
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.graph.listblock',
            ...params
        }, {
            headers
        });
    }
}
exports.ListblockRecord = ListblockRecord;
class ListitemRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.graph.listitem',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.graph.listitem',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        record.$type = 'app.bsky.graph.listitem';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection: 'app.bsky.graph.listitem',
            ...params,
            record
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.graph.listitem',
            ...params
        }, {
            headers
        });
    }
}
exports.ListitemRecord = ListitemRecord;
class StarterpackRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.graph.starterpack',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.graph.starterpack',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        record.$type = 'app.bsky.graph.starterpack';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection: 'app.bsky.graph.starterpack',
            ...params,
            record
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.graph.starterpack',
            ...params
        }, {
            headers
        });
    }
}
exports.StarterpackRecord = StarterpackRecord;
class AppBskyLabelerNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.service = new ServiceRecord(client);
    }
    getServices(params, opts) {
        return this._client.call('app.bsky.labeler.getServices', params, undefined, opts);
    }
}
exports.AppBskyLabelerNS = AppBskyLabelerNS;
class ServiceRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.labeler.service',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.labeler.service',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        record.$type = 'app.bsky.labeler.service';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection: 'app.bsky.labeler.service',
            rkey: 'self',
            ...params,
            record
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.labeler.service',
            ...params
        }, {
            headers
        });
    }
}
exports.ServiceRecord = ServiceRecord;
class AppBskyNotificationNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    getUnreadCount(params, opts) {
        return this._client.call('app.bsky.notification.getUnreadCount', params, undefined, opts);
    }
    listNotifications(params, opts) {
        return this._client.call('app.bsky.notification.listNotifications', params, undefined, opts);
    }
    putPreferences(data, opts) {
        return this._client.call('app.bsky.notification.putPreferences', opts?.qp, data, opts);
    }
    registerPush(data, opts) {
        return this._client.call('app.bsky.notification.registerPush', opts?.qp, data, opts);
    }
    updateSeen(data, opts) {
        return this._client.call('app.bsky.notification.updateSeen', opts?.qp, data, opts);
    }
}
exports.AppBskyNotificationNS = AppBskyNotificationNS;
class AppBskyRichtextNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
}
exports.AppBskyRichtextNS = AppBskyRichtextNS;
class AppBskyUnspeccedNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    getConfig(params, opts) {
        return this._client.call('app.bsky.unspecced.getConfig', params, undefined, opts);
    }
    getPopularFeedGenerators(params, opts) {
        return this._client.call('app.bsky.unspecced.getPopularFeedGenerators', params, undefined, opts);
    }
    getSuggestionsSkeleton(params, opts) {
        return this._client.call('app.bsky.unspecced.getSuggestionsSkeleton', params, undefined, opts);
    }
    getTaggedSuggestions(params, opts) {
        return this._client.call('app.bsky.unspecced.getTaggedSuggestions', params, undefined, opts);
    }
    getTrendingTopics(params, opts) {
        return this._client.call('app.bsky.unspecced.getTrendingTopics', params, undefined, opts);
    }
    searchActorsSkeleton(params, opts) {
        return this._client.call('app.bsky.unspecced.searchActorsSkeleton', params, undefined, opts).catch((e)=>{
            throw AppBskyUnspeccedSearchActorsSkeleton.toKnownErr(e);
        });
    }
    searchPostsSkeleton(params, opts) {
        return this._client.call('app.bsky.unspecced.searchPostsSkeleton', params, undefined, opts).catch((e)=>{
            throw AppBskyUnspeccedSearchPostsSkeleton.toKnownErr(e);
        });
    }
    searchStarterPacksSkeleton(params, opts) {
        return this._client.call('app.bsky.unspecced.searchStarterPacksSkeleton', params, undefined, opts).catch((e)=>{
            throw AppBskyUnspeccedSearchStarterPacksSkeleton.toKnownErr(e);
        });
    }
}
exports.AppBskyUnspeccedNS = AppBskyUnspeccedNS;
class AppBskyVideoNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    getJobStatus(params, opts) {
        return this._client.call('app.bsky.video.getJobStatus', params, undefined, opts);
    }
    getUploadLimits(params, opts) {
        return this._client.call('app.bsky.video.getUploadLimits', params, undefined, opts);
    }
    uploadVideo(data, opts) {
        return this._client.call('app.bsky.video.uploadVideo', opts?.qp, data, opts);
    }
}
exports.AppBskyVideoNS = AppBskyVideoNS;
class ChatNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "bsky", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.bsky = new ChatBskyNS(client);
    }
}
exports.ChatNS = ChatNS;
class ChatBskyNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "actor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "convo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "moderation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.actor = new ChatBskyActorNS(client);
        this.convo = new ChatBskyConvoNS(client);
        this.moderation = new ChatBskyModerationNS(client);
    }
}
exports.ChatBskyNS = ChatBskyNS;
class ChatBskyActorNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "declaration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.declaration = new DeclarationRecord(client);
    }
    deleteAccount(data, opts) {
        return this._client.call('chat.bsky.actor.deleteAccount', opts?.qp, data, opts);
    }
    exportAccountData(params, opts) {
        return this._client.call('chat.bsky.actor.exportAccountData', params, undefined, opts);
    }
}
exports.ChatBskyActorNS = ChatBskyActorNS;
class DeclarationRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'chat.bsky.actor.declaration',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'chat.bsky.actor.declaration',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        record.$type = 'chat.bsky.actor.declaration';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection: 'chat.bsky.actor.declaration',
            rkey: 'self',
            ...params,
            record
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'chat.bsky.actor.declaration',
            ...params
        }, {
            headers
        });
    }
}
exports.DeclarationRecord = DeclarationRecord;
class ChatBskyConvoNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    deleteMessageForSelf(data, opts) {
        return this._client.call('chat.bsky.convo.deleteMessageForSelf', opts?.qp, data, opts);
    }
    getConvo(params, opts) {
        return this._client.call('chat.bsky.convo.getConvo', params, undefined, opts);
    }
    getConvoForMembers(params, opts) {
        return this._client.call('chat.bsky.convo.getConvoForMembers', params, undefined, opts);
    }
    getLog(params, opts) {
        return this._client.call('chat.bsky.convo.getLog', params, undefined, opts);
    }
    getMessages(params, opts) {
        return this._client.call('chat.bsky.convo.getMessages', params, undefined, opts);
    }
    leaveConvo(data, opts) {
        return this._client.call('chat.bsky.convo.leaveConvo', opts?.qp, data, opts);
    }
    listConvos(params, opts) {
        return this._client.call('chat.bsky.convo.listConvos', params, undefined, opts);
    }
    muteConvo(data, opts) {
        return this._client.call('chat.bsky.convo.muteConvo', opts?.qp, data, opts);
    }
    sendMessage(data, opts) {
        return this._client.call('chat.bsky.convo.sendMessage', opts?.qp, data, opts);
    }
    sendMessageBatch(data, opts) {
        return this._client.call('chat.bsky.convo.sendMessageBatch', opts?.qp, data, opts);
    }
    unmuteConvo(data, opts) {
        return this._client.call('chat.bsky.convo.unmuteConvo', opts?.qp, data, opts);
    }
    updateRead(data, opts) {
        return this._client.call('chat.bsky.convo.updateRead', opts?.qp, data, opts);
    }
}
exports.ChatBskyConvoNS = ChatBskyConvoNS;
class ChatBskyModerationNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    getActorMetadata(params, opts) {
        return this._client.call('chat.bsky.moderation.getActorMetadata', params, undefined, opts);
    }
    getMessageContext(params, opts) {
        return this._client.call('chat.bsky.moderation.getMessageContext', params, undefined, opts);
    }
    updateActorAccess(data, opts) {
        return this._client.call('chat.bsky.moderation.updateActorAccess', opts?.qp, data, opts);
    }
}
exports.ChatBskyModerationNS = ChatBskyModerationNS;
class ToolsNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "ozone", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.ozone = new ToolsOzoneNS(client);
    }
}
exports.ToolsNS = ToolsNS;
class ToolsOzoneNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "communication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "moderation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "server", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "set", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "setting", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "signature", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "team", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.communication = new ToolsOzoneCommunicationNS(client);
        this.moderation = new ToolsOzoneModerationNS(client);
        this.server = new ToolsOzoneServerNS(client);
        this.set = new ToolsOzoneSetNS(client);
        this.setting = new ToolsOzoneSettingNS(client);
        this.signature = new ToolsOzoneSignatureNS(client);
        this.team = new ToolsOzoneTeamNS(client);
    }
}
exports.ToolsOzoneNS = ToolsOzoneNS;
class ToolsOzoneCommunicationNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    createTemplate(data, opts) {
        return this._client.call('tools.ozone.communication.createTemplate', opts?.qp, data, opts).catch((e)=>{
            throw ToolsOzoneCommunicationCreateTemplate.toKnownErr(e);
        });
    }
    deleteTemplate(data, opts) {
        return this._client.call('tools.ozone.communication.deleteTemplate', opts?.qp, data, opts);
    }
    listTemplates(params, opts) {
        return this._client.call('tools.ozone.communication.listTemplates', params, undefined, opts);
    }
    updateTemplate(data, opts) {
        return this._client.call('tools.ozone.communication.updateTemplate', opts?.qp, data, opts).catch((e)=>{
            throw ToolsOzoneCommunicationUpdateTemplate.toKnownErr(e);
        });
    }
}
exports.ToolsOzoneCommunicationNS = ToolsOzoneCommunicationNS;
class ToolsOzoneModerationNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    emitEvent(data, opts) {
        return this._client.call('tools.ozone.moderation.emitEvent', opts?.qp, data, opts).catch((e)=>{
            throw ToolsOzoneModerationEmitEvent.toKnownErr(e);
        });
    }
    getEvent(params, opts) {
        return this._client.call('tools.ozone.moderation.getEvent', params, undefined, opts);
    }
    getRecord(params, opts) {
        return this._client.call('tools.ozone.moderation.getRecord', params, undefined, opts).catch((e)=>{
            throw ToolsOzoneModerationGetRecord.toKnownErr(e);
        });
    }
    getRecords(params, opts) {
        return this._client.call('tools.ozone.moderation.getRecords', params, undefined, opts);
    }
    getRepo(params, opts) {
        return this._client.call('tools.ozone.moderation.getRepo', params, undefined, opts).catch((e)=>{
            throw ToolsOzoneModerationGetRepo.toKnownErr(e);
        });
    }
    getRepos(params, opts) {
        return this._client.call('tools.ozone.moderation.getRepos', params, undefined, opts);
    }
    queryEvents(params, opts) {
        return this._client.call('tools.ozone.moderation.queryEvents', params, undefined, opts);
    }
    queryStatuses(params, opts) {
        return this._client.call('tools.ozone.moderation.queryStatuses', params, undefined, opts);
    }
    searchRepos(params, opts) {
        return this._client.call('tools.ozone.moderation.searchRepos', params, undefined, opts);
    }
}
exports.ToolsOzoneModerationNS = ToolsOzoneModerationNS;
class ToolsOzoneServerNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    getConfig(params, opts) {
        return this._client.call('tools.ozone.server.getConfig', params, undefined, opts);
    }
}
exports.ToolsOzoneServerNS = ToolsOzoneServerNS;
class ToolsOzoneSetNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    addValues(data, opts) {
        return this._client.call('tools.ozone.set.addValues', opts?.qp, data, opts);
    }
    deleteSet(data, opts) {
        return this._client.call('tools.ozone.set.deleteSet', opts?.qp, data, opts).catch((e)=>{
            throw ToolsOzoneSetDeleteSet.toKnownErr(e);
        });
    }
    deleteValues(data, opts) {
        return this._client.call('tools.ozone.set.deleteValues', opts?.qp, data, opts).catch((e)=>{
            throw ToolsOzoneSetDeleteValues.toKnownErr(e);
        });
    }
    getValues(params, opts) {
        return this._client.call('tools.ozone.set.getValues', params, undefined, opts).catch((e)=>{
            throw ToolsOzoneSetGetValues.toKnownErr(e);
        });
    }
    querySets(params, opts) {
        return this._client.call('tools.ozone.set.querySets', params, undefined, opts);
    }
    upsertSet(data, opts) {
        return this._client.call('tools.ozone.set.upsertSet', opts?.qp, data, opts);
    }
}
exports.ToolsOzoneSetNS = ToolsOzoneSetNS;
class ToolsOzoneSettingNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    listOptions(params, opts) {
        return this._client.call('tools.ozone.setting.listOptions', params, undefined, opts);
    }
    removeOptions(data, opts) {
        return this._client.call('tools.ozone.setting.removeOptions', opts?.qp, data, opts);
    }
    upsertOption(data, opts) {
        return this._client.call('tools.ozone.setting.upsertOption', opts?.qp, data, opts);
    }
}
exports.ToolsOzoneSettingNS = ToolsOzoneSettingNS;
class ToolsOzoneSignatureNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    findCorrelation(params, opts) {
        return this._client.call('tools.ozone.signature.findCorrelation', params, undefined, opts);
    }
    findRelatedAccounts(params, opts) {
        return this._client.call('tools.ozone.signature.findRelatedAccounts', params, undefined, opts);
    }
    searchAccounts(params, opts) {
        return this._client.call('tools.ozone.signature.searchAccounts', params, undefined, opts);
    }
}
exports.ToolsOzoneSignatureNS = ToolsOzoneSignatureNS;
class ToolsOzoneTeamNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    addMember(data, opts) {
        return this._client.call('tools.ozone.team.addMember', opts?.qp, data, opts).catch((e)=>{
            throw ToolsOzoneTeamAddMember.toKnownErr(e);
        });
    }
    deleteMember(data, opts) {
        return this._client.call('tools.ozone.team.deleteMember', opts?.qp, data, opts).catch((e)=>{
            throw ToolsOzoneTeamDeleteMember.toKnownErr(e);
        });
    }
    listMembers(params, opts) {
        return this._client.call('tools.ozone.team.listMembers', params, undefined, opts);
    }
    updateMember(data, opts) {
        return this._client.call('tools.ozone.team.updateMember', opts?.qp, data, opts).catch((e)=>{
            throw ToolsOzoneTeamUpdateMember.toKnownErr(e);
        });
    }
}
exports.ToolsOzoneTeamNS = ToolsOzoneTeamNS; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@atproto/api/dist/rich-text/unicode.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
/**
 * Javascript uses utf16-encoded strings while most environments and specs
 * have standardized around utf8 (including JSON).
 *
 * After some lengthy debated we decided that richtext facets need to use
 * utf8 indices. This means we need tools to convert indices between utf8
 * and utf16, and that's precisely what this library handles.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UnicodeString = void 0;
const common_web_1 = __turbopack_require__("[project]/node_modules/@atproto/common-web/dist/index.js [app-client] (ecmascript)");
const encoder = new TextEncoder();
const decoder = new TextDecoder();
class UnicodeString {
    constructor(utf16){
        Object.defineProperty(this, "utf16", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "utf8", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_graphemeLen", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.utf16 = utf16;
        this.utf8 = encoder.encode(utf16);
    }
    get length() {
        return this.utf8.byteLength;
    }
    get graphemeLength() {
        if (!this._graphemeLen) {
            this._graphemeLen = (0, common_web_1.graphemeLen)(this.utf16);
        }
        return this._graphemeLen;
    }
    slice(start, end) {
        return decoder.decode(this.utf8.slice(start, end));
    }
    utf16IndexToUtf8Index(i) {
        return encoder.encode(this.utf16.slice(0, i)).byteLength;
    }
    toString() {
        return this.utf16;
    }
}
exports.UnicodeString = UnicodeString; //# sourceMappingURL=unicode.js.map
}}),
"[project]/node_modules/@atproto/api/dist/rich-text/sanitization.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sanitizeRichText = sanitizeRichText;
const unicode_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/rich-text/unicode.js [app-client] (ecmascript)");
// this regex is intentionally matching on the zero-with-separator codepoint
// eslint-disable-next-line no-misleading-character-class
const EXCESS_SPACE_RE = /[\r\n]([\u00AD\u2060\u200D\u200C\u200B\s]*[\r\n]){2,}/;
const REPLACEMENT_STR = '\n\n';
function sanitizeRichText(richText, opts) {
    if (opts.cleanNewlines) {
        richText = clean(richText, EXCESS_SPACE_RE, REPLACEMENT_STR);
    }
    return richText;
}
function clean(richText, targetRegexp, replacementString) {
    richText = richText.clone();
    let match = richText.unicodeText.utf16.match(targetRegexp);
    while(match && typeof match.index !== 'undefined'){
        const oldText = richText.unicodeText;
        const removeStartIndex = richText.unicodeText.utf16IndexToUtf8Index(match.index);
        const removeEndIndex = removeStartIndex + new unicode_1.UnicodeString(match[0]).length;
        richText.delete(removeStartIndex, removeEndIndex);
        if (richText.unicodeText.utf16 === oldText.utf16) {
            break; // sanity check
        }
        richText.insert(removeStartIndex, replacementString);
        match = richText.unicodeText.utf16.match(targetRegexp);
    }
    return richText;
} //# sourceMappingURL=sanitization.js.map
}}),
"[project]/node_modules/@atproto/api/dist/rich-text/util.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TAG_REGEX = exports.TRAILING_PUNCTUATION_REGEX = exports.URL_REGEX = exports.MENTION_REGEX = void 0;
exports.MENTION_REGEX = /(^|\s|\()(@)([a-zA-Z0-9.-]+)(\b)/g;
exports.URL_REGEX = /(^|\s|\()((https?:\/\/[\S]+)|((?<domain>[a-z][a-z0-9]*(\.[a-z0-9]+)+)[\S]*))/gim;
exports.TRAILING_PUNCTUATION_REGEX = /\p{P}+$/gu;
/**
 * `\ufe0f` emoji modifier
 * `\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2` zero-width spaces (likely incomplete)
 */ exports.TAG_REGEX = // eslint-disable-next-line no-misleading-character-class
/(^|\s)[#＃]((?!\ufe0f)[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*[^\d\s\p{P}\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]+[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*)?/gu; //# sourceMappingURL=util.js.map
}}),
"[project]/node_modules/@atproto/api/dist/rich-text/detection.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.detectFacets = detectFacets;
const tlds_1 = __importDefault(__turbopack_require__("[project]/node_modules/tlds/index.json (json)"));
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/rich-text/util.js [app-client] (ecmascript)");
function detectFacets(text) {
    let match;
    const facets = [];
    {
        // mentions
        const re = util_1.MENTION_REGEX;
        while(match = re.exec(text.utf16)){
            if (!isValidDomain(match[3]) && !match[3].endsWith('.test')) {
                continue; // probably not a handle
            }
            const start = text.utf16.indexOf(match[3], match.index) - 1;
            facets.push({
                $type: 'app.bsky.richtext.facet',
                index: {
                    byteStart: text.utf16IndexToUtf8Index(start),
                    byteEnd: text.utf16IndexToUtf8Index(start + match[3].length + 1)
                },
                features: [
                    {
                        $type: 'app.bsky.richtext.facet#mention',
                        did: match[3]
                    }
                ]
            });
        }
    }
    {
        // links
        const re = util_1.URL_REGEX;
        while(match = re.exec(text.utf16)){
            let uri = match[2];
            if (!uri.startsWith('http')) {
                const domain = match.groups?.domain;
                if (!domain || !isValidDomain(domain)) {
                    continue;
                }
                uri = `https://${uri}`;
            }
            const start = text.utf16.indexOf(match[2], match.index);
            const index = {
                start,
                end: start + match[2].length
            };
            // strip ending puncuation
            if (/[.,;:!?]$/.test(uri)) {
                uri = uri.slice(0, -1);
                index.end--;
            }
            if (/[)]$/.test(uri) && !uri.includes('(')) {
                uri = uri.slice(0, -1);
                index.end--;
            }
            facets.push({
                index: {
                    byteStart: text.utf16IndexToUtf8Index(index.start),
                    byteEnd: text.utf16IndexToUtf8Index(index.end)
                },
                features: [
                    {
                        $type: 'app.bsky.richtext.facet#link',
                        uri
                    }
                ]
            });
        }
    }
    {
        const re = util_1.TAG_REGEX;
        while(match = re.exec(text.utf16)){
            const leading = match[1];
            let tag = match[2];
            if (!tag) continue;
            // strip ending punctuation and any spaces
            tag = tag.trim().replace(util_1.TRAILING_PUNCTUATION_REGEX, '');
            if (tag.length === 0 || tag.length > 64) continue;
            const index = match.index + leading.length;
            facets.push({
                index: {
                    byteStart: text.utf16IndexToUtf8Index(index),
                    byteEnd: text.utf16IndexToUtf8Index(index + 1 + tag.length)
                },
                features: [
                    {
                        $type: 'app.bsky.richtext.facet#tag',
                        tag: tag
                    }
                ]
            });
        }
    }
    return facets.length > 0 ? facets : undefined;
}
function isValidDomain(str) {
    return !!tlds_1.default.find((tld)=>{
        const i = str.lastIndexOf(tld);
        if (i === -1) {
            return false;
        }
        return str.charAt(i - 1) === '.' && i === str.length - tld.length;
    });
} //# sourceMappingURL=detection.js.map
}}),
"[project]/node_modules/@atproto/api/dist/rich-text/rich-text.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
/*
= Rich Text Manipulation

When we sanitize rich text, we have to update the entity indices as the
text is modified. This can be modeled as inserts() and deletes() of the
rich text string. The possible scenarios are outlined below, along with
their expected behaviors.

NOTE: Slices are start inclusive, end exclusive

== richTextInsert()

Target string:

   0 1 2 3 4 5 6 7 8 910   // string indices
   h e l l o   w o r l d   // string value
       ^-------^           // target slice {start: 2, end: 7}

Scenarios:

A: ^                       // insert "test" at 0
B:        ^                // insert "test" at 4
C:                 ^       // insert "test" at 8

A = before           -> move both by num added
B = inner            -> move end by num added
C = after            -> noop

Results:

A: 0 1 2 3 4 5 6 7 8 910   // string indices
   t e s t h e l l o   w   // string value
               ^-------^   // target slice {start: 6, end: 11}

B: 0 1 2 3 4 5 6 7 8 910   // string indices
   h e l l t e s t o   w   // string value
       ^---------------^   // target slice {start: 2, end: 11}

C: 0 1 2 3 4 5 6 7 8 910   // string indices
   h e l l o   w o t e s   // string value
       ^-------^           // target slice {start: 2, end: 7}

== richTextDelete()

Target string:

   0 1 2 3 4 5 6 7 8 910   // string indices
   h e l l o   w o r l d   // string value
       ^-------^           // target slice {start: 2, end: 7}

Scenarios:

A: ^---------------^       // remove slice {start: 0, end: 9}
B:               ^-----^   // remove slice {start: 7, end: 11}
C:         ^-----------^   // remove slice {start: 4, end: 11}
D:       ^-^               // remove slice {start: 3, end: 5}
E:   ^-----^               // remove slice {start: 1, end: 5}
F: ^-^                     // remove slice {start: 0, end: 2}

A = entirely outer   -> delete slice
B = entirely after   -> noop
C = partially after  -> move end to remove-start
D = entirely inner   -> move end by num removed
E = partially before -> move start to remove-start index, move end by num removed
F = entirely before  -> move both by num removed

Results:

A: 0 1 2 3 4 5 6 7 8 910   // string indices
   l d                     // string value
                           // target slice (deleted)

B: 0 1 2 3 4 5 6 7 8 910   // string indices
   h e l l o   w           // string value
       ^-------^           // target slice {start: 2, end: 7}

C: 0 1 2 3 4 5 6 7 8 910   // string indices
   h e l l                 // string value
       ^-^                 // target slice {start: 2, end: 4}

D: 0 1 2 3 4 5 6 7 8 910   // string indices
   h e l   w o r l d       // string value
       ^---^               // target slice {start: 2, end: 5}

E: 0 1 2 3 4 5 6 7 8 910   // string indices
   h   w o r l d           // string value
     ^-^                   // target slice {start: 1, end: 3}

F: 0 1 2 3 4 5 6 7 8 910   // string indices
   l l o   w o r l d       // string value
   ^-------^               // target slice {start: 0, end: 5}
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RichText = exports.RichTextSegment = void 0;
const client_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/index.js [app-client] (ecmascript)");
const unicode_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/rich-text/unicode.js [app-client] (ecmascript)");
const sanitization_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/rich-text/sanitization.js [app-client] (ecmascript)");
const detection_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/rich-text/detection.js [app-client] (ecmascript)");
class RichTextSegment {
    constructor(text, facet){
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: text
        });
        Object.defineProperty(this, "facet", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: facet
        });
    }
    get link() {
        const link = this.facet?.features.find(client_1.AppBskyRichtextFacet.isLink);
        if (client_1.AppBskyRichtextFacet.isLink(link)) {
            return link;
        }
        return undefined;
    }
    isLink() {
        return !!this.link;
    }
    get mention() {
        const mention = this.facet?.features.find(client_1.AppBskyRichtextFacet.isMention);
        if (client_1.AppBskyRichtextFacet.isMention(mention)) {
            return mention;
        }
        return undefined;
    }
    isMention() {
        return !!this.mention;
    }
    get tag() {
        const tag = this.facet?.features.find(client_1.AppBskyRichtextFacet.isTag);
        if (client_1.AppBskyRichtextFacet.isTag(tag)) {
            return tag;
        }
        return undefined;
    }
    isTag() {
        return !!this.tag;
    }
}
exports.RichTextSegment = RichTextSegment;
class RichText {
    constructor(props, opts){
        Object.defineProperty(this, "unicodeText", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "facets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.unicodeText = new unicode_1.UnicodeString(props.text);
        this.facets = props.facets;
        if (!this.facets?.length && props.entities?.length) {
            this.facets = entitiesToFacets(this.unicodeText, props.entities);
        }
        if (this.facets) {
            this.facets = this.facets.filter(facetFilter).sort(facetSort);
        }
        if (opts?.cleanNewlines) {
            (0, sanitization_1.sanitizeRichText)(this, {
                cleanNewlines: true
            }).copyInto(this);
        }
    }
    get text() {
        return this.unicodeText.toString();
    }
    get length() {
        return this.unicodeText.length;
    }
    get graphemeLength() {
        return this.unicodeText.graphemeLength;
    }
    clone() {
        return new RichText({
            text: this.unicodeText.utf16,
            facets: cloneDeep(this.facets)
        });
    }
    copyInto(target) {
        target.unicodeText = this.unicodeText;
        target.facets = cloneDeep(this.facets);
    }
    *segments() {
        const facets = this.facets || [];
        if (!facets.length) {
            yield new RichTextSegment(this.unicodeText.utf16);
            return;
        }
        let textCursor = 0;
        let facetCursor = 0;
        do {
            const currFacet = facets[facetCursor];
            if (textCursor < currFacet.index.byteStart) {
                yield new RichTextSegment(this.unicodeText.slice(textCursor, currFacet.index.byteStart));
            } else if (textCursor > currFacet.index.byteStart) {
                facetCursor++;
                continue;
            }
            if (currFacet.index.byteStart < currFacet.index.byteEnd) {
                const subtext = this.unicodeText.slice(currFacet.index.byteStart, currFacet.index.byteEnd);
                if (!subtext.trim()) {
                    // dont empty string entities
                    yield new RichTextSegment(subtext);
                } else {
                    yield new RichTextSegment(subtext, currFacet);
                }
            }
            textCursor = currFacet.index.byteEnd;
            facetCursor++;
        }while (facetCursor < facets.length)
        if (textCursor < this.unicodeText.length) {
            yield new RichTextSegment(this.unicodeText.slice(textCursor, this.unicodeText.length));
        }
    }
    insert(insertIndex, insertText) {
        this.unicodeText = new unicode_1.UnicodeString(this.unicodeText.slice(0, insertIndex) + insertText + this.unicodeText.slice(insertIndex));
        if (!this.facets?.length) {
            return this;
        }
        const numCharsAdded = insertText.length;
        for (const ent of this.facets){
            // see comment at top of file for labels of each scenario
            // scenario A (before)
            if (insertIndex <= ent.index.byteStart) {
                // move both by num added
                ent.index.byteStart += numCharsAdded;
                ent.index.byteEnd += numCharsAdded;
            } else if (insertIndex >= ent.index.byteStart && insertIndex < ent.index.byteEnd) {
                // move end by num added
                ent.index.byteEnd += numCharsAdded;
            }
        // scenario C (after)
        // noop
        }
        return this;
    }
    delete(removeStartIndex, removeEndIndex) {
        this.unicodeText = new unicode_1.UnicodeString(this.unicodeText.slice(0, removeStartIndex) + this.unicodeText.slice(removeEndIndex));
        if (!this.facets?.length) {
            return this;
        }
        const numCharsRemoved = removeEndIndex - removeStartIndex;
        for (const ent of this.facets){
            // see comment at top of file for labels of each scenario
            // scenario A (entirely outer)
            if (removeStartIndex <= ent.index.byteStart && removeEndIndex >= ent.index.byteEnd) {
                // delete slice (will get removed in final pass)
                ent.index.byteStart = 0;
                ent.index.byteEnd = 0;
            } else if (removeStartIndex > ent.index.byteEnd) {
            // noop
            } else if (removeStartIndex > ent.index.byteStart && removeStartIndex <= ent.index.byteEnd && removeEndIndex > ent.index.byteEnd) {
                // move end to remove start
                ent.index.byteEnd = removeStartIndex;
            } else if (removeStartIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {
                // move end by num removed
                ent.index.byteEnd -= numCharsRemoved;
            } else if (removeStartIndex < ent.index.byteStart && removeEndIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {
                // move start to remove-start index, move end by num removed
                ent.index.byteStart = removeStartIndex;
                ent.index.byteEnd -= numCharsRemoved;
            } else if (removeEndIndex < ent.index.byteStart) {
                // move both by num removed
                ent.index.byteStart -= numCharsRemoved;
                ent.index.byteEnd -= numCharsRemoved;
            }
        }
        // filter out any facets that were made irrelevant
        this.facets = this.facets.filter((ent)=>ent.index.byteStart < ent.index.byteEnd);
        return this;
    }
    /**
     * Detects facets such as links and mentions
     * Note: Overwrites the existing facets with auto-detected facets
     */ async detectFacets(agent) {
        this.facets = (0, detection_1.detectFacets)(this.unicodeText);
        if (this.facets) {
            const promises = [];
            for (const facet of this.facets){
                for (const feature of facet.features){
                    if (client_1.AppBskyRichtextFacet.isMention(feature)) {
                        promises.push(agent.com.atproto.identity.resolveHandle({
                            handle: feature.did
                        }).then((res)=>res?.data.did).catch((_)=>undefined).then((did)=>{
                            feature.did = did || '';
                        }));
                    }
                }
            }
            await Promise.allSettled(promises);
            this.facets.sort(facetSort);
        }
    }
    /**
     * Detects facets such as links and mentions but does not resolve them
     * Will produce invalid facets! For instance, mentions will not have their DIDs set.
     * Note: Overwrites the existing facets with auto-detected facets
     */ detectFacetsWithoutResolution() {
        this.facets = (0, detection_1.detectFacets)(this.unicodeText);
        if (this.facets) {
            this.facets.sort(facetSort);
        }
    }
}
exports.RichText = RichText;
const facetSort = (a, b)=>a.index.byteStart - b.index.byteStart;
const facetFilter = (facet)=>// discard negative-length facets. zero-length facets are valid
    facet.index.byteStart <= facet.index.byteEnd;
function entitiesToFacets(text, entities) {
    const facets = [];
    for (const ent of entities){
        if (ent.type === 'link') {
            facets.push({
                $type: 'app.bsky.richtext.facet',
                index: {
                    byteStart: text.utf16IndexToUtf8Index(ent.index.start),
                    byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
                },
                features: [
                    {
                        $type: 'app.bsky.richtext.facet#link',
                        uri: ent.value
                    }
                ]
            });
        } else if (ent.type === 'mention') {
            facets.push({
                $type: 'app.bsky.richtext.facet',
                index: {
                    byteStart: text.utf16IndexToUtf8Index(ent.index.start),
                    byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
                },
                features: [
                    {
                        $type: 'app.bsky.richtext.facet#mention',
                        did: ent.value
                    }
                ]
            });
        }
    }
    return facets;
}
function cloneDeep(v) {
    if (typeof v === 'undefined') {
        return v;
    }
    return JSON.parse(JSON.stringify(v));
} //# sourceMappingURL=rich-text.js.map
}}),
"[project]/node_modules/@atproto/api/dist/moderation/types.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NOOP_BEHAVIOR = exports.HIDE_BEHAVIOR = exports.MUTEWORD_BEHAVIOR = exports.MUTE_BEHAVIOR = exports.BLOCK_BEHAVIOR = exports.CUSTOM_LABEL_VALUE_RE = void 0;
// syntax
// =
exports.CUSTOM_LABEL_VALUE_RE = /^[a-z-]+$/;
exports.BLOCK_BEHAVIOR = {
    profileList: 'blur',
    profileView: 'alert',
    avatar: 'blur',
    banner: 'blur',
    contentList: 'blur',
    contentView: 'blur'
};
exports.MUTE_BEHAVIOR = {
    profileList: 'inform',
    profileView: 'alert',
    contentList: 'blur',
    contentView: 'inform'
};
exports.MUTEWORD_BEHAVIOR = {
    contentList: 'blur',
    contentView: 'blur'
};
exports.HIDE_BEHAVIOR = {
    contentList: 'blur',
    contentView: 'blur'
};
exports.NOOP_BEHAVIOR = {}; //# sourceMappingURL=types.js.map
}}),
"[project]/node_modules/@atproto/api/dist/moderation/ui.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ModerationUI = void 0;
class ModerationUI {
    constructor(){
        Object.defineProperty(this, "noOverride", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "filters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "blurs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "alerts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "informs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
    }
    get filter() {
        return this.filters.length !== 0;
    }
    get blur() {
        return this.blurs.length !== 0;
    }
    get alert() {
        return this.alerts.length !== 0;
    }
    get inform() {
        return this.informs.length !== 0;
    }
}
exports.ModerationUI = ModerationUI; //# sourceMappingURL=ui.js.map
}}),
"[project]/node_modules/@atproto/api/dist/moderation/const/labels.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LABELS = exports.DEFAULT_LABEL_SETTINGS = void 0;
exports.DEFAULT_LABEL_SETTINGS = {
    porn: 'hide',
    sexual: 'warn',
    nudity: 'ignore',
    'graphic-media': 'warn'
};
exports.LABELS = {
    '!hide': {
        identifier: '!hide',
        configurable: false,
        defaultSetting: 'hide',
        flags: [
            'no-override',
            'no-self'
        ],
        severity: 'alert',
        blurs: 'content',
        behaviors: {
            account: {
                profileList: 'blur',
                profileView: 'blur',
                avatar: 'blur',
                banner: 'blur',
                displayName: 'blur',
                contentList: 'blur',
                contentView: 'blur'
            },
            profile: {
                avatar: 'blur',
                banner: 'blur',
                displayName: 'blur'
            },
            content: {
                contentList: 'blur',
                contentView: 'blur'
            }
        },
        locales: []
    },
    '!warn': {
        identifier: '!warn',
        configurable: false,
        defaultSetting: 'warn',
        flags: [
            'no-self'
        ],
        severity: 'none',
        blurs: 'content',
        behaviors: {
            account: {
                profileList: 'blur',
                profileView: 'blur',
                avatar: 'blur',
                banner: 'blur',
                contentList: 'blur',
                contentView: 'blur'
            },
            profile: {
                avatar: 'blur',
                banner: 'blur',
                displayName: 'blur'
            },
            content: {
                contentList: 'blur',
                contentView: 'blur'
            }
        },
        locales: []
    },
    '!no-unauthenticated': {
        identifier: '!no-unauthenticated',
        configurable: false,
        defaultSetting: 'hide',
        flags: [
            'no-override',
            'unauthed'
        ],
        severity: 'none',
        blurs: 'content',
        behaviors: {
            account: {
                profileList: 'blur',
                profileView: 'blur',
                avatar: 'blur',
                banner: 'blur',
                displayName: 'blur',
                contentList: 'blur',
                contentView: 'blur'
            },
            profile: {
                avatar: 'blur',
                banner: 'blur',
                displayName: 'blur'
            },
            content: {
                contentList: 'blur',
                contentView: 'blur'
            }
        },
        locales: []
    },
    porn: {
        identifier: 'porn',
        configurable: true,
        defaultSetting: 'hide',
        flags: [
            'adult'
        ],
        severity: 'none',
        blurs: 'media',
        behaviors: {
            account: {
                avatar: 'blur',
                banner: 'blur'
            },
            profile: {
                avatar: 'blur',
                banner: 'blur'
            },
            content: {
                contentMedia: 'blur'
            }
        },
        locales: []
    },
    sexual: {
        identifier: 'sexual',
        configurable: true,
        defaultSetting: 'warn',
        flags: [
            'adult'
        ],
        severity: 'none',
        blurs: 'media',
        behaviors: {
            account: {
                avatar: 'blur',
                banner: 'blur'
            },
            profile: {
                avatar: 'blur',
                banner: 'blur'
            },
            content: {
                contentMedia: 'blur'
            }
        },
        locales: []
    },
    nudity: {
        identifier: 'nudity',
        configurable: true,
        defaultSetting: 'ignore',
        flags: [],
        severity: 'none',
        blurs: 'media',
        behaviors: {
            account: {
                avatar: 'blur',
                banner: 'blur'
            },
            profile: {
                avatar: 'blur',
                banner: 'blur'
            },
            content: {
                contentMedia: 'blur'
            }
        },
        locales: []
    },
    'graphic-media': {
        identifier: 'graphic-media',
        flags: [
            'adult'
        ],
        configurable: true,
        defaultSetting: 'warn',
        severity: 'none',
        blurs: 'media',
        behaviors: {
            account: {
                avatar: 'blur',
                banner: 'blur'
            },
            profile: {
                avatar: 'blur',
                banner: 'blur'
            },
            content: {
                contentMedia: 'blur'
            }
        },
        locales: []
    },
    /** @deprecated alias for `graphic-media` */ gore: {
        identifier: 'gore',
        flags: [
            'adult'
        ],
        configurable: true,
        defaultSetting: 'warn',
        severity: 'none',
        blurs: 'media',
        behaviors: {
            account: {
                avatar: 'blur',
                banner: 'blur'
            },
            profile: {
                avatar: 'blur',
                banner: 'blur'
            },
            content: {
                contentMedia: 'blur'
            }
        },
        locales: []
    }
}; //# sourceMappingURL=labels.js.map
}}),
"[project]/node_modules/@atproto/api/dist/moderation/decision.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ModerationDecision = void 0;
const types_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/types.js [app-client] (ecmascript)");
const ui_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/ui.js [app-client] (ecmascript)");
const labels_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/const/labels.js [app-client] (ecmascript)");
var ModerationBehaviorSeverity;
(function(ModerationBehaviorSeverity) {
    ModerationBehaviorSeverity[ModerationBehaviorSeverity["High"] = 0] = "High";
    ModerationBehaviorSeverity[ModerationBehaviorSeverity["Medium"] = 1] = "Medium";
    ModerationBehaviorSeverity[ModerationBehaviorSeverity["Low"] = 2] = "Low";
})(ModerationBehaviorSeverity || (ModerationBehaviorSeverity = {}));
class ModerationDecision {
    constructor(){
        Object.defineProperty(this, "did", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ''
        });
        Object.defineProperty(this, "isMe", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "causes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
    }
    static merge(...decisions) {
        const decisionsFiltered = decisions.filter((v)=>!!v);
        const decision = new ModerationDecision();
        if (decisionsFiltered[0]) {
            decision.did = decisionsFiltered[0].did;
            decision.isMe = decisionsFiltered[0].isMe;
        }
        decision.causes = decisionsFiltered.flatMap((d)=>d.causes);
        return decision;
    }
    downgrade() {
        for (const cause of this.causes){
            cause.downgraded = true;
        }
        return this;
    }
    get blocked() {
        return !!this.blockCause;
    }
    get muted() {
        return !!this.muteCause;
    }
    get blockCause() {
        return this.causes.find((cause)=>cause.type === 'blocking' || cause.type === 'blocked-by' || cause.type === 'block-other');
    }
    get muteCause() {
        return this.causes.find((cause)=>cause.type === 'muted');
    }
    get labelCauses() {
        return this.causes.filter((cause)=>cause.type === 'label');
    }
    ui(context) {
        const ui = new ui_1.ModerationUI();
        for (const cause of this.causes){
            if (cause.type === 'blocking' || cause.type === 'blocked-by' || cause.type === 'block-other') {
                if (this.isMe) {
                    continue;
                }
                if (context === 'profileList' || context === 'contentList') {
                    ui.filters.push(cause);
                }
                if (!cause.downgraded) {
                    if (types_1.BLOCK_BEHAVIOR[context] === 'blur') {
                        ui.noOverride = true;
                        ui.blurs.push(cause);
                    } else if (types_1.BLOCK_BEHAVIOR[context] === 'alert') {
                        ui.alerts.push(cause);
                    } else if (types_1.BLOCK_BEHAVIOR[context] === 'inform') {
                        ui.informs.push(cause);
                    }
                }
            } else if (cause.type === 'muted') {
                if (this.isMe) {
                    continue;
                }
                if (context === 'profileList' || context === 'contentList') {
                    ui.filters.push(cause);
                }
                if (!cause.downgraded) {
                    if (types_1.MUTE_BEHAVIOR[context] === 'blur') {
                        ui.blurs.push(cause);
                    } else if (types_1.MUTE_BEHAVIOR[context] === 'alert') {
                        ui.alerts.push(cause);
                    } else if (types_1.MUTE_BEHAVIOR[context] === 'inform') {
                        ui.informs.push(cause);
                    }
                }
            } else if (cause.type === 'mute-word') {
                if (this.isMe) {
                    continue;
                }
                if (context === 'contentList') {
                    ui.filters.push(cause);
                }
                if (!cause.downgraded) {
                    if (types_1.MUTEWORD_BEHAVIOR[context] === 'blur') {
                        ui.blurs.push(cause);
                    } else if (types_1.MUTEWORD_BEHAVIOR[context] === 'alert') {
                        ui.alerts.push(cause);
                    } else if (types_1.MUTEWORD_BEHAVIOR[context] === 'inform') {
                        ui.informs.push(cause);
                    }
                }
            } else if (cause.type === 'hidden') {
                if (context === 'profileList' || context === 'contentList') {
                    ui.filters.push(cause);
                }
                if (!cause.downgraded) {
                    if (types_1.HIDE_BEHAVIOR[context] === 'blur') {
                        ui.blurs.push(cause);
                    } else if (types_1.HIDE_BEHAVIOR[context] === 'alert') {
                        ui.alerts.push(cause);
                    } else if (types_1.HIDE_BEHAVIOR[context] === 'inform') {
                        ui.informs.push(cause);
                    }
                }
            } else if (cause.type === 'label') {
                if (context === 'profileList' && cause.target === 'account') {
                    if (cause.setting === 'hide' && !this.isMe) {
                        ui.filters.push(cause);
                    }
                } else if (context === 'contentList' && (cause.target === 'account' || cause.target === 'content')) {
                    if (cause.setting === 'hide' && !this.isMe) {
                        ui.filters.push(cause);
                    }
                }
                if (!cause.downgraded) {
                    if (cause.behavior[context] === 'blur') {
                        ui.blurs.push(cause);
                        if (cause.noOverride && !this.isMe) {
                            ui.noOverride = true;
                        }
                    } else if (cause.behavior[context] === 'alert') {
                        ui.alerts.push(cause);
                    } else if (cause.behavior[context] === 'inform') {
                        ui.informs.push(cause);
                    }
                }
            }
        }
        ui.filters.sort(sortByPriority);
        ui.blurs.sort(sortByPriority);
        return ui;
    }
    setDid(did) {
        this.did = did;
    }
    setIsMe(isMe) {
        this.isMe = isMe;
    }
    addHidden(hidden) {
        if (hidden) {
            this.causes.push({
                type: 'hidden',
                source: {
                    type: 'user'
                },
                priority: 6
            });
        }
    }
    addMutedWord(mutedWord) {
        if (mutedWord) {
            this.causes.push({
                type: 'mute-word',
                source: {
                    type: 'user'
                },
                priority: 6
            });
        }
    }
    addBlocking(blocking) {
        if (blocking) {
            this.causes.push({
                type: 'blocking',
                source: {
                    type: 'user'
                },
                priority: 3
            });
        }
    }
    addBlockingByList(blockingByList) {
        if (blockingByList) {
            this.causes.push({
                type: 'blocking',
                source: {
                    type: 'list',
                    list: blockingByList
                },
                priority: 3
            });
        }
    }
    addBlockedBy(blockedBy) {
        if (blockedBy) {
            this.causes.push({
                type: 'blocked-by',
                source: {
                    type: 'user'
                },
                priority: 4
            });
        }
    }
    addBlockOther(blockOther) {
        if (blockOther) {
            this.causes.push({
                type: 'block-other',
                source: {
                    type: 'user'
                },
                priority: 4
            });
        }
    }
    addLabel(target, label, opts) {
        // look up the label definition
        const labelDef = types_1.CUSTOM_LABEL_VALUE_RE.test(label.val) ? opts.labelDefs?.[label.src]?.find((def)=>def.identifier === label.val) || labels_1.LABELS[label.val] : labels_1.LABELS[label.val];
        if (!labelDef) {
            // ignore labels we don't understand
            return;
        }
        // look up the label preference
        const isSelf = label.src === this.did;
        const labeler = isSelf ? undefined : opts.prefs.labelers.find((s)=>s.did === label.src);
        if (!isSelf && !labeler) {
            return; // skip labelers not configured by the user
        }
        if (isSelf && labelDef.flags.includes('no-self')) {
            return; // skip self-labels that aren't supported
        }
        // establish the label preference for interpretation
        let labelPref = labelDef.defaultSetting || 'ignore';
        if (!labelDef.configurable) {
            labelPref = labelDef.defaultSetting || 'hide';
        } else if (labelDef.flags.includes('adult') && !opts.prefs.adultContentEnabled) {
            labelPref = 'hide';
        } else if (labeler?.labels[labelDef.identifier]) {
            labelPref = labeler?.labels[labelDef.identifier];
        } else if (opts.prefs.labels[labelDef.identifier]) {
            labelPref = opts.prefs.labels[labelDef.identifier];
        }
        // ignore labels the user has asked to ignore
        if (labelPref === 'ignore') {
            return;
        }
        // ignore 'unauthed' labels when the user is authed
        if (labelDef.flags.includes('unauthed') && !!opts.userDid) {
            return;
        }
        // establish the priority of the label
        let priority;
        const severity = measureModerationBehaviorSeverity(labelDef.behaviors[target]);
        if (labelDef.flags.includes('no-override') || labelDef.flags.includes('adult') && !opts.prefs.adultContentEnabled) {
            priority = 1;
        } else if (labelPref === 'hide') {
            priority = 2;
        } else if (severity === ModerationBehaviorSeverity.High) {
            // blurring profile view or content view
            priority = 5;
        } else if (severity === ModerationBehaviorSeverity.Medium) {
            // blurring content list or content media
            priority = 7;
        } else {
            // blurring avatar, adding alerts
            priority = 8;
        }
        let noOverride = false;
        if (labelDef.flags.includes('no-override')) {
            noOverride = true;
        } else if (labelDef.flags.includes('adult') && !opts.prefs.adultContentEnabled) {
            noOverride = true;
        }
        this.causes.push({
            type: 'label',
            source: isSelf || !labeler ? {
                type: 'user'
            } : {
                type: 'labeler',
                did: labeler.did
            },
            label,
            labelDef,
            target,
            setting: labelPref,
            behavior: labelDef.behaviors[target] || types_1.NOOP_BEHAVIOR,
            noOverride,
            priority
        });
    }
    addMuted(muted) {
        if (muted) {
            this.causes.push({
                type: 'muted',
                source: {
                    type: 'user'
                },
                priority: 6
            });
        }
    }
    addMutedByList(mutedByList) {
        if (mutedByList) {
            this.causes.push({
                type: 'muted',
                source: {
                    type: 'list',
                    list: mutedByList
                },
                priority: 6
            });
        }
    }
}
exports.ModerationDecision = ModerationDecision;
function measureModerationBehaviorSeverity(beh) {
    if (!beh) {
        return ModerationBehaviorSeverity.Low;
    }
    if (beh.profileView === 'blur' || beh.contentView === 'blur') {
        return ModerationBehaviorSeverity.High;
    }
    if (beh.contentList === 'blur' || beh.contentMedia === 'blur') {
        return ModerationBehaviorSeverity.Medium;
    }
    return ModerationBehaviorSeverity.Low;
}
function sortByPriority(a, b) {
    return a.priority - b.priority;
} //# sourceMappingURL=decision.js.map
}}),
"[project]/node_modules/@atproto/api/dist/moderation/subjects/account.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.decideAccount = decideAccount;
exports.filterAccountLabels = filterAccountLabels;
const decision_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/decision.js [app-client] (ecmascript)");
function decideAccount(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.did);
    acc.setIsMe(subject.did === opts.userDid);
    if (subject.viewer?.muted) {
        if (subject.viewer?.mutedByList) {
            acc.addMutedByList(subject.viewer?.mutedByList);
        } else {
            acc.addMuted(subject.viewer?.muted);
        }
    }
    if (subject.viewer?.blocking) {
        if (subject.viewer?.blockingByList) {
            acc.addBlockingByList(subject.viewer?.blockingByList);
        } else {
            acc.addBlocking(subject.viewer?.blocking);
        }
    }
    acc.addBlockedBy(subject.viewer?.blockedBy);
    for (const label of filterAccountLabels(subject.labels)){
        acc.addLabel('account', label, opts);
    }
    return acc;
}
function filterAccountLabels(labels) {
    if (!labels) {
        return [];
    }
    return labels.filter((label)=>!label.uri.endsWith('/app.bsky.actor.profile/self') || label.val === '!no-unauthenticated');
} //# sourceMappingURL=account.js.map
}}),
"[project]/node_modules/@atproto/api/dist/moderation/subjects/profile.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.decideProfile = decideProfile;
exports.filterProfileLabels = filterProfileLabels;
const decision_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/decision.js [app-client] (ecmascript)");
function decideProfile(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.did);
    acc.setIsMe(subject.did === opts.userDid);
    for (const label of filterProfileLabels(subject.labels)){
        acc.addLabel('profile', label, opts);
    }
    return acc;
}
function filterProfileLabels(labels) {
    if (!labels) {
        return [];
    }
    return labels.filter((label)=>label.uri.endsWith('/app.bsky.actor.profile/self'));
} //# sourceMappingURL=profile.js.map
}}),
"[project]/node_modules/@atproto/api/dist/moderation/subjects/notification.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.decideNotification = decideNotification;
const decision_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/decision.js [app-client] (ecmascript)");
const account_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/subjects/account.js [app-client] (ecmascript)");
const profile_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/subjects/profile.js [app-client] (ecmascript)");
function decideNotification(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.author.did);
    acc.setIsMe(subject.author.did === opts.userDid);
    if (subject.labels?.length) {
        for (const label of subject.labels){
            acc.addLabel('content', label, opts);
        }
    }
    return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
} //# sourceMappingURL=notification.js.map
}}),
"[project]/node_modules/@atproto/api/dist/moderation/mutewords.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.hasMutedWord = hasMutedWord;
const client_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/index.js [app-client] (ecmascript)");
const REGEX = {
    LEADING_TRAILING_PUNCTUATION: /(?:^\p{P}+|\p{P}+$)/gu,
    ESCAPE: /[[\]{}()*+?.\\^$|\s]/g,
    SEPARATORS: /[/\-–—()[\]_]+/g,
    WORD_BOUNDARY: /[\s\n\t\r\f\v]+?/g
};
/**
 * List of 2-letter lang codes for languages that either don't use spaces, or
 * don't use spaces in a way conducive to word-based filtering.
 *
 * For these, we use a simple `String.includes` to check for a match.
 */ const LANGUAGE_EXCEPTIONS = [
    'ja',
    'zh',
    'ko',
    'th',
    'vi'
];
function hasMutedWord({ mutedWords, text, facets, outlineTags, languages, actor }) {
    const exception = LANGUAGE_EXCEPTIONS.includes(languages?.[0] || '');
    const tags = [].concat(outlineTags || []).concat((facets || []).flatMap((facet)=>facet.features.filter(client_1.AppBskyRichtextFacet.isTag).map((tag)=>tag.tag))).map((t)=>t.toLowerCase());
    for (const mute of mutedWords){
        const mutedWord = mute.value.toLowerCase();
        const postText = text.toLowerCase();
        // expired, ignore
        if (mute.expiresAt && mute.expiresAt < new Date().toISOString()) continue;
        if (mute.actorTarget === 'exclude-following' && Boolean(actor?.viewer?.following)) continue;
        // `content` applies to tags as well
        if (tags.includes(mutedWord)) return true;
        // rest of the checks are for `content` only
        if (!mute.targets.includes('content')) continue;
        // single character or other exception, has to use includes
        if ((mutedWord.length === 1 || exception) && postText.includes(mutedWord)) return true;
        // too long
        if (mutedWord.length > postText.length) continue;
        // exact match
        if (mutedWord === postText) return true;
        // any muted phrase with space or punctuation
        if (/(?:\s|\p{P})+?/u.test(mutedWord) && postText.includes(mutedWord)) return true;
        // check individual character groups
        const words = postText.split(REGEX.WORD_BOUNDARY);
        for (const word of words){
            if (word === mutedWord) return true;
            // compare word without leading/trailing punctuation, but allow internal
            // punctuation (such as `s@ssy`)
            const wordTrimmedPunctuation = word.replace(REGEX.LEADING_TRAILING_PUNCTUATION, '');
            if (mutedWord === wordTrimmedPunctuation) return true;
            if (mutedWord.length > wordTrimmedPunctuation.length) continue;
            if (/\p{P}+/u.test(wordTrimmedPunctuation)) {
                const spacedWord = wordTrimmedPunctuation.replace(/\p{P}+/gu, ' ');
                if (spacedWord === mutedWord) return true;
                const contiguousWord = spacedWord.replace(/\s/gu, '');
                if (contiguousWord === mutedWord) return true;
                const wordParts = wordTrimmedPunctuation.split(/\p{P}+/u);
                for (const wordPart of wordParts){
                    if (wordPart === mutedWord) return true;
                }
            }
        }
    }
    return false;
} //# sourceMappingURL=mutewords.js.map
}}),
"[project]/node_modules/@atproto/api/dist/moderation/subjects/post.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.decidePost = decidePost;
const decision_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/decision.js [app-client] (ecmascript)");
const client_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/index.js [app-client] (ecmascript)");
const mutewords_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/mutewords.js [app-client] (ecmascript)");
const account_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/subjects/account.js [app-client] (ecmascript)");
const profile_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/subjects/profile.js [app-client] (ecmascript)");
function decidePost(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.author.did);
    acc.setIsMe(subject.author.did === opts.userDid);
    if (subject.labels?.length) {
        for (const label of subject.labels){
            acc.addLabel('content', label, opts);
        }
    }
    acc.addHidden(checkHiddenPost(subject, opts.prefs.hiddenPosts));
    if (!acc.isMe) {
        acc.addMutedWord(checkMutedWords(subject, opts.prefs.mutedWords));
    }
    let embedAcc;
    if (subject.embed) {
        if (client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record)) {
            // quote post
            embedAcc = decideQuotedPost(subject.embed.record, opts);
        } else if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record)) {
            // quoted post with media
            embedAcc = decideQuotedPost(subject.embed.record.record, opts);
        } else if (client_1.AppBskyEmbedRecord.isViewBlocked(subject.embed.record)) {
            // blocked quote post
            embedAcc = decideBlockedQuotedPost(subject.embed.record, opts);
        } else if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewBlocked(subject.embed.record.record)) {
            // blocked quoted post with media
            embedAcc = decideBlockedQuotedPost(subject.embed.record.record, opts);
        }
    }
    return decision_1.ModerationDecision.merge(acc, embedAcc?.downgrade(), (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
}
function decideQuotedPost(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.author.did);
    acc.setIsMe(subject.author.did === opts.userDid);
    if (subject.labels?.length) {
        for (const label of subject.labels){
            acc.addLabel('content', label, opts);
        }
    }
    return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
}
function decideBlockedQuotedPost(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.author.did);
    acc.setIsMe(subject.author.did === opts.userDid);
    if (subject.author.viewer?.muted) {
        if (subject.author.viewer?.mutedByList) {
            acc.addMutedByList(subject.author.viewer?.mutedByList);
        } else {
            acc.addMuted(subject.author.viewer?.muted);
        }
    }
    if (subject.author.viewer?.blocking) {
        if (subject.author.viewer?.blockingByList) {
            acc.addBlockingByList(subject.author.viewer?.blockingByList);
        } else {
            acc.addBlocking(subject.author.viewer?.blocking);
        }
    }
    acc.addBlockedBy(subject.author.viewer?.blockedBy);
    return acc;
}
function checkHiddenPost(subject, hiddenPosts) {
    if (!hiddenPosts?.length) {
        return false;
    }
    if (hiddenPosts.includes(subject.uri)) {
        return true;
    }
    if (subject.embed) {
        if (client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record) && hiddenPosts.includes(subject.embed.record.uri)) {
            return true;
        }
        if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record) && hiddenPosts.includes(subject.embed.record.record.uri)) {
            return true;
        }
    }
    return false;
}
function checkMutedWords(subject, mutedWords) {
    if (!mutedWords?.length) {
        return false;
    }
    const postAuthor = subject.author;
    if (client_1.AppBskyFeedPost.isRecord(subject.record)) {
        // post text
        if ((0, mutewords_1.hasMutedWord)({
            mutedWords,
            text: subject.record.text,
            facets: subject.record.facets,
            outlineTags: subject.record.tags,
            languages: subject.record.langs,
            actor: postAuthor
        })) {
            return true;
        }
        if (subject.record.embed && client_1.AppBskyEmbedImages.isMain(subject.record.embed)) {
            // post images
            for (const image of subject.record.embed.images){
                if ((0, mutewords_1.hasMutedWord)({
                    mutedWords,
                    text: image.alt,
                    languages: subject.record.langs,
                    actor: postAuthor
                })) {
                    return true;
                }
            }
        }
    }
    if (subject.embed) {
        // quote post
        if (client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record)) {
            if (client_1.AppBskyFeedPost.isRecord(subject.embed.record.value)) {
                const embeddedPost = subject.embed.record.value;
                const embedAuthor = subject.embed.record.author;
                // quoted post text
                if ((0, mutewords_1.hasMutedWord)({
                    mutedWords,
                    text: embeddedPost.text,
                    facets: embeddedPost.facets,
                    outlineTags: embeddedPost.tags,
                    languages: embeddedPost.langs,
                    actor: embedAuthor
                })) {
                    return true;
                }
                // quoted post's images
                if (client_1.AppBskyEmbedImages.isMain(embeddedPost.embed)) {
                    for (const image of embeddedPost.embed.images){
                        if ((0, mutewords_1.hasMutedWord)({
                            mutedWords,
                            text: image.alt,
                            languages: embeddedPost.langs,
                            actor: embedAuthor
                        })) {
                            return true;
                        }
                    }
                }
                // quoted post's link card
                if (client_1.AppBskyEmbedExternal.isMain(embeddedPost.embed)) {
                    const { external } = embeddedPost.embed;
                    if ((0, mutewords_1.hasMutedWord)({
                        mutedWords,
                        text: external.title + ' ' + external.description,
                        languages: [],
                        actor: embedAuthor
                    })) {
                        return true;
                    }
                }
                if (client_1.AppBskyEmbedRecordWithMedia.isMain(embeddedPost.embed)) {
                    // quoted post's link card when it did a quote + media
                    if (client_1.AppBskyEmbedExternal.isMain(embeddedPost.embed.media)) {
                        const { external } = embeddedPost.embed.media;
                        if ((0, mutewords_1.hasMutedWord)({
                            mutedWords,
                            text: external.title + ' ' + external.description,
                            languages: [],
                            actor: embedAuthor
                        })) {
                            return true;
                        }
                    }
                    // quoted post's images when it did a quote + media
                    if (client_1.AppBskyEmbedImages.isMain(embeddedPost.embed.media)) {
                        for (const image of embeddedPost.embed.media.images){
                            if ((0, mutewords_1.hasMutedWord)({
                                mutedWords,
                                text: image.alt,
                                languages: client_1.AppBskyFeedPost.isRecord(embeddedPost.record) ? embeddedPost.langs : [],
                                actor: embedAuthor
                            })) {
                                return true;
                            }
                        }
                    }
                }
            }
        } else if (client_1.AppBskyEmbedExternal.isView(subject.embed)) {
            const { external } = subject.embed;
            if ((0, mutewords_1.hasMutedWord)({
                mutedWords,
                text: external.title + ' ' + external.description,
                languages: [],
                actor: postAuthor
            })) {
                return true;
            }
        } else if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record)) {
            const embedAuthor = subject.embed.record.record.author;
            // quoted post text
            if (client_1.AppBskyFeedPost.isRecord(subject.embed.record.record.value)) {
                const post = subject.embed.record.record.value;
                if ((0, mutewords_1.hasMutedWord)({
                    mutedWords,
                    text: post.text,
                    facets: post.facets,
                    outlineTags: post.tags,
                    languages: post.langs,
                    actor: embedAuthor
                })) {
                    return true;
                }
            }
            // quoted post images
            if (client_1.AppBskyEmbedImages.isView(subject.embed.media)) {
                for (const image of subject.embed.media.images){
                    if ((0, mutewords_1.hasMutedWord)({
                        mutedWords,
                        text: image.alt,
                        languages: client_1.AppBskyFeedPost.isRecord(subject.record) ? subject.record.langs : [],
                        actor: embedAuthor
                    })) {
                        return true;
                    }
                }
            }
            if (client_1.AppBskyEmbedExternal.isView(subject.embed.media)) {
                const { external } = subject.embed.media;
                if ((0, mutewords_1.hasMutedWord)({
                    mutedWords,
                    text: external.title + ' ' + external.description,
                    languages: [],
                    actor: embedAuthor
                })) {
                    return true;
                }
            }
        }
    }
    return false;
} //# sourceMappingURL=post.js.map
}}),
"[project]/node_modules/@atproto/api/dist/moderation/subjects/feed-generator.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.decideFeedGenerator = decideFeedGenerator;
const decision_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/decision.js [app-client] (ecmascript)");
const account_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/subjects/account.js [app-client] (ecmascript)");
const profile_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/subjects/profile.js [app-client] (ecmascript)");
function decideFeedGenerator(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.creator.did);
    acc.setIsMe(subject.creator.did === opts.userDid);
    if (subject.labels?.length) {
        for (const label of subject.labels){
            acc.addLabel('content', label, opts);
        }
    }
    return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.creator, opts), (0, profile_1.decideProfile)(subject.creator, opts));
} //# sourceMappingURL=feed-generator.js.map
}}),
"[project]/node_modules/@atproto/api/dist/moderation/subjects/user-list.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.decideUserList = decideUserList;
const syntax_1 = __turbopack_require__("[project]/node_modules/@atproto/syntax/dist/index.js [app-client] (ecmascript)");
const decision_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/decision.js [app-client] (ecmascript)");
const account_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/subjects/account.js [app-client] (ecmascript)");
const profile_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/subjects/profile.js [app-client] (ecmascript)");
function decideUserList(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    const creator = isProfile(subject.creator) ? subject.creator : undefined;
    if (creator) {
        acc.setDid(creator.did);
        acc.setIsMe(creator.did === opts.userDid);
        if (subject.labels?.length) {
            for (const label of subject.labels){
                acc.addLabel('content', label, opts);
            }
        }
        return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(creator, opts), (0, profile_1.decideProfile)(creator, opts));
    }
    const creatorDid = new syntax_1.AtUri(subject.uri).hostname;
    acc.setDid(creatorDid);
    acc.setIsMe(creatorDid === opts.userDid);
    if (subject.labels?.length) {
        for (const label of subject.labels){
            acc.addLabel('content', label, opts);
        }
    }
    return acc;
}
function isProfile(v) {
    return v && typeof v === 'object' && 'did' in v;
} //# sourceMappingURL=user-list.js.map
}}),
"[project]/node_modules/@atproto/api/dist/moderation/util.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isQuotedPost = isQuotedPost;
exports.isQuotedPostWithMedia = isQuotedPostWithMedia;
exports.interpretLabelValueDefinition = interpretLabelValueDefinition;
exports.interpretLabelValueDefinitions = interpretLabelValueDefinitions;
const client_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/index.js [app-client] (ecmascript)");
function isQuotedPost(embed) {
    return Boolean(embed && client_1.AppBskyEmbedRecord.isView(embed));
}
function isQuotedPostWithMedia(embed) {
    return Boolean(embed && client_1.AppBskyEmbedRecordWithMedia.isView(embed));
}
function interpretLabelValueDefinition(def, definedBy) {
    const behaviors = {
        account: {},
        profile: {},
        content: {}
    };
    const alertOrInform = def.severity === 'alert' ? 'alert' : def.severity === 'inform' ? 'inform' : undefined;
    if (def.blurs === 'content') {
        // target=account, blurs=content
        behaviors.account.profileList = alertOrInform;
        behaviors.account.profileView = alertOrInform;
        behaviors.account.contentList = 'blur';
        behaviors.account.contentView = def.adultOnly ? 'blur' : alertOrInform;
        // target=profile, blurs=content
        behaviors.profile.profileList = alertOrInform;
        behaviors.profile.profileView = alertOrInform;
        // target=content, blurs=content
        behaviors.content.contentList = 'blur';
        behaviors.content.contentView = def.adultOnly ? 'blur' : alertOrInform;
    } else if (def.blurs === 'media') {
        // target=account, blurs=media
        behaviors.account.profileList = alertOrInform;
        behaviors.account.profileView = alertOrInform;
        behaviors.account.avatar = 'blur';
        behaviors.account.banner = 'blur';
        // target=profile, blurs=media
        behaviors.profile.profileList = alertOrInform;
        behaviors.profile.profileView = alertOrInform;
        behaviors.profile.avatar = 'blur';
        behaviors.profile.banner = 'blur';
        // target=content, blurs=media
        behaviors.content.contentMedia = 'blur';
    } else if (def.blurs === 'none') {
        // target=account, blurs=none
        behaviors.account.profileList = alertOrInform;
        behaviors.account.profileView = alertOrInform;
        behaviors.account.contentList = alertOrInform;
        behaviors.account.contentView = alertOrInform;
        // target=profile, blurs=none
        behaviors.profile.profileList = alertOrInform;
        behaviors.profile.profileView = alertOrInform;
        // target=content, blurs=none
        behaviors.content.contentList = alertOrInform;
        behaviors.content.contentView = alertOrInform;
    }
    let defaultSetting = 'warn';
    if (def.defaultSetting === 'hide' || def.defaultSetting === 'ignore') {
        defaultSetting = def.defaultSetting;
    }
    const flags = [
        'no-self'
    ];
    if (def.adultOnly) {
        flags.push('adult');
    }
    return {
        ...def,
        definedBy,
        configurable: true,
        defaultSetting,
        flags,
        behaviors
    };
}
function interpretLabelValueDefinitions(labelerView) {
    return (labelerView.policies?.labelValueDefinitions || []).filter((labelValDef)=>client_1.ComAtprotoLabelDefs.validateLabelValueDefinition(labelValDef).success).map((labelValDef)=>interpretLabelValueDefinition(labelValDef, labelerView.creator.did));
} //# sourceMappingURL=util.js.map
}}),
"[project]/node_modules/@atproto/api/dist/moderation/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.interpretLabelValueDefinitions = exports.interpretLabelValueDefinition = exports.hasMutedWord = exports.ModerationDecision = exports.ModerationUI = void 0;
exports.moderateProfile = moderateProfile;
exports.moderatePost = moderatePost;
exports.moderateNotification = moderateNotification;
exports.moderateFeedGenerator = moderateFeedGenerator;
exports.moderateUserList = moderateUserList;
const account_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/subjects/account.js [app-client] (ecmascript)");
const profile_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/subjects/profile.js [app-client] (ecmascript)");
const notification_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/subjects/notification.js [app-client] (ecmascript)");
const post_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/subjects/post.js [app-client] (ecmascript)");
const feed_generator_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/subjects/feed-generator.js [app-client] (ecmascript)");
const user_list_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/subjects/user-list.js [app-client] (ecmascript)");
const decision_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/decision.js [app-client] (ecmascript)");
var ui_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/ui.js [app-client] (ecmascript)");
Object.defineProperty(exports, "ModerationUI", {
    enumerable: true,
    get: function() {
        return ui_1.ModerationUI;
    }
});
var decision_2 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/decision.js [app-client] (ecmascript)");
Object.defineProperty(exports, "ModerationDecision", {
    enumerable: true,
    get: function() {
        return decision_2.ModerationDecision;
    }
});
var mutewords_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/mutewords.js [app-client] (ecmascript)");
Object.defineProperty(exports, "hasMutedWord", {
    enumerable: true,
    get: function() {
        return mutewords_1.hasMutedWord;
    }
});
var util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/util.js [app-client] (ecmascript)");
Object.defineProperty(exports, "interpretLabelValueDefinition", {
    enumerable: true,
    get: function() {
        return util_1.interpretLabelValueDefinition;
    }
});
Object.defineProperty(exports, "interpretLabelValueDefinitions", {
    enumerable: true,
    get: function() {
        return util_1.interpretLabelValueDefinitions;
    }
});
function moderateProfile(subject, opts) {
    return decision_1.ModerationDecision.merge((0, account_1.decideAccount)(subject, opts), (0, profile_1.decideProfile)(subject, opts));
}
function moderatePost(subject, opts) {
    return (0, post_1.decidePost)(subject, opts);
}
function moderateNotification(subject, opts) {
    return (0, notification_1.decideNotification)(subject, opts);
}
function moderateFeedGenerator(subject, opts) {
    return (0, feed_generator_1.decideFeedGenerator)(subject, opts);
}
function moderateUserList(subject, opts) {
    return (0, user_list_1.decideUserList)(subject, opts);
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@atproto/api/dist/mocker.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.mock = void 0;
const FAKE_CID = 'bafyreiclp443lavogvhj3d2ob2cxbfuscni2k5jk7bebjzg7khl3esabwq';
exports.mock = {
    post ({ text, facets, reply, embed }) {
        return {
            $type: 'app.bsky.feed.post',
            text,
            facets,
            reply,
            embed,
            langs: [
                'en'
            ],
            createdAt: new Date().toISOString()
        };
    },
    postView ({ record, author, embed, replyCount, repostCount, likeCount, viewer, labels }) {
        return {
            $type: 'app.bsky.feed.defs#postView',
            uri: `at://${author.did}/app.bsky.feed.post/fake`,
            cid: FAKE_CID,
            author,
            record,
            embed,
            replyCount,
            repostCount,
            likeCount,
            indexedAt: new Date().toISOString(),
            viewer,
            labels
        };
    },
    embedRecordView ({ record, author, labels }) {
        return {
            $type: 'app.bsky.embed.record#view',
            record: {
                $type: 'app.bsky.embed.record#viewRecord',
                uri: `at://${author.did}/app.bsky.feed.post/fake`,
                cid: FAKE_CID,
                author,
                value: record,
                labels,
                indexedAt: new Date().toISOString()
            }
        };
    },
    profileViewBasic ({ handle, displayName, description, viewer, labels }) {
        return {
            did: `did:web:${handle}`,
            handle,
            displayName,
            description,
            viewer,
            labels
        };
    },
    actorViewerState ({ muted, mutedByList, blockedBy, blocking, blockingByList, following, followedBy }) {
        return {
            muted,
            mutedByList,
            blockedBy,
            blocking,
            blockingByList,
            following,
            followedBy
        };
    },
    listViewBasic ({ name }) {
        return {
            uri: 'at://did:plc:fake/app.bsky.graph.list/fake',
            cid: FAKE_CID,
            name,
            purpose: 'app.bsky.graph.defs#modlist',
            indexedAt: new Date().toISOString()
        };
    },
    replyNotification ({ author, record, labels }) {
        return {
            uri: `at://${author.did}/app.bsky.feed.post/fake`,
            cid: FAKE_CID,
            author,
            reason: 'reply',
            reasonSubject: `at://${author.did}/app.bsky.feed.post/fake-parent`,
            record,
            isRead: false,
            indexedAt: new Date().toISOString(),
            labels
        };
    },
    followNotification ({ author, subjectDid, labels }) {
        return {
            uri: `at://${author.did}/app.bsky.graph.follow/fake`,
            cid: FAKE_CID,
            author,
            reason: 'follow',
            record: {
                $type: 'app.bsky.graph.follow',
                createdAt: new Date().toISOString(),
                subject: subjectDid
            },
            isRead: false,
            indexedAt: new Date().toISOString(),
            labels
        };
    },
    label ({ val, uri, src }) {
        return {
            src: src || 'did:plc:fake-labeler',
            uri,
            val,
            cts: new Date().toISOString()
        };
    }
}; //# sourceMappingURL=mocker.js.map
}}),
"[project]/node_modules/@atproto/api/dist/agent.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
var _Agent_prefsLock;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Agent = void 0;
const common_web_1 = __turbopack_require__("[project]/node_modules/@atproto/common-web/dist/index.js [app-client] (ecmascript)");
const syntax_1 = __turbopack_require__("[project]/node_modules/@atproto/syntax/dist/index.js [app-client] (ecmascript)");
const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
const await_lock_1 = __importDefault(__turbopack_require__("[project]/node_modules/await-lock/build/AwaitLock.js [app-client] (ecmascript)"));
const index_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/index.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
const const_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/const.js [app-client] (ecmascript)");
const moderation_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/index.js [app-client] (ecmascript)");
const labels_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/const/labels.js [app-client] (ecmascript)");
const util_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/util.js [app-client] (ecmascript)");
const FEED_VIEW_PREF_DEFAULTS = {
    hideReplies: false,
    hideRepliesByUnfollowed: true,
    hideRepliesByLikeCount: 0,
    hideReposts: false,
    hideQuotePosts: false
};
const THREAD_VIEW_PREF_DEFAULTS = {
    sort: 'hotness',
    prioritizeFollowedUsers: true
};
/**
 * An {@link Agent} is an {@link AtpBaseClient} with the following
 * additional features:
 * - AT Protocol labelers configuration utilities
 * - AT Protocol proxy configuration utilities
 * - Cloning utilities
 * - `app.bsky` syntactic sugar
 * - `com.atproto` syntactic sugar
 */ class Agent extends xrpc_1.XrpcClient {
    /**
     * Configures the Agent (or its sub classes) globally.
     */ static configure(opts) {
        if (opts.appLabelers) {
            this.appLabelers = opts.appLabelers.map(util_1.asDid); // Validate & copy
        }
    }
    /** @deprecated use `this` instead */ get xrpc() {
        return this;
    }
    constructor(options){
        const sessionManager = typeof options === 'string' || options instanceof URL ? {
            did: undefined,
            fetchHandler: (0, xrpc_1.buildFetchHandler)(options)
        } : options;
        super((url, init)=>{
            const headers = new Headers(init?.headers);
            if (this.proxy && !headers.has('atproto-proxy')) {
                headers.set('atproto-proxy', this.proxy);
            }
            // Merge the labelers header of this particular request with the app &
            // instance labelers.
            headers.set('atproto-accept-labelers', [
                ...this.appLabelers.map((l)=>`${l};redact`),
                ...this.labelers,
                headers.get('atproto-accept-labelers')?.trim()
            ].filter(Boolean).join(', '));
            return this.sessionManager.fetchHandler(url, {
                ...init,
                headers
            });
        }, lexicons_1.schemas);
        //#endregion
        Object.defineProperty(this, "com", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new index_1.ComNS(this)
        });
        Object.defineProperty(this, "app", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new index_1.AppNS(this)
        });
        Object.defineProperty(this, "chat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new index_1.ChatNS(this)
        });
        Object.defineProperty(this, "tools", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new index_1.ToolsNS(this)
        });
        Object.defineProperty(this, "sessionManager", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "labelers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        //#endregion
        //#region ATPROTO proxy configuration utilities
        Object.defineProperty(this, "proxy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        //#region "com.atproto" lexicon short hand methods
        /**
         * Upload a binary blob to the server
         */ Object.defineProperty(this, "uploadBlob", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (data, opts)=>this.com.atproto.repo.uploadBlob(data, opts)
        });
        /**
         * Resolve a handle to a DID
         */ Object.defineProperty(this, "resolveHandle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.com.atproto.identity.resolveHandle(params, opts)
        });
        /**
         * Change the user's handle
         */ Object.defineProperty(this, "updateHandle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (data, opts)=>this.com.atproto.identity.updateHandle(data, opts)
        });
        /**
         * Create a moderation report
         */ Object.defineProperty(this, "createModerationReport", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (data, opts)=>this.com.atproto.moderation.createReport(data, opts)
        });
        //#endregion
        //#region "app.bsky" lexicon short hand methods
        Object.defineProperty(this, "getTimeline", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.feed.getTimeline(params, opts)
        });
        Object.defineProperty(this, "getAuthorFeed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.feed.getAuthorFeed(params, opts)
        });
        Object.defineProperty(this, "getActorLikes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.feed.getActorLikes(params, opts)
        });
        Object.defineProperty(this, "getPostThread", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.feed.getPostThread(params, opts)
        });
        Object.defineProperty(this, "getPost", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params)=>this.app.bsky.feed.post.get(params)
        });
        Object.defineProperty(this, "getPosts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.feed.getPosts(params, opts)
        });
        Object.defineProperty(this, "getLikes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.feed.getLikes(params, opts)
        });
        Object.defineProperty(this, "getRepostedBy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.feed.getRepostedBy(params, opts)
        });
        Object.defineProperty(this, "getFollows", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.graph.getFollows(params, opts)
        });
        Object.defineProperty(this, "getFollowers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.graph.getFollowers(params, opts)
        });
        Object.defineProperty(this, "getProfile", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.actor.getProfile(params, opts)
        });
        Object.defineProperty(this, "getProfiles", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.actor.getProfiles(params, opts)
        });
        Object.defineProperty(this, "getSuggestions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.actor.getSuggestions(params, opts)
        });
        Object.defineProperty(this, "searchActors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.actor.searchActors(params, opts)
        });
        Object.defineProperty(this, "searchActorsTypeahead", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.actor.searchActorsTypeahead(params, opts)
        });
        Object.defineProperty(this, "listNotifications", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.notification.listNotifications(params, opts)
        });
        Object.defineProperty(this, "countUnreadNotifications", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.notification.getUnreadCount(params, opts)
        });
        Object.defineProperty(this, "getLabelers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.labeler.getServices(params, opts)
        });
        //- Private methods
        _Agent_prefsLock.set(this, new await_lock_1.default());
        this.sessionManager = sessionManager;
    }
    //#region Cloning utilities
    clone() {
        return this.copyInto(new Agent(this.sessionManager));
    }
    copyInto(inst) {
        inst.configureLabelers(this.labelers);
        inst.configureProxy(this.proxy ?? null);
        inst.clearHeaders();
        for (const [key, value] of this.headers)inst.setHeader(key, value);
        return inst;
    }
    withProxy(serviceType, did) {
        const inst = this.clone();
        inst.configureProxy(`${(0, util_1.asDid)(did)}#${serviceType}`);
        return inst;
    }
    //#endregion
    //#region ATPROTO labelers configuration utilities
    /**
     * The labelers statically configured on the class of the current instance.
     */ get appLabelers() {
        return this.constructor.appLabelers;
    }
    configureLabelers(labelerDids) {
        this.labelers = labelerDids.map(util_1.asDid); // Validate & copy
    }
    /** @deprecated use {@link configureLabelers} instead */ configureLabelersHeader(labelerDids) {
        // Filtering non-did values for backwards compatibility
        this.configureLabelers(labelerDids.filter(util_1.isDid));
    }
    configureProxy(value) {
        if (value === null) this.proxy = undefined;
        else if ((0, util_1.isDid)(value)) this.proxy = value;
        else throw new TypeError('Invalid proxy DID');
    }
    /** @deprecated use {@link configureProxy} instead */ configureProxyHeader(serviceType, did) {
        // Ignoring non-did values for backwards compatibility
        if ((0, util_1.isDid)(did)) this.configureProxy(`${did}#${serviceType}`);
    }
    //#endregion
    //#region Session management
    /**
     * Get the authenticated user's DID, if any.
     */ get did() {
        return this.sessionManager.did;
    }
    /** @deprecated Use {@link Agent.assertDid} instead */ get accountDid() {
        return this.assertDid;
    }
    /**
     * Get the authenticated user's DID, or throw an error if not authenticated.
     */ get assertDid() {
        this.assertAuthenticated();
        return this.did;
    }
    /**
     * Assert that the user is authenticated.
     */ assertAuthenticated() {
        if (!this.did) throw new Error('Not logged in');
    }
    //#endregion
    /** @deprecated use "this" instead */ get api() {
        return this;
    }
    async getLabelDefinitions(prefs) {
        // collect the labeler dids
        const dids = [
            ...this.appLabelers
        ];
        if (isBskyPrefs(prefs)) {
            dids.push(...prefs.moderationPrefs.labelers.map((l)=>l.did));
        } else if (isModPrefs(prefs)) {
            dids.push(...prefs.labelers.map((l)=>l.did));
        } else {
            dids.push(...prefs);
        }
        // fetch their definitions
        const labelers = await this.getLabelers({
            dids,
            detailed: true
        });
        // assemble a map of labeler dids to the interpreted label value definitions
        const labelDefs = {};
        if (labelers.data) {
            for (const labeler of labelers.data.views){
                labelDefs[labeler.creator.did] = (0, moderation_1.interpretLabelValueDefinitions)(labeler);
            }
        }
        return labelDefs;
    }
    async post(record) {
        record.createdAt || (record.createdAt = new Date().toISOString());
        return this.app.bsky.feed.post.create({
            repo: this.accountDid
        }, record);
    }
    async deletePost(postUri) {
        this.assertAuthenticated();
        const postUrip = new syntax_1.AtUri(postUri);
        return this.app.bsky.feed.post.delete({
            repo: postUrip.hostname,
            rkey: postUrip.rkey
        });
    }
    async like(uri, cid) {
        return this.app.bsky.feed.like.create({
            repo: this.accountDid
        }, {
            subject: {
                uri,
                cid
            },
            createdAt: new Date().toISOString()
        });
    }
    async deleteLike(likeUri) {
        this.assertAuthenticated();
        const likeUrip = new syntax_1.AtUri(likeUri);
        return this.app.bsky.feed.like.delete({
            repo: likeUrip.hostname,
            rkey: likeUrip.rkey
        });
    }
    async repost(uri, cid) {
        return this.app.bsky.feed.repost.create({
            repo: this.accountDid
        }, {
            subject: {
                uri,
                cid
            },
            createdAt: new Date().toISOString()
        });
    }
    async deleteRepost(repostUri) {
        this.assertAuthenticated();
        const repostUrip = new syntax_1.AtUri(repostUri);
        return this.app.bsky.feed.repost.delete({
            repo: repostUrip.hostname,
            rkey: repostUrip.rkey
        });
    }
    async follow(subjectDid) {
        return this.app.bsky.graph.follow.create({
            repo: this.accountDid
        }, {
            subject: subjectDid,
            createdAt: new Date().toISOString()
        });
    }
    async deleteFollow(followUri) {
        this.assertAuthenticated();
        const followUrip = new syntax_1.AtUri(followUri);
        return this.app.bsky.graph.follow.delete({
            repo: followUrip.hostname,
            rkey: followUrip.rkey
        });
    }
    async upsertProfile(updateFn) {
        const repo = this.accountDid;
        let retriesRemaining = 5;
        while(retriesRemaining >= 0){
            // fetch existing
            const existing = await this.com.atproto.repo.getRecord({
                repo,
                collection: 'app.bsky.actor.profile',
                rkey: 'self'
            }).catch((_)=>undefined);
            // run the update
            const updated = await updateFn(existing?.data.value);
            if (updated) {
                updated.$type = 'app.bsky.actor.profile';
            }
            // validate the record
            const validation = index_1.AppBskyActorProfile.validateRecord(updated);
            if (!validation.success) {
                throw validation.error;
            }
            try {
                // attempt the put
                await this.com.atproto.repo.putRecord({
                    repo,
                    collection: 'app.bsky.actor.profile',
                    rkey: 'self',
                    record: updated,
                    swapRecord: existing?.data.cid || null
                });
            } catch (e) {
                if (retriesRemaining > 0 && e instanceof index_1.ComAtprotoRepoPutRecord.InvalidSwapError) {
                    // try again
                    retriesRemaining--;
                    continue;
                } else {
                    throw e;
                }
            }
            break;
        }
    }
    async mute(actor) {
        return this.app.bsky.graph.muteActor({
            actor
        });
    }
    async unmute(actor) {
        return this.app.bsky.graph.unmuteActor({
            actor
        });
    }
    async muteModList(uri) {
        return this.app.bsky.graph.muteActorList({
            list: uri
        });
    }
    async unmuteModList(uri) {
        return this.app.bsky.graph.unmuteActorList({
            list: uri
        });
    }
    async blockModList(uri) {
        return this.app.bsky.graph.listblock.create({
            repo: this.accountDid
        }, {
            subject: uri,
            createdAt: new Date().toISOString()
        });
    }
    async unblockModList(uri) {
        const repo = this.accountDid;
        const listInfo = await this.app.bsky.graph.getList({
            list: uri,
            limit: 1
        });
        const blocked = listInfo.data.list.viewer?.blocked;
        if (blocked) {
            const { rkey } = new syntax_1.AtUri(blocked);
            return this.app.bsky.graph.listblock.delete({
                repo,
                rkey
            });
        }
    }
    async updateSeenNotifications(seenAt = new Date().toISOString()) {
        return this.app.bsky.notification.updateSeen({
            seenAt
        });
    }
    async getPreferences() {
        const prefs = {
            feeds: {
                saved: undefined,
                pinned: undefined
            },
            // @ts-ignore populating below
            savedFeeds: undefined,
            feedViewPrefs: {
                home: {
                    ...FEED_VIEW_PREF_DEFAULTS
                }
            },
            threadViewPrefs: {
                ...THREAD_VIEW_PREF_DEFAULTS
            },
            moderationPrefs: {
                adultContentEnabled: false,
                labels: {
                    ...labels_1.DEFAULT_LABEL_SETTINGS
                },
                labelers: this.appLabelers.map((did)=>({
                        did,
                        labels: {}
                    })),
                mutedWords: [],
                hiddenPosts: []
            },
            birthDate: undefined,
            interests: {
                tags: []
            },
            bskyAppState: {
                queuedNudges: [],
                activeProgressGuide: undefined,
                nuxs: []
            }
        };
        const res = await this.app.bsky.actor.getPreferences({});
        const labelPrefs = [];
        for (const pref of res.data.preferences){
            if (index_1.AppBskyActorDefs.isAdultContentPref(pref) && index_1.AppBskyActorDefs.validateAdultContentPref(pref).success) {
                // adult content preferences
                prefs.moderationPrefs.adultContentEnabled = pref.enabled;
            } else if (index_1.AppBskyActorDefs.isContentLabelPref(pref) && index_1.AppBskyActorDefs.validateContentLabelPref(pref).success) {
                // content label preference
                const adjustedPref = adjustLegacyContentLabelPref(pref);
                labelPrefs.push(adjustedPref);
            } else if (index_1.AppBskyActorDefs.isLabelersPref(pref) && index_1.AppBskyActorDefs.validateLabelersPref(pref).success) {
                // labelers preferences
                prefs.moderationPrefs.labelers = this.appLabelers.map((did)=>({
                        did,
                        labels: {}
                    })).concat(pref.labelers.map((labeler)=>({
                        ...labeler,
                        labels: {}
                    })));
            } else if (index_1.AppBskyActorDefs.isSavedFeedsPrefV2(pref) && index_1.AppBskyActorDefs.validateSavedFeedsPrefV2(pref).success) {
                prefs.savedFeeds = pref.items;
            } else if (index_1.AppBskyActorDefs.isSavedFeedsPref(pref) && index_1.AppBskyActorDefs.validateSavedFeedsPref(pref).success) {
                // saved and pinned feeds
                prefs.feeds.saved = pref.saved;
                prefs.feeds.pinned = pref.pinned;
            } else if (index_1.AppBskyActorDefs.isPersonalDetailsPref(pref) && index_1.AppBskyActorDefs.validatePersonalDetailsPref(pref).success) {
                // birth date (irl)
                if (pref.birthDate) {
                    prefs.birthDate = new Date(pref.birthDate);
                }
            } else if (index_1.AppBskyActorDefs.isFeedViewPref(pref) && index_1.AppBskyActorDefs.validateFeedViewPref(pref).success) {
                // feed view preferences
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                const { $type, feed, ...v } = pref;
                prefs.feedViewPrefs[pref.feed] = {
                    ...FEED_VIEW_PREF_DEFAULTS,
                    ...v
                };
            } else if (index_1.AppBskyActorDefs.isThreadViewPref(pref) && index_1.AppBskyActorDefs.validateThreadViewPref(pref).success) {
                // thread view preferences
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                const { $type, ...v } = pref;
                prefs.threadViewPrefs = {
                    ...prefs.threadViewPrefs,
                    ...v
                };
            } else if (index_1.AppBskyActorDefs.isInterestsPref(pref) && index_1.AppBskyActorDefs.validateInterestsPref(pref).success) {
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                const { $type, ...v } = pref;
                prefs.interests = {
                    ...prefs.interests,
                    ...v
                };
            } else if (index_1.AppBskyActorDefs.isMutedWordsPref(pref) && index_1.AppBskyActorDefs.validateMutedWordsPref(pref).success) {
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                const { $type, ...v } = pref;
                prefs.moderationPrefs.mutedWords = v.items;
                if (prefs.moderationPrefs.mutedWords.length) {
                    prefs.moderationPrefs.mutedWords = prefs.moderationPrefs.mutedWords.map((word)=>{
                        word.actorTarget = word.actorTarget || 'all';
                        return word;
                    });
                }
            } else if (index_1.AppBskyActorDefs.isHiddenPostsPref(pref) && index_1.AppBskyActorDefs.validateHiddenPostsPref(pref).success) {
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                const { $type, ...v } = pref;
                prefs.moderationPrefs.hiddenPosts = v.items;
            } else if (index_1.AppBskyActorDefs.isBskyAppStatePref(pref) && index_1.AppBskyActorDefs.validateBskyAppStatePref(pref).success) {
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                const { $type, ...v } = pref;
                prefs.bskyAppState.queuedNudges = v.queuedNudges || [];
                prefs.bskyAppState.activeProgressGuide = v.activeProgressGuide;
                prefs.bskyAppState.nuxs = v.nuxs || [];
            }
        }
        /*
         * If `prefs.savedFeeds` is undefined, no `savedFeedsPrefV2` exists, which
         * means we want to try to migrate if needed.
         *
         * If v1 prefs exist, they will be migrated to v2.
         *
         * If no v1 prefs exist, the user is either new, or could be old and has
         * never edited their feeds.
         */ if (prefs.savedFeeds == null) {
            const { saved, pinned } = prefs.feeds;
            if (saved && pinned) {
                const uniqueMigratedSavedFeeds = new Map();
                // insert Following feed first
                uniqueMigratedSavedFeeds.set('timeline', {
                    id: common_web_1.TID.nextStr(),
                    type: 'timeline',
                    value: 'following',
                    pinned: true
                });
                // use pinned as source of truth for feed order
                for (const uri of pinned){
                    const type = (0, util_1.getSavedFeedType)(uri);
                    // only want supported types
                    if (type === 'unknown') continue;
                    uniqueMigratedSavedFeeds.set(uri, {
                        id: common_web_1.TID.nextStr(),
                        type,
                        value: uri,
                        pinned: true
                    });
                }
                for (const uri of saved){
                    if (!uniqueMigratedSavedFeeds.has(uri)) {
                        const type = (0, util_1.getSavedFeedType)(uri);
                        // only want supported types
                        if (type === 'unknown') continue;
                        uniqueMigratedSavedFeeds.set(uri, {
                            id: common_web_1.TID.nextStr(),
                            type,
                            value: uri,
                            pinned: false
                        });
                    }
                }
                prefs.savedFeeds = Array.from(uniqueMigratedSavedFeeds.values());
            } else {
                prefs.savedFeeds = [
                    {
                        id: common_web_1.TID.nextStr(),
                        type: 'timeline',
                        value: 'following',
                        pinned: true
                    }
                ];
            }
            // save to user preferences so this migration doesn't re-occur
            await this.overwriteSavedFeeds(prefs.savedFeeds);
        }
        // apply the label prefs
        for (const pref of labelPrefs){
            if (pref.labelerDid) {
                const labeler = prefs.moderationPrefs.labelers.find((labeler)=>labeler.did === pref.labelerDid);
                if (!labeler) continue;
                labeler.labels[pref.label] = pref.visibility;
            } else {
                prefs.moderationPrefs.labels[pref.label] = pref.visibility;
            }
        }
        prefs.moderationPrefs.labels = remapLegacyLabels(prefs.moderationPrefs.labels);
        // automatically configure the client
        this.configureLabelers(prefsArrayToLabelerDids(res.data.preferences));
        return prefs;
    }
    async overwriteSavedFeeds(savedFeeds) {
        savedFeeds.forEach(util_1.validateSavedFeed);
        const uniqueSavedFeeds = new Map();
        savedFeeds.forEach((feed)=>{
            // remove and re-insert to preserve order
            if (uniqueSavedFeeds.has(feed.id)) {
                uniqueSavedFeeds.delete(feed.id);
            }
            uniqueSavedFeeds.set(feed.id, feed);
        });
        return this.updateSavedFeedsV2Preferences(()=>Array.from(uniqueSavedFeeds.values()));
    }
    async updateSavedFeeds(savedFeedsToUpdate) {
        savedFeedsToUpdate.map(util_1.validateSavedFeed);
        return this.updateSavedFeedsV2Preferences((savedFeeds)=>{
            return savedFeeds.map((savedFeed)=>{
                const updatedVersion = savedFeedsToUpdate.find((updated)=>savedFeed.id === updated.id);
                if (updatedVersion) {
                    return {
                        ...savedFeed,
                        // only update pinned
                        pinned: updatedVersion.pinned
                    };
                }
                return savedFeed;
            });
        });
    }
    async addSavedFeeds(savedFeeds) {
        const toSave = savedFeeds.map((f)=>({
                ...f,
                id: common_web_1.TID.nextStr()
            }));
        toSave.forEach(util_1.validateSavedFeed);
        return this.updateSavedFeedsV2Preferences((savedFeeds)=>[
                ...savedFeeds,
                ...toSave
            ]);
    }
    async removeSavedFeeds(ids) {
        return this.updateSavedFeedsV2Preferences((savedFeeds)=>[
                ...savedFeeds.filter((feed)=>!ids.find((id)=>feed.id === id))
            ]);
    }
    /**
     * @deprecated use `overwriteSavedFeeds`
     */ async setSavedFeeds(saved, pinned) {
        return this.updateFeedPreferences(()=>({
                saved,
                pinned
            }));
    }
    /**
     * @deprecated use `addSavedFeeds`
     */ async addSavedFeed(v) {
        return this.updateFeedPreferences((saved, pinned)=>({
                saved: [
                    ...saved.filter((uri)=>uri !== v),
                    v
                ],
                pinned
            }));
    }
    /**
     * @deprecated use `removeSavedFeeds`
     */ async removeSavedFeed(v) {
        return this.updateFeedPreferences((saved, pinned)=>({
                saved: saved.filter((uri)=>uri !== v),
                pinned: pinned.filter((uri)=>uri !== v)
            }));
    }
    /**
     * @deprecated use `addSavedFeeds` or `updateSavedFeeds`
     */ async addPinnedFeed(v) {
        return this.updateFeedPreferences((saved, pinned)=>({
                saved: [
                    ...saved.filter((uri)=>uri !== v),
                    v
                ],
                pinned: [
                    ...pinned.filter((uri)=>uri !== v),
                    v
                ]
            }));
    }
    /**
     * @deprecated use `updateSavedFeeds` or `removeSavedFeeds`
     */ async removePinnedFeed(v) {
        return this.updateFeedPreferences((saved, pinned)=>({
                saved,
                pinned: pinned.filter((uri)=>uri !== v)
            }));
    }
    async setAdultContentEnabled(v) {
        await this.updatePreferences((prefs)=>{
            let adultContentPref = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isAdultContentPref(pref) && index_1.AppBskyActorDefs.validateAdultContentPref(pref).success);
            if (adultContentPref) {
                adultContentPref.enabled = v;
            } else {
                adultContentPref = {
                    $type: 'app.bsky.actor.defs#adultContentPref',
                    enabled: v
                };
            }
            return prefs.filter((pref)=>!index_1.AppBskyActorDefs.isAdultContentPref(pref)).concat([
                adultContentPref
            ]);
        });
    }
    async setContentLabelPref(key, value, labelerDid) {
        if (labelerDid) {
            (0, syntax_1.ensureValidDid)(labelerDid);
        }
        await this.updatePreferences((prefs)=>{
            let labelPref = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isContentLabelPref(pref) && index_1.AppBskyActorDefs.validateContentLabelPref(pref).success && pref.label === key && pref.labelerDid === labelerDid);
            let legacyLabelPref;
            if (labelPref) {
                labelPref.visibility = value;
            } else {
                labelPref = {
                    $type: 'app.bsky.actor.defs#contentLabelPref',
                    label: key,
                    labelerDid,
                    visibility: value
                };
            }
            if (index_1.AppBskyActorDefs.isContentLabelPref(labelPref)) {
                // is global
                if (!labelPref.labelerDid) {
                    const legacyLabelValue = {
                        'graphic-media': 'gore',
                        porn: 'nsfw',
                        sexual: 'suggestive'
                    }[labelPref.label];
                    // if it's a legacy label, double-write the legacy label
                    if (legacyLabelValue) {
                        legacyLabelPref = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isContentLabelPref(pref) && index_1.AppBskyActorDefs.validateContentLabelPref(pref).success && pref.label === legacyLabelValue && pref.labelerDid === undefined);
                        if (legacyLabelPref) {
                            legacyLabelPref.visibility = value;
                        } else {
                            legacyLabelPref = {
                                $type: 'app.bsky.actor.defs#contentLabelPref',
                                label: legacyLabelValue,
                                labelerDid: undefined,
                                visibility: value
                            };
                        }
                    }
                }
            }
            return prefs.filter((pref)=>!index_1.AppBskyActorDefs.isContentLabelPref(pref) || !(pref.label === key && pref.labelerDid === labelerDid)).concat([
                labelPref
            ]).filter((pref)=>{
                if (!legacyLabelPref) return true;
                return !index_1.AppBskyActorDefs.isContentLabelPref(pref) || !(pref.label === legacyLabelPref.label && pref.labelerDid === undefined);
            }).concat(legacyLabelPref ? [
                legacyLabelPref
            ] : []);
        });
    }
    async addLabeler(did) {
        const prefs = await this.updatePreferences((prefs)=>{
            let labelersPref = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isLabelersPref(pref) && index_1.AppBskyActorDefs.validateLabelersPref(pref).success);
            if (!labelersPref) {
                labelersPref = {
                    $type: 'app.bsky.actor.defs#labelersPref',
                    labelers: []
                };
            }
            if (index_1.AppBskyActorDefs.isLabelersPref(labelersPref)) {
                let labelerPrefItem = labelersPref.labelers.find((labeler)=>labeler.did === did);
                if (!labelerPrefItem) {
                    labelerPrefItem = {
                        did
                    };
                    labelersPref.labelers.push(labelerPrefItem);
                }
            }
            return prefs.filter((pref)=>!index_1.AppBskyActorDefs.isLabelersPref(pref)).concat([
                labelersPref
            ]);
        });
        // automatically configure the client
        this.configureLabelers(prefsArrayToLabelerDids(prefs));
    }
    async removeLabeler(did) {
        const prefs = await this.updatePreferences((prefs)=>{
            let labelersPref = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isLabelersPref(pref) && index_1.AppBskyActorDefs.validateLabelersPref(pref).success);
            if (!labelersPref) {
                labelersPref = {
                    $type: 'app.bsky.actor.defs#labelersPref',
                    labelers: []
                };
            }
            if (index_1.AppBskyActorDefs.isLabelersPref(labelersPref)) {
                labelersPref.labelers = labelersPref.labelers.filter((labeler)=>labeler.did !== did);
            }
            return prefs.filter((pref)=>!index_1.AppBskyActorDefs.isLabelersPref(pref)).concat([
                labelersPref
            ]);
        });
        // automatically configure the client
        this.configureLabelers(prefsArrayToLabelerDids(prefs));
    }
    async setPersonalDetails({ birthDate }) {
        birthDate = birthDate instanceof Date ? birthDate.toISOString() : birthDate;
        await this.updatePreferences((prefs)=>{
            let personalDetailsPref = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isPersonalDetailsPref(pref) && index_1.AppBskyActorDefs.validatePersonalDetailsPref(pref).success);
            if (personalDetailsPref) {
                personalDetailsPref.birthDate = birthDate;
            } else {
                personalDetailsPref = {
                    $type: 'app.bsky.actor.defs#personalDetailsPref',
                    birthDate
                };
            }
            return prefs.filter((pref)=>!index_1.AppBskyActorDefs.isPersonalDetailsPref(pref)).concat([
                personalDetailsPref
            ]);
        });
    }
    async setFeedViewPrefs(feed, pref) {
        await this.updatePreferences((prefs)=>{
            const existing = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isFeedViewPref(pref) && index_1.AppBskyActorDefs.validateFeedViewPref(pref).success && pref.feed === feed);
            if (existing) {
                pref = {
                    ...existing,
                    ...pref
                };
            }
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isFeedViewPref(pref) || p.feed !== feed).concat([
                {
                    ...pref,
                    $type: 'app.bsky.actor.defs#feedViewPref',
                    feed
                }
            ]);
        });
    }
    async setThreadViewPrefs(pref) {
        await this.updatePreferences((prefs)=>{
            const existing = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isThreadViewPref(pref) && index_1.AppBskyActorDefs.validateThreadViewPref(pref).success);
            if (existing) {
                pref = {
                    ...existing,
                    ...pref
                };
            }
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isThreadViewPref(p)).concat([
                {
                    ...pref,
                    $type: 'app.bsky.actor.defs#threadViewPref'
                }
            ]);
        });
    }
    async setInterestsPref(pref) {
        await this.updatePreferences((prefs)=>{
            const existing = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isInterestsPref(pref) && index_1.AppBskyActorDefs.validateInterestsPref(pref).success);
            if (existing) {
                pref = {
                    ...existing,
                    ...pref
                };
            }
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isInterestsPref(p)).concat([
                {
                    ...pref,
                    $type: 'app.bsky.actor.defs#interestsPref'
                }
            ]);
        });
    }
    /**
     * Add a muted word to user preferences.
     */ async addMutedWord(mutedWord) {
        const sanitizedValue = (0, util_1.sanitizeMutedWordValue)(mutedWord.value);
        if (!sanitizedValue) return;
        await this.updatePreferences((prefs)=>{
            let mutedWordsPref = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isMutedWordsPref(pref) && index_1.AppBskyActorDefs.validateMutedWordsPref(pref).success);
            const newMutedWord = {
                id: common_web_1.TID.nextStr(),
                value: sanitizedValue,
                targets: mutedWord.targets || [],
                actorTarget: mutedWord.actorTarget || 'all',
                expiresAt: mutedWord.expiresAt || undefined
            };
            if (mutedWordsPref && index_1.AppBskyActorDefs.isMutedWordsPref(mutedWordsPref)) {
                mutedWordsPref.items.push(newMutedWord);
                /**
                 * Migrate any old muted words that don't have an id
                 */ mutedWordsPref.items = migrateLegacyMutedWordsItems(mutedWordsPref.items);
            } else {
                // if the pref doesn't exist, create it
                mutedWordsPref = {
                    items: [
                        newMutedWord
                    ]
                };
            }
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isMutedWordsPref(p)).concat([
                {
                    ...mutedWordsPref,
                    $type: 'app.bsky.actor.defs#mutedWordsPref'
                }
            ]);
        });
    }
    /**
     * Convenience method to add muted words to user preferences
     */ async addMutedWords(newMutedWords) {
        await Promise.all(newMutedWords.map((word)=>this.addMutedWord(word)));
    }
    /**
     * @deprecated use `addMutedWords` or `addMutedWord` instead
     */ async upsertMutedWords(mutedWords) {
        await this.addMutedWords(mutedWords);
    }
    /**
     * Update a muted word in user preferences.
     */ async updateMutedWord(mutedWord) {
        await this.updatePreferences((prefs)=>{
            const mutedWordsPref = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isMutedWordsPref(pref) && index_1.AppBskyActorDefs.validateMutedWordsPref(pref).success);
            if (mutedWordsPref && index_1.AppBskyActorDefs.isMutedWordsPref(mutedWordsPref)) {
                mutedWordsPref.items = mutedWordsPref.items.map((existingItem)=>{
                    const match = matchMutedWord(existingItem, mutedWord);
                    if (match) {
                        const updated = {
                            ...existingItem,
                            ...mutedWord
                        };
                        return {
                            id: existingItem.id || common_web_1.TID.nextStr(),
                            value: (0, util_1.sanitizeMutedWordValue)(updated.value) || existingItem.value,
                            targets: updated.targets || [],
                            actorTarget: updated.actorTarget || 'all',
                            expiresAt: updated.expiresAt || undefined
                        };
                    } else {
                        return existingItem;
                    }
                });
                /**
                 * Migrate any old muted words that don't have an id
                 */ mutedWordsPref.items = migrateLegacyMutedWordsItems(mutedWordsPref.items);
                return prefs.filter((p)=>!index_1.AppBskyActorDefs.isMutedWordsPref(p)).concat([
                    {
                        ...mutedWordsPref,
                        $type: 'app.bsky.actor.defs#mutedWordsPref'
                    }
                ]);
            }
            return prefs;
        });
    }
    /**
     * Remove a muted word from user preferences.
     */ async removeMutedWord(mutedWord) {
        await this.updatePreferences((prefs)=>{
            const mutedWordsPref = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isMutedWordsPref(pref) && index_1.AppBskyActorDefs.validateMutedWordsPref(pref).success);
            if (mutedWordsPref && index_1.AppBskyActorDefs.isMutedWordsPref(mutedWordsPref)) {
                for(let i = 0; i < mutedWordsPref.items.length; i++){
                    const match = matchMutedWord(mutedWordsPref.items[i], mutedWord);
                    if (match) {
                        mutedWordsPref.items.splice(i, 1);
                        break;
                    }
                }
                /**
                 * Migrate any old muted words that don't have an id
                 */ mutedWordsPref.items = migrateLegacyMutedWordsItems(mutedWordsPref.items);
                return prefs.filter((p)=>!index_1.AppBskyActorDefs.isMutedWordsPref(p)).concat([
                    {
                        ...mutedWordsPref,
                        $type: 'app.bsky.actor.defs#mutedWordsPref'
                    }
                ]);
            }
            return prefs;
        });
    }
    /**
     * Convenience method to remove muted words from user preferences
     */ async removeMutedWords(mutedWords) {
        await Promise.all(mutedWords.map((word)=>this.removeMutedWord(word)));
    }
    async hidePost(postUri) {
        await this.updateHiddenPost(postUri, 'hide');
    }
    async unhidePost(postUri) {
        await this.updateHiddenPost(postUri, 'unhide');
    }
    async bskyAppQueueNudges(nudges) {
        await this.updatePreferences((prefs)=>{
            let bskyAppStatePref = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isBskyAppStatePref(pref) && index_1.AppBskyActorDefs.validateBskyAppStatePref(pref).success);
            bskyAppStatePref = bskyAppStatePref || {};
            nudges = Array.isArray(nudges) ? nudges : [
                nudges
            ];
            bskyAppStatePref.queuedNudges = (bskyAppStatePref.queuedNudges || []).concat(nudges);
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isBskyAppStatePref(p)).concat([
                {
                    ...bskyAppStatePref,
                    $type: 'app.bsky.actor.defs#bskyAppStatePref'
                }
            ]);
        });
    }
    async bskyAppDismissNudges(nudges) {
        await this.updatePreferences((prefs)=>{
            let bskyAppStatePref = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isBskyAppStatePref(pref) && index_1.AppBskyActorDefs.validateBskyAppStatePref(pref).success);
            bskyAppStatePref = bskyAppStatePref || {};
            nudges = Array.isArray(nudges) ? nudges : [
                nudges
            ];
            bskyAppStatePref.queuedNudges = (bskyAppStatePref.queuedNudges || []).filter((nudge)=>!nudges.includes(nudge));
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isBskyAppStatePref(p)).concat([
                {
                    ...bskyAppStatePref,
                    $type: 'app.bsky.actor.defs#bskyAppStatePref'
                }
            ]);
        });
    }
    async bskyAppSetActiveProgressGuide(guide) {
        if (guide && !index_1.AppBskyActorDefs.validateBskyAppProgressGuide(guide).success) {
            throw new Error('Invalid progress guide');
        }
        await this.updatePreferences((prefs)=>{
            let bskyAppStatePref = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isBskyAppStatePref(pref) && index_1.AppBskyActorDefs.validateBskyAppStatePref(pref).success);
            bskyAppStatePref = bskyAppStatePref || {};
            bskyAppStatePref.activeProgressGuide = guide;
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isBskyAppStatePref(p)).concat([
                {
                    ...bskyAppStatePref,
                    $type: 'app.bsky.actor.defs#bskyAppStatePref'
                }
            ]);
        });
    }
    /**
     * Insert or update a NUX in user prefs
     */ async bskyAppUpsertNux(nux) {
        (0, util_1.validateNux)(nux);
        await this.updatePreferences((prefs)=>{
            let bskyAppStatePref = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isBskyAppStatePref(pref) && index_1.AppBskyActorDefs.validateBskyAppStatePref(pref).success);
            bskyAppStatePref = bskyAppStatePref || {};
            bskyAppStatePref.nuxs = bskyAppStatePref.nuxs || [];
            const existing = bskyAppStatePref.nuxs?.find((n)=>{
                return n.id === nux.id;
            });
            let next;
            if (existing) {
                next = {
                    id: existing.id,
                    completed: nux.completed,
                    data: nux.data,
                    expiresAt: nux.expiresAt
                };
            } else {
                next = nux;
            }
            // remove duplicates and append
            bskyAppStatePref.nuxs = bskyAppStatePref.nuxs.filter((n)=>n.id !== nux.id).concat(next);
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isBskyAppStatePref(p)).concat([
                {
                    ...bskyAppStatePref,
                    $type: 'app.bsky.actor.defs#bskyAppStatePref'
                }
            ]);
        });
    }
    /**
     * Removes NUXs from user preferences.
     */ async bskyAppRemoveNuxs(ids) {
        await this.updatePreferences((prefs)=>{
            let bskyAppStatePref = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isBskyAppStatePref(pref) && index_1.AppBskyActorDefs.validateBskyAppStatePref(pref).success);
            bskyAppStatePref = bskyAppStatePref || {};
            bskyAppStatePref.nuxs = (bskyAppStatePref.nuxs || []).filter((nux)=>{
                return !ids.includes(nux.id);
            });
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isBskyAppStatePref(p)).concat([
                {
                    ...bskyAppStatePref,
                    $type: 'app.bsky.actor.defs#bskyAppStatePref'
                }
            ]);
        });
    }
    /**
     * This function updates the preferences of a user and allows for a callback function to be executed
     * before the update.
     * @param cb - cb is a callback function that takes in a single parameter of type
     * AppBskyActorDefs.Preferences and returns either a boolean or void. This callback function is used to
     * update the preferences of the user. The function is called with the current preferences as an
     * argument and if the callback returns false, the preferences are not updated.
     */ async updatePreferences(cb) {
        try {
            await __classPrivateFieldGet(this, _Agent_prefsLock, "f").acquireAsync();
            const res = await this.app.bsky.actor.getPreferences({});
            const newPrefs = cb(res.data.preferences);
            if (newPrefs === false) {
                return res.data.preferences;
            }
            await this.app.bsky.actor.putPreferences({
                preferences: newPrefs
            });
            return newPrefs;
        } finally{
            __classPrivateFieldGet(this, _Agent_prefsLock, "f").release();
        }
    }
    async updateHiddenPost(postUri, action) {
        await this.updatePreferences((prefs)=>{
            let pref = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isHiddenPostsPref(pref) && index_1.AppBskyActorDefs.validateHiddenPostsPref(pref).success);
            if (pref && index_1.AppBskyActorDefs.isHiddenPostsPref(pref)) {
                pref.items = action === 'hide' ? Array.from(new Set([
                    ...pref.items,
                    postUri
                ])) : pref.items.filter((uri)=>uri !== postUri);
            } else {
                if (action === 'hide') {
                    pref = {
                        $type: 'app.bsky.actor.defs#hiddenPostsPref',
                        items: [
                            postUri
                        ]
                    };
                }
            }
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isInterestsPref(p)).concat([
                {
                    ...pref,
                    $type: 'app.bsky.actor.defs#hiddenPostsPref'
                }
            ]);
        });
    }
    /**
     * A helper specifically for updating feed preferences
     */ async updateFeedPreferences(cb) {
        let res;
        await this.updatePreferences((prefs)=>{
            let feedsPref = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isSavedFeedsPref(pref) && index_1.AppBskyActorDefs.validateSavedFeedsPref(pref).success);
            if (feedsPref) {
                res = cb(feedsPref.saved, feedsPref.pinned);
                feedsPref.saved = res.saved;
                feedsPref.pinned = res.pinned;
            } else {
                res = cb([], []);
                feedsPref = {
                    $type: 'app.bsky.actor.defs#savedFeedsPref',
                    saved: res.saved,
                    pinned: res.pinned
                };
            }
            return prefs.filter((pref)=>!index_1.AppBskyActorDefs.isSavedFeedsPref(pref)).concat([
                feedsPref
            ]);
        });
        return res;
    }
    async updateSavedFeedsV2Preferences(cb) {
        let maybeMutatedSavedFeeds = [];
        await this.updatePreferences((prefs)=>{
            let existingV2Pref = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isSavedFeedsPrefV2(pref) && index_1.AppBskyActorDefs.validateSavedFeedsPrefV2(pref).success);
            let existingV1Pref = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isSavedFeedsPref(pref) && index_1.AppBskyActorDefs.validateSavedFeedsPref(pref).success);
            if (existingV2Pref) {
                maybeMutatedSavedFeeds = cb(existingV2Pref.items);
                existingV2Pref = {
                    ...existingV2Pref,
                    items: maybeMutatedSavedFeeds
                };
            } else {
                maybeMutatedSavedFeeds = cb([]);
                existingV2Pref = {
                    $type: 'app.bsky.actor.defs#savedFeedsPrefV2',
                    items: maybeMutatedSavedFeeds
                };
            }
            // enforce ordering, pinned then saved
            const pinned = existingV2Pref.items.filter((i)=>i.pinned);
            const saved = existingV2Pref.items.filter((i)=>!i.pinned);
            existingV2Pref.items = pinned.concat(saved);
            let updatedPrefs = prefs.filter((pref)=>!index_1.AppBskyActorDefs.isSavedFeedsPrefV2(pref)).concat(existingV2Pref);
            /*
             * If there's a v2 pref present, it means this account was migrated from v1
             * to v2. During the transition period, we double write v2 prefs back to
             * v1, but NOT the other way around.
             */ if (existingV1Pref) {
                const { saved, pinned } = existingV1Pref;
                const v2Compat = (0, util_1.savedFeedsToUriArrays)(// v1 only supports feeds and lists
                existingV2Pref.items.filter((i)=>[
                        'feed',
                        'list'
                    ].includes(i.type)));
                existingV1Pref = {
                    ...existingV1Pref,
                    saved: Array.from(new Set([
                        ...saved,
                        ...v2Compat.saved
                    ])),
                    pinned: Array.from(new Set([
                        ...pinned,
                        ...v2Compat.pinned
                    ]))
                };
                updatedPrefs = updatedPrefs.filter((pref)=>!index_1.AppBskyActorDefs.isSavedFeedsPref(pref)).concat(existingV1Pref);
            }
            return updatedPrefs;
        });
        return maybeMutatedSavedFeeds;
    }
}
exports.Agent = Agent;
_Agent_prefsLock = new WeakMap();
//#region Static configuration
/**
 * The labelers to be used across all requests with the takedown capability
 */ Object.defineProperty(Agent, "appLabelers", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: [
        const_1.BSKY_LABELER_DID
    ]
});
/**
 * Helper to transform the legacy content preferences.
 */ function adjustLegacyContentLabelPref(pref) {
    let visibility = pref.visibility;
    // adjust legacy values
    if (visibility === 'show') {
        visibility = 'ignore';
    }
    return {
        ...pref,
        visibility
    };
}
/**
 * Re-maps legacy labels to new labels on READ. Does not save these changes to
 * the user's preferences.
 */ function remapLegacyLabels(labels) {
    const _labels = {
        ...labels
    };
    const legacyToNewMap = {
        gore: 'graphic-media',
        nsfw: 'porn',
        suggestive: 'sexual'
    };
    for(const labelName in _labels){
        const newLabelName = legacyToNewMap[labelName];
        if (newLabelName) {
            _labels[newLabelName] = _labels[labelName];
        }
    }
    return _labels;
}
/**
 * A helper to get the currently enabled labelers from the full preferences array
 */ function prefsArrayToLabelerDids(prefs) {
    const labelersPref = prefs.findLast((pref)=>index_1.AppBskyActorDefs.isLabelersPref(pref) && index_1.AppBskyActorDefs.validateLabelersPref(pref).success);
    let dids = [];
    if (labelersPref) {
        dids = labelersPref.labelers.map((labeler)=>labeler.did);
    }
    return dids;
}
function isBskyPrefs(v) {
    return v && typeof v === 'object' && 'moderationPrefs' in v && isModPrefs(v.moderationPrefs);
}
function isModPrefs(v) {
    return v && typeof v === 'object' && 'labelers' in v;
}
function migrateLegacyMutedWordsItems(items) {
    return items.map((item)=>({
            ...item,
            id: item.id || common_web_1.TID.nextStr()
        }));
}
function matchMutedWord(existingWord, newWord) {
    // id is undefined in legacy implementation
    const existingId = existingWord.id;
    // prefer matching based on id
    const matchById = existingId && existingId === newWord.id;
    // handle legacy case where id is not set
    const legacyMatchByValue = !existingId && existingWord.value === newWord.value;
    return matchById || legacyMatchByValue;
} //# sourceMappingURL=agent.js.map
}}),
"[project]/node_modules/@atproto/api/dist/atp-agent.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CredentialSession = exports.AtpAgent = void 0;
const common_web_1 = __turbopack_require__("[project]/node_modules/@atproto/common-web/dist/index.js [app-client] (ecmascript)");
const xrpc_1 = __turbopack_require__("[project]/node_modules/@atproto/xrpc/dist/index.js [app-client] (ecmascript)");
const agent_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/agent.js [app-client] (ecmascript)");
const client_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/index.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
const ReadableStream = globalThis.ReadableStream;
/**
 * A wrapper around the {@link Agent} class that uses credential based session
 * management. This class also exposes most of the session management methods
 * directly.
 *
 * This class will be deprecated in the near future. Use {@link Agent} directly
 * with a {@link CredentialSession} instead:
 *
 *  ```ts
 *  const session = new CredentialSession({
 *    service: new URL('https://example.com'),
 *  })
 *
 *  const agent = new Agent(session)
 *  ```
 */ class AtpAgent extends agent_1.Agent {
    constructor(options){
        const sessionManager = options instanceof CredentialSession ? options : new CredentialSession(new URL(options.service), options.fetch, options.persistSession);
        super(sessionManager);
        Object.defineProperty(this, "sessionManager", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // This assignment is already being done in the super constructor, but we
        // need to do it here to make TypeScript happy.
        this.sessionManager = sessionManager;
        if (!(options instanceof CredentialSession) && options.headers) {
            for (const [key, value] of options.headers){
                this.setHeader(key, value);
            }
        }
    }
    clone() {
        return this.copyInto(new AtpAgent(this.sessionManager));
    }
    get session() {
        return this.sessionManager.session;
    }
    get hasSession() {
        return this.sessionManager.hasSession;
    }
    get did() {
        return this.sessionManager.did;
    }
    get serviceUrl() {
        return this.sessionManager.serviceUrl;
    }
    get pdsUrl() {
        return this.sessionManager.pdsUrl;
    }
    get dispatchUrl() {
        return this.sessionManager.dispatchUrl;
    }
    /** @deprecated use {@link serviceUrl} instead */ get service() {
        return this.serviceUrl;
    }
    get persistSession() {
        throw new Error('Cannot set persistSession directly. "persistSession" is defined through the constructor and will be invoked automatically when session data changes.');
    }
    set persistSession(v) {
        throw new Error('Cannot set persistSession directly. "persistSession" must be defined in the constructor and can no longer be changed.');
    }
    /** @deprecated use {@link AtpAgent.serviceUrl} instead */ getServiceUrl() {
        return this.serviceUrl;
    }
    async resumeSession(session) {
        return this.sessionManager.resumeSession(session);
    }
    async createAccount(data, opts) {
        return this.sessionManager.createAccount(data, opts);
    }
    async login(opts) {
        return this.sessionManager.login(opts);
    }
    async logout() {
        return this.sessionManager.logout();
    }
}
exports.AtpAgent = AtpAgent;
/**
 * Credentials (username / password) based session manager. Instances of this
 * class will typically be used as the session manager for an {@link AtpAgent}.
 * They can also be used with an {@link XrpcClient}, if you want to use you
 * own Lexicons.
 */ class CredentialSession {
    constructor(serviceUrl, fetch = globalThis.fetch, persistSession){
        Object.defineProperty(this, "serviceUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: serviceUrl
        });
        Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: fetch
        });
        Object.defineProperty(this, "persistSession", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: persistSession
        });
        Object.defineProperty(this, "pdsUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        }); // The PDS URL, driven by the did doc
        Object.defineProperty(this, "session", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "refreshSessionPromise", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Private {@link ComAtprotoServerNS} used to perform session management API
         * calls on the service endpoint. Calls performed by this agent will not be
         * authenticated using the user's session to allow proper manual configuration
         * of the headers when performing session management operations.
         */ Object.defineProperty(this, "server", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new client_1.ComAtprotoServerNS(// Note that the use of the codegen "schemas" (to instantiate `this.api`),
            // as well as the use of `ComAtprotoServerNS` will cause this class to
            // reference (way) more code than it actually needs. It is not possible,
            // with the current state of the codegen, to generate a client that only
            // includes the methods that are actually used by this class. This is a
            // known limitation that should be addressed in a future version of the
            // codegen.
            new xrpc_1.XrpcClient((url, init)=>{
                return (0, this.fetch)(new URL(url, this.serviceUrl), init);
            }, lexicons_1.schemas))
        });
    }
    get did() {
        return this.session?.did;
    }
    get dispatchUrl() {
        return this.pdsUrl || this.serviceUrl;
    }
    get hasSession() {
        return !!this.session;
    }
    /**
     * Sets a WhatWG "fetch()" function to be used for making HTTP requests.
     */ setFetch(fetch = globalThis.fetch) {
        this.fetch = fetch;
    }
    async fetchHandler(url, init) {
        // wait for any active session-refreshes to finish
        await this.refreshSessionPromise;
        const initialUri = new URL(url, this.dispatchUrl);
        const initialReq = new Request(initialUri, init);
        const initialToken = this.session?.accessJwt;
        if (!initialToken || initialReq.headers.has('authorization')) {
            return (0, this.fetch)(initialReq);
        }
        initialReq.headers.set('authorization', `Bearer ${initialToken}`);
        const initialRes = await (0, this.fetch)(initialReq);
        if (!this.session?.refreshJwt) {
            return initialRes;
        }
        const isExpiredToken = await isErrorResponse(initialRes, [
            400
        ], [
            'ExpiredToken'
        ]);
        if (!isExpiredToken) {
            return initialRes;
        }
        try {
            await this.refreshSession();
        } catch  {
            return initialRes;
        }
        if (init?.signal?.aborted) {
            return initialRes;
        }
        // The stream was already consumed. We cannot retry the request. A solution
        // would be to tee() the input stream but that would bufferize the entire
        // stream in memory which can lead to memory starvation. Instead, we will
        // return the original response and let the calling code handle retries.
        if (ReadableStream && init?.body instanceof ReadableStream) {
            return initialRes;
        }
        // Return initial "ExpiredToken" response if the session was not refreshed.
        const updatedToken = this.session?.accessJwt;
        if (!updatedToken || updatedToken === initialToken) {
            return initialRes;
        }
        // Make sure the initial request is cancelled to avoid leaking resources
        // (NodeJS 👀): https://undici.nodejs.org/#/?id=garbage-collection
        await initialRes.body?.cancel();
        // We need to re-compute the URI in case the PDS endpoint has changed
        const updatedUri = new URL(url, this.dispatchUrl);
        const updatedReq = new Request(updatedUri, init);
        updatedReq.headers.set('authorization', `Bearer ${updatedToken}`);
        return await (0, this.fetch)(updatedReq);
    }
    /**
     * Create a new account and hydrate its session in this agent.
     */ async createAccount(data, opts) {
        try {
            const res = await this.server.createAccount(data, opts);
            this.session = {
                accessJwt: res.data.accessJwt,
                refreshJwt: res.data.refreshJwt,
                handle: res.data.handle,
                did: res.data.did,
                email: data.email,
                emailConfirmed: false,
                emailAuthFactor: false,
                active: true
            };
            this.persistSession?.('create', this.session);
            this._updateApiEndpoint(res.data.didDoc);
            return res;
        } catch (e) {
            this.session = undefined;
            this.persistSession?.('create-failed', undefined);
            throw e;
        }
    }
    /**
     * Start a new session with this agent.
     */ async login(opts) {
        try {
            const res = await this.server.createSession({
                identifier: opts.identifier,
                password: opts.password,
                authFactorToken: opts.authFactorToken
            });
            this.session = {
                accessJwt: res.data.accessJwt,
                refreshJwt: res.data.refreshJwt,
                handle: res.data.handle,
                did: res.data.did,
                email: res.data.email,
                emailConfirmed: res.data.emailConfirmed,
                emailAuthFactor: res.data.emailAuthFactor,
                active: res.data.active ?? true,
                status: res.data.status
            };
            this._updateApiEndpoint(res.data.didDoc);
            this.persistSession?.('create', this.session);
            return res;
        } catch (e) {
            this.session = undefined;
            this.persistSession?.('create-failed', undefined);
            throw e;
        }
    }
    async logout() {
        if (this.session) {
            try {
                await this.server.deleteSession(undefined, {
                    headers: {
                        authorization: `Bearer ${this.session.accessJwt}`
                    }
                });
            } catch  {
            // Ignore errors
            } finally{
                this.session = undefined;
                this.persistSession?.('expired', undefined);
            }
        }
    }
    /**
     * Resume a pre-existing session with this agent.
     */ async resumeSession(session) {
        this.session = session;
        try {
            const res = await this.server.getSession(undefined, {
                headers: {
                    authorization: `Bearer ${session.accessJwt}`
                }
            }).catch(async (err)=>{
                if (err instanceof xrpc_1.XRPCError && [
                    'ExpiredToken',
                    'InvalidToken'
                ].includes(err.error) && session.refreshJwt) {
                    try {
                        const res = await this.server.refreshSession(undefined, {
                            headers: {
                                authorization: `Bearer ${session.refreshJwt}`
                            }
                        });
                        session.accessJwt = res.data.accessJwt;
                        session.refreshJwt = res.data.refreshJwt;
                        return this.server.getSession(undefined, {
                            headers: {
                                authorization: `Bearer ${session.accessJwt}`
                            }
                        });
                    } catch  {
                    // Noop, we'll throw the original error
                    }
                }
                throw err;
            });
            if (res.data.did !== session.did) {
                throw new xrpc_1.XRPCError(xrpc_1.ResponseType.InvalidRequest, 'Invalid session', 'InvalidDID');
            }
            session.email = res.data.email;
            session.handle = res.data.handle;
            session.emailConfirmed = res.data.emailConfirmed;
            session.emailAuthFactor = res.data.emailAuthFactor;
            session.active = res.data.active ?? true;
            session.status = res.data.status;
            // protect against concurrent session updates
            if (this.session === session) {
                this._updateApiEndpoint(res.data.didDoc);
                this.persistSession?.('update', session);
            }
            return res;
        } catch (err) {
            // protect against concurrent session updates
            if (this.session === session) {
                this.session = undefined;
                this.persistSession?.(err instanceof xrpc_1.XRPCError && [
                    'ExpiredToken',
                    'InvalidToken'
                ].includes(err.error) ? 'expired' : 'network-error', undefined);
            }
            throw err;
        }
    }
    /**
     * Internal helper to refresh sessions
     * - Wraps the actual implementation in a promise-guard to ensure only
     *   one refresh is attempted at a time.
     */ async refreshSession() {
        return this.refreshSessionPromise || (this.refreshSessionPromise = this._refreshSessionInner().finally(()=>{
            this.refreshSessionPromise = undefined;
        }));
    }
    /**
     * Internal helper to refresh sessions (actual behavior)
     */ async _refreshSessionInner() {
        if (!this.session?.refreshJwt) {
            return;
        }
        try {
            const res = await this.server.refreshSession(undefined, {
                headers: {
                    authorization: `Bearer ${this.session.refreshJwt}`
                }
            });
            // succeeded, update the session
            this.session = {
                ...this.session,
                accessJwt: res.data.accessJwt,
                refreshJwt: res.data.refreshJwt,
                handle: res.data.handle,
                did: res.data.did
            };
            this._updateApiEndpoint(res.data.didDoc);
            this.persistSession?.('update', this.session);
        } catch (err) {
            if (err instanceof xrpc_1.XRPCError && err.error && [
                'ExpiredToken',
                'InvalidToken'
            ].includes(err.error)) {
                // failed due to a bad refresh token
                this.session = undefined;
                this.persistSession?.('expired', undefined);
            }
        // else: other failures should be ignored - the issue will
        // propagate in the _dispatch() second attempt to run
        // the request
        }
    }
    /**
     * Helper to update the pds endpoint dynamically.
     *
     * The session methods (create, resume, refresh) may respond with the user's
     * did document which contains the user's canonical PDS endpoint. That endpoint
     * may differ from the endpoint used to contact the server. We capture that
     * PDS endpoint and update the client to use that given endpoint for future
     * requests. (This helps ensure smooth migrations between PDSes, especially
     * when the PDSes are operated by a single org.)
     */ _updateApiEndpoint(didDoc) {
        if ((0, common_web_1.isValidDidDoc)(didDoc)) {
            const endpoint = (0, common_web_1.getPdsEndpoint)(didDoc);
            this.pdsUrl = endpoint ? new URL(endpoint) : undefined;
        } else {
            // If the did doc is invalid, we clear the pdsUrl (should never happen)
            this.pdsUrl = undefined;
        }
    }
}
exports.CredentialSession = CredentialSession;
function isErrorObject(v) {
    return xrpc_1.errorResponseBody.safeParse(v).success;
}
async function isErrorResponse(response, status, errorNames) {
    if (!status.includes(response.status)) return false;
    // Some engines (react-native 👀) don't expose a response.body property...
    // if (!response.body) return false
    try {
        const json = await peekJson(response, 10 * 1024);
        return isErrorObject(json) && errorNames.includes(json.error);
    } catch (err) {
        return false;
    }
}
async function peekJson(response, maxSize = Infinity) {
    if (extractType(response) !== 'application/json') throw new Error('Not JSON');
    if (extractLength(response) > maxSize) throw new Error('Response too large');
    return response.clone().json();
}
function extractLength({ headers }) {
    return headers.get('Content-Length') ? Number(headers.get('Content-Length')) : NaN;
}
function extractType({ headers }) {
    return headers.get('Content-Type')?.split(';')[0]?.trim();
} //# sourceMappingURL=atp-agent.js.map
}}),
"[project]/node_modules/@atproto/api/dist/bsky-agent.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BskyAgent = void 0;
const atp_agent_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/atp-agent.js [app-client] (ecmascript)");
/** @deprecated use {@link AtpAgent} instead */ class BskyAgent extends atp_agent_1.AtpAgent {
    clone() {
        if (this.constructor === BskyAgent) {
            const agent = new BskyAgent(this.sessionManager);
            return this.copyInto(agent);
        }
        // sub-classes should override this method
        throw new TypeError('Cannot clone a subclass of BskyAgent');
    }
}
exports.BskyAgent = BskyAgent; //# sourceMappingURL=bsky-agent.js.map
}}),
"[project]/node_modules/@atproto/api/dist/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.lexicons = exports.default = exports.BskyAgent = exports.CredentialSession = exports.AtpAgent = exports.Agent = exports.DEFAULT_LABEL_SETTINGS = exports.LABELS = exports.schemas = exports.parseLanguage = exports.jsonStringToLex = exports.jsonToLex = exports.stringifyLex = exports.lexToJson = exports.BlobRef = exports.AtUri = void 0;
const lexicon_1 = __turbopack_require__("[project]/node_modules/@atproto/lexicon/dist/index.js [app-client] (ecmascript)");
const lexicons_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
var syntax_1 = __turbopack_require__("[project]/node_modules/@atproto/syntax/dist/index.js [app-client] (ecmascript)");
Object.defineProperty(exports, "AtUri", {
    enumerable: true,
    get: function() {
        return syntax_1.AtUri;
    }
});
var lexicon_2 = __turbopack_require__("[project]/node_modules/@atproto/lexicon/dist/index.js [app-client] (ecmascript)");
Object.defineProperty(exports, "BlobRef", {
    enumerable: true,
    get: function() {
        return lexicon_2.BlobRef;
    }
});
Object.defineProperty(exports, "lexToJson", {
    enumerable: true,
    get: function() {
        return lexicon_2.lexToJson;
    }
});
Object.defineProperty(exports, "stringifyLex", {
    enumerable: true,
    get: function() {
        return lexicon_2.stringifyLex;
    }
});
Object.defineProperty(exports, "jsonToLex", {
    enumerable: true,
    get: function() {
        return lexicon_2.jsonToLex;
    }
});
Object.defineProperty(exports, "jsonStringToLex", {
    enumerable: true,
    get: function() {
        return lexicon_2.jsonStringToLex;
    }
});
var common_web_1 = __turbopack_require__("[project]/node_modules/@atproto/common-web/dist/index.js [app-client] (ecmascript)");
Object.defineProperty(exports, "parseLanguage", {
    enumerable: true,
    get: function() {
        return common_web_1.parseLanguage;
    }
});
__exportStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/types.js [app-client] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/const.js [app-client] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/util.js [app-client] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/client/index.js [app-client] (ecmascript)"), exports);
var lexicons_2 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/client/lexicons.js [app-client] (ecmascript)");
Object.defineProperty(exports, "schemas", {
    enumerable: true,
    get: function() {
        return lexicons_2.schemas;
    }
});
__exportStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/rich-text/rich-text.js [app-client] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/rich-text/sanitization.js [app-client] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/rich-text/unicode.js [app-client] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/rich-text/util.js [app-client] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/index.js [app-client] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/types.js [app-client] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@atproto/api/dist/mocker.js [app-client] (ecmascript)"), exports);
var labels_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/moderation/const/labels.js [app-client] (ecmascript)");
Object.defineProperty(exports, "LABELS", {
    enumerable: true,
    get: function() {
        return labels_1.LABELS;
    }
});
Object.defineProperty(exports, "DEFAULT_LABEL_SETTINGS", {
    enumerable: true,
    get: function() {
        return labels_1.DEFAULT_LABEL_SETTINGS;
    }
});
var agent_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/agent.js [app-client] (ecmascript)");
Object.defineProperty(exports, "Agent", {
    enumerable: true,
    get: function() {
        return agent_1.Agent;
    }
});
var atp_agent_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/atp-agent.js [app-client] (ecmascript)");
Object.defineProperty(exports, "AtpAgent", {
    enumerable: true,
    get: function() {
        return atp_agent_1.AtpAgent;
    }
});
var atp_agent_2 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/atp-agent.js [app-client] (ecmascript)");
Object.defineProperty(exports, "CredentialSession", {
    enumerable: true,
    get: function() {
        return atp_agent_2.CredentialSession;
    }
});
var bsky_agent_1 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/bsky-agent.js [app-client] (ecmascript)");
Object.defineProperty(exports, "BskyAgent", {
    enumerable: true,
    get: function() {
        return bsky_agent_1.BskyAgent;
    }
});
var atp_agent_3 = __turbopack_require__("[project]/node_modules/@atproto/api/dist/atp-agent.js [app-client] (ecmascript)");
/** @deprecated */ Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return atp_agent_3.AtpAgent;
    }
});
// Expose a copy to prevent alteration of the internal Lexicon instance used by
// the AtpBaseClient class.
exports.lexicons = new lexicon_1.Lexicons(lexicons_1.lexicons); //# sourceMappingURL=index.js.map
}}),
}]);

//# sourceMappingURL=node_modules_%40atproto_api_dist_66eef7._.js.map